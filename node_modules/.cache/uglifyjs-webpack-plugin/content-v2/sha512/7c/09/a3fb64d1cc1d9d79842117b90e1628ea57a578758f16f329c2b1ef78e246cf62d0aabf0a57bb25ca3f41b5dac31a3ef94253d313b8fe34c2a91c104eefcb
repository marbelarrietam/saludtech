{"map":"{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\"}","code":"webpackHotUpdate(0,{12:function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(2)(true);\\n// imports\\n\\n\\n// module\\nexports.push([module.i, \"\\\\n.navbar-brand img{\\\\n  height: 40px;\\\\n}\\\\n.navbar-btn{\\\\n}\\\\n\", \"\", {\"version\":3,\"sources\":[\"C:/Users/Keiner/Dropbox/UNINORTE/saludtech/src/components/layout/src/components/layout/Header.vue\"],\"names\":[],\"mappings\":\";AAsBA;EACA,aAAA;CACA;AAEA;CAEA\",\"file\":\"Header.vue\",\"sourcesContent\":[\"<template>\\\\n<div>\\\\n  <nav class=\\\\\"navbar navbar-inverse navbar-fixed-top\\\\\">\\\\n    <div class=\\\\\"navbar-header\\\\\">\\\\n      <a class=\\\\\"navbar-brand\\\\\" href=\\\\\"#\\\\\">\\\\n        <img alt=\\\\\"Brand\\\\\" src=\\\\\"./../../assets/logo.png\\\\\">\\\\n        SaludTech\\\\n      </a>\\\\n<div class=\\\\\"navbar-nav\\\\\">\\\\n<a class=\\\\\"nav-item nav-link\\\\\" href=\\\\\"#\\\\\">Home</a>\\\\n<a class=\\\\\"nav-item nav-link\\\\\" href=\\\\\"#\\\\\">Servicios</a>\\\\n</div>\\\\n\\\\n      <button type=\\\\\"button\\\\\" class=\\\\\"btn btn-default navbar-btn\\\\\">Inicia sesion</button>\\\\n    </div>\\\\n</nav>\\\\n</div>\\\\n\\\\n</template>\\\\n\\\\n<style>\\\\n\\\\n.navbar-brand img{\\\\n  height: 40px;\\\\n}\\\\n\\\\n.navbar-btn{\\\\n\\\\n}\\\\n</style>\\\\n\"],\"sourceRoot\":\"\"}]);\\n\\n// exports\\n\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9sYXlvdXQvSGVhZGVyLnZ1ZT9mMGFmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDJCQUEyQixtQkFBTyxDQUFDLENBQWtEO0FBQ3JGOzs7QUFHQTtBQUNBLGNBQWMsUUFBUyx1QkFBdUIsaUJBQWlCLEdBQUcsY0FBYyxHQUFHLFVBQVUsb0pBQW9KLE1BQU0sVUFBVSxLQUFLLEtBQUssOGxCQUE4bEIsaUJBQWlCLEdBQUcsZ0JBQWdCLEtBQUssK0JBQStCOztBQUVqN0IiLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKHRydWUpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuLm5hdmJhci1icmFuZCBpbWd7XFxuICBoZWlnaHQ6IDQwcHg7XFxufVxcbi5uYXZiYXItYnRue1xcbn1cXG5cIiwgXCJcIiwge1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wiQzovVXNlcnMvS2VpbmVyL0Ryb3Bib3gvVU5JTk9SVEUvc2FsdWR0ZWNoL3NyYy9jb21wb25lbnRzL2xheW91dC9zcmMvY29tcG9uZW50cy9sYXlvdXQvSGVhZGVyLnZ1ZVwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiO0FBc0JBO0VBQ0EsYUFBQTtDQUNBO0FBRUE7Q0FFQVwiLFwiZmlsZVwiOlwiSGVhZGVyLnZ1ZVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI8dGVtcGxhdGU+XFxuPGRpdj5cXG4gIDxuYXYgY2xhc3M9XFxcIm5hdmJhciBuYXZiYXItaW52ZXJzZSBuYXZiYXItZml4ZWQtdG9wXFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwibmF2YmFyLWhlYWRlclxcXCI+XFxuICAgICAgPGEgY2xhc3M9XFxcIm5hdmJhci1icmFuZFxcXCIgaHJlZj1cXFwiI1xcXCI+XFxuICAgICAgICA8aW1nIGFsdD1cXFwiQnJhbmRcXFwiIHNyYz1cXFwiLi8uLi8uLi9hc3NldHMvbG9nby5wbmdcXFwiPlxcbiAgICAgICAgU2FsdWRUZWNoXFxuICAgICAgPC9hPlxcbjxkaXYgY2xhc3M9XFxcIm5hdmJhci1uYXZcXFwiPlxcbjxhIGNsYXNzPVxcXCJuYXYtaXRlbSBuYXYtbGlua1xcXCIgaHJlZj1cXFwiI1xcXCI+SG9tZTwvYT5cXG48YSBjbGFzcz1cXFwibmF2LWl0ZW0gbmF2LWxpbmtcXFwiIGhyZWY9XFxcIiNcXFwiPlNlcnZpY2lvczwvYT5cXG48L2Rpdj5cXG5cXG4gICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBuYXZiYXItYnRuXFxcIj5JbmljaWEgc2VzaW9uPC9idXR0b24+XFxuICAgIDwvZGl2PlxcbjwvbmF2PlxcbjwvZGl2PlxcblxcbjwvdGVtcGxhdGU+XFxuXFxuPHN0eWxlPlxcblxcbi5uYXZiYXItYnJhbmQgaW1ne1xcbiAgaGVpZ2h0OiA0MHB4O1xcbn1cXG5cXG4ubmF2YmFyLWJ0bntcXG5cXG59XFxuPC9zdHlsZT5cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcblxuLy8gZXhwb3J0c1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///12\\n')},19:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval(\"__webpack_require__.r(__webpack_exports__);\\nvar components_namespaceObject = {};\\n__webpack_require__.d(components_namespaceObject, \\\"Alert\\\", function() { return components_alert; });\\n__webpack_require__.d(components_namespaceObject, \\\"Badge\\\", function() { return components_badge; });\\n__webpack_require__.d(components_namespaceObject, \\\"Breadcrumb\\\", function() { return components_breadcrumb; });\\n__webpack_require__.d(components_namespaceObject, \\\"Button\\\", function() { return components_button; });\\n__webpack_require__.d(components_namespaceObject, \\\"ButtonToolbar\\\", function() { return components_button_toolbar; });\\n__webpack_require__.d(components_namespaceObject, \\\"ButtonGroup\\\", function() { return components_button_group; });\\n__webpack_require__.d(components_namespaceObject, \\\"Card\\\", function() { return components_card; });\\n__webpack_require__.d(components_namespaceObject, \\\"Carousel\\\", function() { return components_carousel; });\\n__webpack_require__.d(components_namespaceObject, \\\"Collapse\\\", function() { return components_collapse; });\\n__webpack_require__.d(components_namespaceObject, \\\"Dropdown\\\", function() { return components_dropdown; });\\n__webpack_require__.d(components_namespaceObject, \\\"Embed\\\", function() { return components_embed; });\\n__webpack_require__.d(components_namespaceObject, \\\"Form\\\", function() { return components_form; });\\n__webpack_require__.d(components_namespaceObject, \\\"FormGroup\\\", function() { return components_form_group; });\\n__webpack_require__.d(components_namespaceObject, \\\"FormInput\\\", function() { return components_form_input; });\\n__webpack_require__.d(components_namespaceObject, \\\"FormTextarea\\\", function() { return components_form_textarea; });\\n__webpack_require__.d(components_namespaceObject, \\\"FormFile\\\", function() { return components_form_file; });\\n__webpack_require__.d(components_namespaceObject, \\\"FormCheckbox\\\", function() { return components_form_checkbox; });\\n__webpack_require__.d(components_namespaceObject, \\\"FormRadio\\\", function() { return components_form_radio; });\\n__webpack_require__.d(components_namespaceObject, \\\"FormSelect\\\", function() { return components_form_select; });\\n__webpack_require__.d(components_namespaceObject, \\\"Image\\\", function() { return components_image; });\\n__webpack_require__.d(components_namespaceObject, \\\"InputGroup\\\", function() { return components_input_group; });\\n__webpack_require__.d(components_namespaceObject, \\\"Jumbotron\\\", function() { return components_jumbotron; });\\n__webpack_require__.d(components_namespaceObject, \\\"Layout\\\", function() { return layout; });\\n__webpack_require__.d(components_namespaceObject, \\\"Link\\\", function() { return components_link; });\\n__webpack_require__.d(components_namespaceObject, \\\"ListGroup\\\", function() { return components_list_group; });\\n__webpack_require__.d(components_namespaceObject, \\\"Media\\\", function() { return components_media; });\\n__webpack_require__.d(components_namespaceObject, \\\"Modal\\\", function() { return components_modal; });\\n__webpack_require__.d(components_namespaceObject, \\\"Nav\\\", function() { return components_nav; });\\n__webpack_require__.d(components_namespaceObject, \\\"Navbar\\\", function() { return components_navbar; });\\n__webpack_require__.d(components_namespaceObject, \\\"Pagination\\\", function() { return components_pagination; });\\n__webpack_require__.d(components_namespaceObject, \\\"PaginationNav\\\", function() { return components_pagination_nav; });\\n__webpack_require__.d(components_namespaceObject, \\\"Popover\\\", function() { return components_popover; });\\n__webpack_require__.d(components_namespaceObject, \\\"Progress\\\", function() { return components_progress; });\\n__webpack_require__.d(components_namespaceObject, \\\"Table\\\", function() { return components_table; });\\n__webpack_require__.d(components_namespaceObject, \\\"Tabs\\\", function() { return components_tabs; });\\n__webpack_require__.d(components_namespaceObject, \\\"Tooltip\\\", function() { return components_tooltip; });\\nvar directives_namespaceObject = {};\\n__webpack_require__.d(directives_namespaceObject, \\\"Toggle\\\", function() { return directives_toggle; });\\n__webpack_require__.d(directives_namespaceObject, \\\"Modal\\\", function() { return directives_modal; });\\n__webpack_require__.d(directives_namespaceObject, \\\"Scrollspy\\\", function() { return directives_scrollspy; });\\n__webpack_require__.d(directives_namespaceObject, \\\"Tooltip\\\", function() { return directives_tooltip; });\\n__webpack_require__.d(directives_namespaceObject, \\\"Popover\\\", function() { return directives_popover; });\\n\\n// EXTERNAL MODULE: ./node_modules/vue/dist/vue.esm.js\\nvar vue_esm = __webpack_require__(14);\\n\\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{\\\"id\\\":\\\"data-v-5b45e25f\\\",\\\"hasScoped\\\":false,\\\"optionsId\\\":\\\"0\\\",\\\"buble\\\":{\\\"transforms\\\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/layout/Header.vue\\nvar Header_render = function() {\\n  var _vm = this\\n  var _h = _vm.$createElement\\n  var _c = _vm._self._c || _h\\n  return _vm._m(0)\\n}\\nvar staticRenderFns = [\\n  function() {\\n    var _vm = this\\n    var _h = _vm.$createElement\\n    var _c = _vm._self._c || _h\\n    return _c(\\\"div\\\", [\\n      _c(\\\"nav\\\", { staticClass: \\\"navbar navbar-inverse navbar-fixed-top\\\" }, [\\n        _c(\\\"div\\\", { staticClass: \\\"navbar-header\\\" }, [\\n          _c(\\\"a\\\", { staticClass: \\\"navbar-brand\\\", attrs: { href: \\\"#\\\" } }, [\\n            _c(\\\"img\\\", {\\n              attrs: { alt: \\\"Brand\\\", src: __webpack_require__(29) }\\n            }),\\n            _vm._v(\\\"\\\\n        SaludTech\\\\n      \\\")\\n          ]),\\n          _vm._v(\\\" \\\"),\\n          _c(\\\"div\\\", { staticClass: \\\"navbar-nav\\\" }, [\\n            _c(\\n              \\\"a\\\",\\n              { staticClass: \\\"nav-item nav-link\\\", attrs: { href: \\\"#\\\" } },\\n              [_vm._v(\\\"Home\\\")]\\n            ),\\n            _vm._v(\\\" \\\"),\\n            _c(\\n              \\\"a\\\",\\n              { staticClass: \\\"nav-item nav-link\\\", attrs: { href: \\\"#\\\" } },\\n              [_vm._v(\\\"Servicios\\\")]\\n            )\\n          ]),\\n          _vm._v(\\\" \\\"),\\n          _c(\\n            \\\"button\\\",\\n            {\\n              staticClass: \\\"btn btn-default navbar-btn\\\",\\n              attrs: { type: \\\"button\\\" }\\n            },\\n            [_vm._v(\\\"Inicia sesion\\\")]\\n          )\\n        ])\\n      ])\\n    ])\\n  }\\n]\\nHeader_render._withStripped = true\\n\\nif (true) {\\n  module.hot.accept()\\n  if (module.hot.data) {\\n    __webpack_require__(11)      .rerender(\\\"data-v-5b45e25f\\\", { render: Header_render, staticRenderFns: staticRenderFns })\\n  }\\n}\\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/runtime/component-normalizer.js\\n/* globals __VUE_SSR_CONTEXT__ */\\n\\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\\n// This module is a runtime utility for cleaner component module output and will\\n// be included in the final webpack user bundle.\\n\\nfunction normalizeComponent (\\n  scriptExports,\\n  render,\\n  staticRenderFns,\\n  functionalTemplate,\\n  injectStyles,\\n  scopeId,\\n  moduleIdentifier, /* server only */\\n  shadowMode /* vue-cli only */\\n) {\\n  scriptExports = scriptExports || {}\\n\\n  // ES6 modules interop\\n  var type = typeof scriptExports.default\\n  if (type === 'object' || type === 'function') {\\n    scriptExports = scriptExports.default\\n  }\\n\\n  // Vue.extend constructor export interop\\n  var options = typeof scriptExports === 'function'\\n    ? scriptExports.options\\n    : scriptExports\\n\\n  // render functions\\n  if (render) {\\n    options.render = render\\n    options.staticRenderFns = staticRenderFns\\n    options._compiled = true\\n  }\\n\\n  // functional template\\n  if (functionalTemplate) {\\n    options.functional = true\\n  }\\n\\n  // scopedId\\n  if (scopeId) {\\n    options._scopeId = scopeId\\n  }\\n\\n  var hook\\n  if (moduleIdentifier) { // server build\\n    hook = function (context) {\\n      // 2.3 injection\\n      context =\\n        context || // cached call\\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\\n      // 2.2 with runInNewContext: true\\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\\n        context = __VUE_SSR_CONTEXT__\\n      }\\n      // inject component styles\\n      if (injectStyles) {\\n        injectStyles.call(this, context)\\n      }\\n      // register component module identifier for async chunk inferrence\\n      if (context && context._registeredComponents) {\\n        context._registeredComponents.add(moduleIdentifier)\\n      }\\n    }\\n    // used by ssr in case component is cached and beforeCreate\\n    // never gets called\\n    options._ssrRegister = hook\\n  } else if (injectStyles) {\\n    hook = shadowMode\\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\\n      : injectStyles\\n  }\\n\\n  if (hook) {\\n    if (options.functional) {\\n      // for template-only hot-reload because in that case the render fn doesn't\\n      // go through the normalizer\\n      options._injectStyles = hook\\n      // register for functioal component in vue file\\n      var originalRender = options.render\\n      options.render = function renderWithStyleInjection (h, context) {\\n        hook.call(context)\\n        return originalRender(h, context)\\n      }\\n    } else {\\n      // inject component registration as beforeCreate hook\\n      var existing = options.beforeCreate\\n      options.beforeCreate = existing\\n        ? [].concat(existing, hook)\\n        : [hook]\\n    }\\n  }\\n\\n  return {\\n    exports: scriptExports,\\n    options: options\\n  }\\n}\\n\\n// CONCATENATED MODULE: ./src/components/layout/Header.vue\\nvar disposed = false\\nfunction injectStyle (context) {\\n  if (disposed) return\\n  __webpack_require__(30)\\n}\\n/* script */\\nvar __vue_script__ = null\\n/* template */\\n\\n/* template functional */\\nvar __vue_template_functional__ = false\\n/* styles */\\nvar __vue_styles__ = injectStyle\\n/* scopeId */\\nvar __vue_scopeId__ = null\\n/* moduleIdentifier (server only) */\\nvar __vue_module_identifier__ = null\\n\\nvar Component = normalizeComponent(\\n  __vue_script__,\\n  Header_render,\\n  staticRenderFns,\\n  __vue_template_functional__,\\n  __vue_styles__,\\n  __vue_scopeId__,\\n  __vue_module_identifier__\\n)\\nComponent.options.__file = \\\"src\\\\\\\\components\\\\\\\\layout\\\\\\\\Header.vue\\\"\\n\\n/* hot reload */\\nif (true) {(function () {\\n  var hotAPI = __webpack_require__(11)\\n  hotAPI.install(__webpack_require__(14), false)\\n  if (!hotAPI.compatible) return\\n  module.hot.accept()\\n  if (!module.hot.data) {\\n    hotAPI.createRecord(\\\"data-v-5b45e25f\\\", Component.options)\\n  } else {\\n    hotAPI.reload(\\\"data-v-5b45e25f\\\", Component.options)\\n  }\\n  module.hot.dispose(function (data) {\\n    disposed = true\\n  })\\n})()}\\n\\n/* harmony default export */ var Header = (Component.exports);\\n\\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/App.vue\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n\\n\\n/* harmony default export */ var App = ({\\n  name: 'app',\\n  components: { stheader: Header },\\n  data: function data() {\\n    return {\\n      prueba: 'HOLA',\\n      elem: [1, 2, 3, 4, 4, 3, 1, 2, 2, 1, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 9]\\n    };\\n  },\\n\\n  methods: {}\\n});\\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{\\\"id\\\":\\\"data-v-04c2046b\\\",\\\"hasScoped\\\":false,\\\"optionsId\\\":\\\"0\\\",\\\"buble\\\":{\\\"transforms\\\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/App.vue\\nvar App_render = function() {\\n  var _vm = this\\n  var _h = _vm.$createElement\\n  var _c = _vm._self._c || _h\\n  return _c(\\n    \\\"div\\\",\\n    { attrs: { id: \\\"app\\\" } },\\n    [\\n      _c(\\\"stheader\\\"),\\n      _vm._v(\\\" \\\"),\\n      _vm._l(_vm.elem, function(i) {\\n        return _c(\\\"h1\\\", [_vm._v(\\\" \\\" + _vm._s(_vm.prueba) + \\\" \\\")])\\n      })\\n    ],\\n    2\\n  )\\n}\\nvar App_staticRenderFns = []\\nApp_render._withStripped = true\\n\\nif (true) {\\n  module.hot.accept()\\n  if (module.hot.data) {\\n    __webpack_require__(11)      .rerender(\\\"data-v-04c2046b\\\", { render: App_render, staticRenderFns: App_staticRenderFns })\\n  }\\n}\\n// CONCATENATED MODULE: ./src/App.vue\\nvar App_disposed = false\\nfunction App_injectStyle (context) {\\n  if (App_disposed) return\\n  __webpack_require__(31)\\n}\\n/* script */\\n\\n\\n/* template */\\n\\n/* template functional */\\nvar App_vue_template_functional_ = false\\n/* styles */\\nvar App_vue_styles_ = App_injectStyle\\n/* scopeId */\\nvar App_vue_scopeId_ = null\\n/* moduleIdentifier (server only) */\\nvar App_vue_module_identifier_ = null\\n\\nvar App_Component = normalizeComponent(\\n  App,\\n  App_render,\\n  App_staticRenderFns,\\n  App_vue_template_functional_,\\n  App_vue_styles_,\\n  App_vue_scopeId_,\\n  App_vue_module_identifier_\\n)\\nApp_Component.options.__file = \\\"src\\\\\\\\App.vue\\\"\\n\\n/* hot reload */\\nif (true) {(function () {\\n  var hotAPI = __webpack_require__(11)\\n  hotAPI.install(__webpack_require__(14), false)\\n  if (!hotAPI.compatible) return\\n  module.hot.accept()\\n  if (!module.hot.data) {\\n    hotAPI.createRecord(\\\"data-v-04c2046b\\\", App_Component.options)\\n  } else {\\n    hotAPI.reload(\\\"data-v-04c2046b\\\", App_Component.options)\\n  }\\n  module.hot.dispose(function (data) {\\n    App_disposed = true\\n  })\\n})()}\\n\\n/* harmony default export */ var src_App = (App_Component.exports);\\n\\n// CONCATENATED MODULE: ./node_modules/vue-functional-data-merge/dist/lib.esm.js\\nvar __assign=function(){return(__assign=Object.assign||function(e){for(var a,s=1,t=arguments.length;s<t;s++)for(var r in a=arguments[s])Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r]);return e}).apply(this,arguments)};function mergeData(){for(var e,a,s={},t=arguments.length;t--;)for(var r=0,c=Object.keys(arguments[t]);r<c.length;r++)switch(e=c[r]){case\\\"class\\\":case\\\"style\\\":case\\\"directives\\\":Array.isArray(s[e])||(s[e]=[]),s[e]=s[e].concat(arguments[t][e]);break;case\\\"staticClass\\\":if(!arguments[t][e])break;void 0===s[e]&&(s[e]=\\\"\\\"),s[e]&&(s[e]+=\\\" \\\"),s[e]+=arguments[t][e].trim();break;case\\\"on\\\":case\\\"nativeOn\\\":s[e]||(s[e]={});for(var n=0,o=Object.keys(arguments[t][e]||{});n<o.length;n++)a=o[n],s[e][a]?s[e][a]=[].concat(s[e][a],arguments[t][e][a]):s[e][a]=arguments[t][e][a];break;case\\\"attrs\\\":case\\\"props\\\":case\\\"domProps\\\":case\\\"scopedSlots\\\":case\\\"staticStyle\\\":case\\\"hook\\\":case\\\"transition\\\":s[e]||(s[e]={}),s[e]=__assign({},arguments[t][e],s[e]);break;case\\\"slot\\\":case\\\"key\\\":case\\\"ref\\\":case\\\"tag\\\":case\\\"show\\\":case\\\"keepAlive\\\":default:s[e]||(s[e]=arguments[t][e])}return s}\\n//# sourceMappingURL=lib.esm.js.map\\n\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/button/button-close.js\\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\n\\nvar button_close_props = {\\n  disabled: {\\n    type: Boolean,\\n    default: false\\n  },\\n  ariaLabel: {\\n    type: String,\\n    default: 'Close'\\n  },\\n  textVariant: {\\n    type: String,\\n    default: null\\n  }\\n};\\n\\n/* harmony default export */ var button_close = ({\\n  functional: true,\\n  props: button_close_props,\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data,\\n        listeners = _ref.listeners,\\n        slots = _ref.slots;\\n\\n    var componentData = {\\n      staticClass: 'close',\\n      class: _defineProperty({}, 'text-' + props.textVariant, props.textVariant),\\n      attrs: {\\n        type: 'button',\\n        disabled: props.disabled,\\n        'aria-label': props.ariaLabel ? String(props.ariaLabel) : null\\n      },\\n      on: {\\n        click: function click(e) {\\n          // Ensure click on button HTML content is also disabled\\n          if (props.disabled && e instanceof Event) {\\n            e.stopPropagation();\\n            e.preventDefault();\\n          }\\n        }\\n      }\\n      // Careful not to override the slot with innerHTML\\n    };if (!slots().default) {\\n      componentData.domProps = { innerHTML: '&times;' };\\n    }\\n    return h('button', mergeData(data, componentData), slots().default);\\n  }\\n});\\n// EXTERNAL MODULE: ./node_modules/bootstrap-vue/es/components/alert/alert.css\\nvar alert_alert = __webpack_require__(25);\\n\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/alert/alert.js\\n\\n\\n\\n\\n/* harmony default export */ var components_alert_alert = ({\\n  components: { bButtonClose: button_close },\\n  render: function render(h) {\\n    if (!this.localShow) {\\n      // If not showing, render placeholder\\n      return h(false);\\n    }\\n    var dismissBtn = h(false);\\n    if (this.dismissible) {\\n      // Add dismiss button\\n      dismissBtn = h('b-button-close', { attrs: { 'aria-label': this.dismissLabel }, on: { click: this.dismiss } }, [this.$slots.dismiss]);\\n    }\\n    var alert = h('div', { class: this.classObject, attrs: { role: 'alert', 'aria-live': 'polite', 'aria-atomic': true } }, [dismissBtn, this.$slots.default]);\\n    return !this.fade ? alert : h('transition', { props: { name: 'fade', appear: true } }, [alert]);\\n  },\\n\\n  model: {\\n    prop: 'show',\\n    event: 'input'\\n  },\\n  data: function data() {\\n    return {\\n      countDownTimerId: null,\\n      dismissed: false\\n    };\\n  },\\n\\n  computed: {\\n    classObject: function classObject() {\\n      return ['alert', this.alertVariant, this.dismissible ? 'alert-dismissible' : ''];\\n    },\\n    alertVariant: function alertVariant() {\\n      var variant = this.variant;\\n      return 'alert-' + variant;\\n    },\\n    localShow: function localShow() {\\n      return !this.dismissed && (this.countDownTimerId || this.show);\\n    }\\n  },\\n  props: {\\n    variant: {\\n      type: String,\\n      default: 'info'\\n    },\\n    dismissible: {\\n      type: Boolean,\\n      default: false\\n    },\\n    dismissLabel: {\\n      type: String,\\n      default: 'Close'\\n    },\\n    show: {\\n      type: [Boolean, Number],\\n      default: false\\n    },\\n    fade: {\\n      type: Boolean,\\n      default: false\\n    }\\n  },\\n  watch: {\\n    show: function show() {\\n      this.showChanged();\\n    }\\n  },\\n  mounted: function mounted() {\\n    this.showChanged();\\n  },\\n  destroyed /* istanbul ignore next */: function destroyed() {\\n    this.clearCounter();\\n  },\\n\\n  methods: {\\n    dismiss: function dismiss() {\\n      this.clearCounter();\\n      this.dismissed = true;\\n      this.$emit('dismissed');\\n      this.$emit('input', false);\\n      if (typeof this.show === 'number') {\\n        this.$emit('dismiss-count-down', 0);\\n        this.$emit('input', 0);\\n      } else {\\n        this.$emit('input', false);\\n      }\\n    },\\n    clearCounter: function clearCounter() {\\n      if (this.countDownTimerId) {\\n        clearInterval(this.countDownTimerId);\\n        this.countDownTimerId = null;\\n      }\\n    },\\n    showChanged: function showChanged() {\\n      var _this = this;\\n\\n      // Reset counter status\\n      this.clearCounter();\\n      // Reset dismiss status\\n      this.dismissed = false;\\n      // No timer for boolean values\\n      if (this.show === true || this.show === false || this.show === null || this.show === 0) {\\n        return;\\n      }\\n      // Start counter\\n      var dismissCountDown = this.show;\\n      this.countDownTimerId = setInterval(function () {\\n        if (dismissCountDown < 1) {\\n          _this.dismiss();\\n          return;\\n        }\\n        dismissCountDown--;\\n        _this.$emit('dismiss-count-down', dismissCountDown);\\n        _this.$emit('input', dismissCountDown);\\n      }, 1000);\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/utils/plugins.js\\n/**\\n * Register a component plugin as being loaded. returns true if compoent plugin already registered\\n * @param {object} Vue\\n * @param {string} Component name\\n * @param {object} Component definition\\n */\\nfunction registerComponent(Vue, name, def) {\\n  Vue._bootstrap_vue_components_ = Vue._bootstrap_vue_components_ || {};\\n  var loaded = Vue._bootstrap_vue_components_[name];\\n  if (!loaded && def && name) {\\n    Vue._bootstrap_vue_components_[name] = true;\\n    Vue.component(name, def);\\n  }\\n  return loaded;\\n}\\n\\n/**\\n * Register a group of components as being loaded.\\n * @param {object} Vue\\n * @param {object} Object of component definitions\\n */\\nfunction registerComponents(Vue, components) {\\n  for (var component in components) {\\n    registerComponent(Vue, component, components[component]);\\n  }\\n}\\n\\n/**\\n * Register a directive as being loaded. returns true if directive plugin already registered\\n * @param {object} Vue\\n * @param {string} Directive name\\n * @param {object} Directive definition\\n */\\nfunction registerDirective(Vue, name, def) {\\n  Vue._bootstrap_vue_directives_ = Vue._bootstrap_vue_directives_ || {};\\n  var loaded = Vue._bootstrap_vue_directives_[name];\\n  if (!loaded && def && name) {\\n    Vue._bootstrap_vue_directives_[name] = true;\\n    Vue.directive(name, def);\\n  }\\n  return loaded;\\n}\\n\\n/**\\n * Register a group of directives as being loaded.\\n * @param {object} Vue\\n * @param {object} Object of directive definitions\\n */\\nfunction registerDirectives(Vue, directives) {\\n  for (var directive in directives) {\\n    registerDirective(Vue, directive, directives[directive]);\\n  }\\n}\\n\\n/**\\n * Install plugin if window.Vue available\\n * @param {object} Plugin definition\\n */\\nfunction vueUse(VuePlugin) {\\n  if (typeof window !== 'undefined' && window.Vue) {\\n    window.Vue.use(VuePlugin);\\n  }\\n}\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/alert/index.js\\n\\n\\n\\nvar components = {\\n  bAlert: components_alert_alert\\n};\\n\\nvar VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, components);\\n  }\\n};\\n\\nvueUse(VuePlugin);\\n\\n/* harmony default export */ var components_alert = (VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/utils/object.js\\n/**\\n * Aliasing Object[method] allows the minifier to shorten methods to a single character variable,\\n * as well as giving BV a chance to inject polyfills.\\n * As long as we avoid\\n * - import * as Object from \\\"utils/object\\\"\\n * all unused exports should be removed by tree-shaking.\\n */\\n\\n// @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\\nif (typeof Object.assign !== 'function') {\\n  Object.assign = function (target, varArgs) {\\n    // .length of function is 2\\n\\n    if (target == null) {\\n      // TypeError if undefined or null\\n      throw new TypeError('Cannot convert undefined or null to object');\\n    }\\n\\n    var to = Object(target);\\n\\n    for (var index = 1; index < arguments.length; index++) {\\n      var nextSource = arguments[index];\\n\\n      if (nextSource != null) {\\n        // Skip over if undefined or null\\n        for (var nextKey in nextSource) {\\n          // Avoid bugs when hasOwnProperty is shadowed\\n          if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\\n            to[nextKey] = nextSource[nextKey];\\n          }\\n        }\\n      }\\n    }\\n    return to;\\n  };\\n}\\n\\n// @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Polyfill\\nif (!Object.is) {\\n  Object.is = function (x, y) {\\n    // SameValue algorithm\\n    if (x === y) {\\n      // Steps 1-5, 7-10\\n      // Steps 6.b-6.e: +0 != -0\\n      return x !== 0 || 1 / x === 1 / y;\\n    } else {\\n      // Step 6.a: NaN == NaN\\n      // eslint-disable-next-line no-self-compare\\n      return x !== x && y !== y;\\n    }\\n  };\\n}\\n\\nvar object_assign = Object.assign;\\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\\nvar keys = Object.keys;\\nvar defineProperties = Object.defineProperties;\\nvar defineProperty = Object.defineProperty;\\nvar freeze = Object.freeze;\\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\\nvar getPrototypeOf = Object.getPrototypeOf;\\nvar create = Object.create;\\nvar isFrozen = Object.isFrozen;\\nvar is = Object.is;\\n\\nfunction readonlyDescriptor() {\\n  return { enumerable: true, configurable: false, writable: false };\\n}\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/utils/array.js\\n// Production steps of ECMA-262, Edition 6, 22.1.2.1\\n// es6-ified by @alexsasharegan\\nif (!Array.from) {\\n  Array.from = function () {\\n    var toStr = Object.prototype.toString;\\n    var isCallable = function isCallable(fn) {\\n      return typeof fn === 'function' || toStr.call(fn) === '[object Function]';\\n    };\\n    var toInteger = function toInteger(value) {\\n      var number = Number(value);\\n      if (isNaN(number)) {\\n        return 0;\\n      }\\n      if (number === 0 || !isFinite(number)) {\\n        return number;\\n      }\\n      return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));\\n    };\\n    var maxSafeInteger = Math.pow(2, 53) - 1;\\n    var toLength = function toLength(value) {\\n      return Math.min(Math.max(toInteger(value), 0), maxSafeInteger);\\n    };\\n\\n    // The length property of the from method is 1.\\n    return function from(arrayLike /*, mapFn, thisArg */) {\\n      // 1. Let C be the this value.\\n      var C = this;\\n\\n      // 2. Let items be ToObject(arrayLike).\\n      var items = Object(arrayLike);\\n\\n      // 3. ReturnIfAbrupt(items).\\n      if (arrayLike == null) {\\n        throw new TypeError('Array.from requires an array-like object - not null or undefined');\\n      }\\n\\n      // 4. If mapfn is undefined, then let mapping be false.\\n      var mapFn = arguments.length > 1 ? arguments[1] : void undefined;\\n      var T = void 0;\\n\\n      if (typeof mapFn !== 'undefined') {\\n        // 5. else\\n        // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.\\n        if (!isCallable(mapFn)) {\\n          throw new TypeError('Array.from: when provided, the second argument must be a function');\\n        }\\n\\n        // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.\\n        if (arguments.length > 2) {\\n          T = arguments[2];\\n        }\\n      }\\n\\n      // 10. Let lenValue be Get(items, \\\"length\\\").\\n      // 11. Let len be ToLength(lenValue).\\n      var len = toLength(items.length);\\n\\n      // 13. If IsConstructor(C) is true, then\\n      // 13. a. Let A be the result of calling the [[Construct]] internal method\\n      // of C with an argument list containing the single item len.\\n      // 14. a. Else, Let A be ArrayCreate(len).\\n      var A = isCallable(C) ? Object(new C(len)) : new Array(len);\\n\\n      // 16. Let k be 0.\\n      var k = 0;\\n      // 17. Repeat, while k < len… (also steps a - h)\\n      var kValue = void 0;\\n      while (k < len) {\\n        kValue = items[k];\\n        if (mapFn) {\\n          A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);\\n        } else {\\n          A[k] = kValue;\\n        }\\n        k += 1;\\n      }\\n      // 18. Let putStatus be Put(A, \\\"length\\\", len, true).\\n      A.length = len;\\n      // 20. Return A.\\n      return A;\\n    };\\n  }();\\n}\\n\\n// https://tc39.github.io/ecma262/#sec-array.prototype.find\\n// Needed for IE support\\nif (!Array.prototype.find) {\\n  // eslint-disable-next-line no-extend-native\\n  Object.defineProperty(Array.prototype, 'find', {\\n    value: function value(predicate) {\\n      // 1. Let O be ? ToObject(this value).\\n      if (this == null) {\\n        throw new TypeError('\\\"this\\\" is null or not defined');\\n      }\\n\\n      var o = Object(this);\\n\\n      // 2. Let len be ? ToLength(? Get(O, \\\"length\\\")).\\n      var len = o.length >>> 0;\\n\\n      // 3. If IsCallable(predicate) is false, throw a TypeError exception.\\n      if (typeof predicate !== 'function') {\\n        throw new TypeError('predicate must be a function');\\n      }\\n\\n      // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\\n      var thisArg = arguments[1];\\n\\n      // 5. Let k be 0.\\n      var k = 0;\\n\\n      // 6. Repeat, while k < len\\n      while (k < len) {\\n        // a. Let Pk be ! ToString(k).\\n        // b. Let kValue be ? Get(O, Pk).\\n        // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\\n        // d. If testResult is true, return kValue.\\n        var kValue = o[k];\\n        if (predicate.call(thisArg, kValue, k, o)) {\\n          return kValue;\\n        }\\n        // e. Increase k by 1.\\n        k++;\\n      }\\n\\n      // 7. Return undefined.\\n      return undefined;\\n    }\\n  });\\n}\\n\\nif (!Array.isArray) {\\n  Array.isArray = function (arg) {\\n    return Object.prototype.toString.call(arg) === '[object Array]';\\n  };\\n}\\n\\n// Static\\nvar from = Array.from;\\nvar isArray = Array.isArray;\\n\\n// Instance\\nvar arrayIncludes = function arrayIncludes(array, value) {\\n  return array.indexOf(value) !== -1;\\n};\\nvar arrayFind = function arrayFind(array, fn, thisArg) {\\n  return array.find(fn, thisArg);\\n};\\nfunction concat() {\\n  return Array.prototype.concat.apply([], arguments);\\n}\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/utils/identity.js\\nfunction identity(x) {\\n  return x;\\n}\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/utils/pluck-props.js\\n\\n\\n\\n\\n/**\\n * Given an array of properties or an object of property keys,\\n * plucks all the values off the target object.\\n * @param {{}|string[]} keysToPluck\\n * @param {{}} objToPluck\\n * @param {Function} transformFn\\n * @return {{}}\\n */\\nfunction pluckProps(keysToPluck, objToPluck) {\\n  var transformFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : identity;\\n\\n  return (isArray(keysToPluck) ? keysToPluck.slice() : keys(keysToPluck)).reduce(function (memo, prop) {\\n    // eslint-disable-next-line no-sequences\\n    return memo[transformFn(prop)] = objToPluck[prop], memo;\\n  }, {});\\n}\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/link/link.js\\nvar _typeof = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\n\\n\\n\\n\\n/**\\n * The Link component is used in many other BV components.\\n * As such, sharing its props makes supporting all its features easier.\\n * However, some components need to modify the defaults for their own purpose.\\n * Prefer sharing a fresh copy of the props to ensure mutations\\n * do not affect other component references to the props.\\n *\\n * https://github.com/vuejs/vue-router/blob/dev/src/components/link.js\\n * @return {{}}\\n */\\nfunction propsFactory() {\\n  return {\\n    href: {\\n      type: String,\\n      default: null\\n    },\\n    rel: {\\n      type: String,\\n      default: null\\n    },\\n    target: {\\n      type: String,\\n      default: '_self'\\n    },\\n    active: {\\n      type: Boolean,\\n      default: false\\n    },\\n    activeClass: {\\n      type: String,\\n      default: 'active'\\n    },\\n    append: {\\n      type: Boolean,\\n      default: false\\n    },\\n    disabled: {\\n      type: Boolean,\\n      default: false\\n    },\\n    event: {\\n      type: [String, Array],\\n      default: 'click'\\n    },\\n    exact: {\\n      type: Boolean,\\n      default: false\\n    },\\n    exactActiveClass: {\\n      type: String,\\n      default: 'active'\\n    },\\n    replace: {\\n      type: Boolean,\\n      default: false\\n    },\\n    routerTag: {\\n      type: String,\\n      default: 'a'\\n    },\\n    to: {\\n      type: [String, Object],\\n      default: null\\n    }\\n  };\\n}\\n\\nvar link_props = propsFactory();\\n\\nfunction pickLinkProps(propsToPick) {\\n  var freshLinkProps = propsFactory();\\n  // Normalize everything to array.\\n  propsToPick = concat(propsToPick);\\n\\n  return keys(freshLinkProps).reduce(function (memo, prop) {\\n    if (arrayIncludes(propsToPick, prop)) {\\n      memo[prop] = freshLinkProps[prop];\\n    }\\n\\n    return memo;\\n  }, {});\\n}\\n\\nfunction omitLinkProps(propsToOmit) {\\n  var freshLinkProps = propsFactory();\\n  // Normalize everything to array.\\n  propsToOmit = concat(propsToOmit);\\n\\n  return keys(link_props).reduce(function (memo, prop) {\\n    if (!arrayIncludes(propsToOmit, prop)) {\\n      memo[prop] = freshLinkProps[prop];\\n    }\\n\\n    return memo;\\n  }, {});\\n}\\n\\nvar computed = {\\n  linkProps: function linkProps() {\\n    var linkProps = {};\\n    var propKeys = keys(link_props);\\n\\n    for (var i = 0; i < propKeys.length; i++) {\\n      var prop = propKeys[i];\\n      // Computed Vue getters are bound to the instance.\\n      linkProps[prop] = this[prop];\\n    }\\n\\n    return linkProps;\\n  }\\n};\\n\\nfunction computeTag(props, parent) {\\n  return Boolean(parent.$router) && props.to && !props.disabled ? 'router-link' : 'a';\\n}\\n\\nfunction computeHref(_ref, tag) {\\n  var disabled = _ref.disabled,\\n      href = _ref.href,\\n      to = _ref.to;\\n\\n  // We've already checked the parent.$router in computeTag,\\n  // so router-link means live router.\\n  // When deferring to Vue Router's router-link,\\n  // don't use the href attr at all.\\n  // Must return undefined for router-link to populate href.\\n  if (tag === 'router-link') return void 0;\\n  // If href explicitly provided\\n  if (href) return href;\\n  // Reconstruct href when `to` used, but no router\\n  if (to) {\\n    // Fallback to `to` prop (if `to` is a string)\\n    if (typeof to === 'string') return to;\\n    // Fallback to `to.path` prop (if `to` is an object)\\n    if ((typeof to === 'undefined' ? 'undefined' : _typeof(to)) === 'object' && typeof to.path === 'string') return to.path;\\n  }\\n  // If nothing is provided use '#'\\n  return '#';\\n}\\n\\nfunction computeRel(_ref2) {\\n  var target = _ref2.target,\\n      rel = _ref2.rel;\\n\\n  if (target === '_blank' && rel === null) {\\n    return 'noopener';\\n  }\\n  return rel || null;\\n}\\n\\nfunction clickHandlerFactory(_ref3) {\\n  var disabled = _ref3.disabled,\\n      tag = _ref3.tag,\\n      href = _ref3.href,\\n      suppliedHandler = _ref3.suppliedHandler,\\n      parent = _ref3.parent;\\n\\n  var isRouterLink = tag === 'router-link';\\n\\n  return function onClick(e) {\\n    if (disabled && e instanceof Event) {\\n      // Stop event from bubbling up.\\n      e.stopPropagation();\\n      // Kill the event loop attached to this specific EventTarget.\\n      e.stopImmediatePropagation();\\n    } else {\\n      parent.$root.$emit('clicked::link', e);\\n\\n      if (isRouterLink && e.target.__vue__) {\\n        e.target.__vue__.$emit('click', e);\\n      }\\n      if (typeof suppliedHandler === 'function') {\\n        suppliedHandler.apply(undefined, arguments);\\n      }\\n    }\\n\\n    if (!isRouterLink && href === '#' || disabled) {\\n      // Stop scroll-to-top behavior or navigation.\\n      e.preventDefault();\\n    }\\n  };\\n}\\n\\n/* harmony default export */ var link_link = ({\\n  functional: true,\\n  props: propsFactory(),\\n  render: function render(h, _ref4) {\\n    var props = _ref4.props,\\n        data = _ref4.data,\\n        parent = _ref4.parent,\\n        children = _ref4.children;\\n\\n    var tag = computeTag(props, parent);\\n    var rel = computeRel(props);\\n    var href = computeHref(props, tag);\\n    var eventType = tag === 'router-link' ? 'nativeOn' : 'on';\\n    var suppliedHandler = (data[eventType] || {}).click;\\n    var handlers = { click: clickHandlerFactory({ tag: tag, href: href, disabled: props.disabled, suppliedHandler: suppliedHandler, parent: parent }) };\\n\\n    var componentData = mergeData(data, {\\n      class: [props.active ? props.exact ? props.exactActiveClass : props.activeClass : null, { disabled: props.disabled }],\\n      attrs: {\\n        rel: rel,\\n        href: href,\\n        target: props.target,\\n        tabindex: props.disabled ? '-1' : data.attrs ? data.attrs.tabindex : null,\\n        'aria-disabled': tag === 'a' && props.disabled ? 'true' : null\\n      },\\n      props: object_assign(props, { tag: props.routerTag })\\n    });\\n\\n    // If href prop exists on router-link (even undefined or null) it fails working on SSR\\n    if (!componentData.attrs.href) {\\n      delete componentData.attrs.href;\\n    }\\n\\n    // We want to overwrite any click handler since our callback\\n    // will invoke the supplied handler if !props.disabled\\n    componentData[eventType] = object_assign(componentData[eventType] || {}, handlers);\\n\\n    return h(tag, componentData, children);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/badge/badge.js\\n\\n\\n\\n\\n\\n\\nvar badge_linkProps = propsFactory();\\ndelete badge_linkProps.href.default;\\ndelete badge_linkProps.to.default;\\n\\nvar badge_props = object_assign(badge_linkProps, {\\n  tag: {\\n    type: String,\\n    default: 'span'\\n  },\\n  variant: {\\n    type: String,\\n    default: 'secondary'\\n  },\\n  pill: {\\n    type: Boolean,\\n    default: false\\n  }\\n});\\n\\n/* harmony default export */ var badge = ({\\n  functional: true,\\n  props: badge_props,\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data,\\n        children = _ref.children;\\n\\n    var tag = !props.href && !props.to ? props.tag : link_link;\\n\\n    var componentData = {\\n      staticClass: 'badge',\\n      class: [!props.variant ? 'badge-secondary' : 'badge-' + props.variant, {\\n        'badge-pill': Boolean(props.pill),\\n        active: props.active,\\n        disabled: props.disabled\\n      }],\\n      props: pluckProps(badge_linkProps, props)\\n    };\\n\\n    return h(tag, mergeData(data, componentData), children);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/badge/index.js\\n\\n\\n\\nvar badge_components = {\\n  bBadge: badge\\n};\\n\\nvar badge_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, badge_components);\\n  }\\n};\\n\\nvueUse(badge_VuePlugin);\\n\\n/* harmony default export */ var components_badge = (badge_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/breadcrumb/breadcrumb-link.js\\n\\n\\n\\n\\n\\nvar breadcrumb_link_props = object_assign(propsFactory(), {\\n  text: {\\n    type: String,\\n    default: null\\n  },\\n  active: {\\n    type: Boolean,\\n    default: false\\n  },\\n  href: {\\n    type: String,\\n    default: '#'\\n  },\\n  ariaCurrent: {\\n    type: String,\\n    default: 'location'\\n  }\\n});\\n\\n/* harmony default export */ var breadcrumb_link = ({\\n  functional: true,\\n  props: breadcrumb_link_props,\\n  render: function render(h, _ref) {\\n    var suppliedProps = _ref.props,\\n        data = _ref.data,\\n        children = _ref.children;\\n\\n    var tag = suppliedProps.active ? 'span' : link_link;\\n\\n    var componentData = { props: pluckProps(breadcrumb_link_props, suppliedProps) };\\n    if (suppliedProps.active) {\\n      componentData.attrs = { 'aria-current': suppliedProps.ariaCurrent };\\n    } else {\\n      componentData.attrs = { href: suppliedProps.href };\\n    }\\n\\n    return h(tag, mergeData(data, componentData), children || suppliedProps.text);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/breadcrumb/breadcrumb-item.js\\n\\n\\n\\n\\nvar breadcrumb_item_props = object_assign({}, breadcrumb_link_props, {\\n  text: {\\n    type: String,\\n    default: null\\n  },\\n  href: {\\n    type: String,\\n    default: null\\n  }\\n});\\n\\n/* harmony default export */ var breadcrumb_item = ({\\n  functional: true,\\n  props: breadcrumb_item_props,\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data,\\n        children = _ref.children;\\n\\n    return h('li', mergeData(data, {\\n      staticClass: 'breadcrumb-item',\\n      class: { active: props.active },\\n      attrs: { role: 'presentation' }\\n    }), [h(breadcrumb_link, { props: props }, children)]);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/breadcrumb/breadcrumb.js\\nvar breadcrumb_typeof = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\n\\n\\n\\n\\n\\nvar breadcrumb_props = {\\n  items: {\\n    type: Array,\\n    default: null\\n  }\\n};\\n\\n/* harmony default export */ var breadcrumb = ({\\n  functional: true,\\n  props: breadcrumb_props,\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data,\\n        children = _ref.children;\\n\\n    var childNodes = children;\\n    // Build child nodes from items if given.\\n    if (isArray(props.items)) {\\n      var activeDefined = false;\\n      childNodes = props.items.map(function (item, idx) {\\n        if ((typeof item === 'undefined' ? 'undefined' : breadcrumb_typeof(item)) !== 'object') {\\n          item = { text: item };\\n        }\\n        // Copy the value here so we can normalize it.\\n        var active = item.active;\\n        if (active) {\\n          activeDefined = true;\\n        }\\n        if (!active && !activeDefined) {\\n          // Auto-detect active by position in list.\\n          active = idx + 1 === props.items.length;\\n        }\\n\\n        return h(breadcrumb_item, { props: object_assign({}, item, { active: active }) });\\n      });\\n    }\\n\\n    return h('ol', mergeData(data, { staticClass: 'breadcrumb' }), childNodes);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/breadcrumb/index.js\\n\\n\\n\\n\\n\\nvar breadcrumb_components = {\\n  bBreadcrumb: breadcrumb,\\n  bBreadcrumbItem: breadcrumb_item,\\n  bBreadcrumbLink: breadcrumb_link\\n};\\n\\nvar breadcrumb_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, breadcrumb_components);\\n  }\\n};\\n\\nvueUse(breadcrumb_VuePlugin);\\n\\n/* harmony default export */ var components_breadcrumb = (breadcrumb_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/utils/dom.js\\n\\n\\n// Determine if an element is an HTML Element\\nvar isElement = function isElement(el) {\\n  return el && el.nodeType === Node.ELEMENT_NODE;\\n};\\n\\n// Determine if an HTML element is visible - Faster than CSS check\\nvar isVisible = function isVisible(el) {\\n  return isElement(el) && document.body.contains(el) && el.getBoundingClientRect().height > 0 && el.getBoundingClientRect().width > 0;\\n};\\n\\n// Determine if an element is disabled\\nvar isDisabled = function isDisabled(el) {\\n  return !isElement(el) || el.disabled || el.classList.contains('disabled') || Boolean(el.getAttribute('disabled'));\\n};\\n\\n// Cause/wait-for an element to reflow it's content (adjusting it's height/width)\\nvar reflow = function reflow(el) {\\n  // requsting an elements offsetHight will trigger a reflow of the element content\\n  return isElement(el) && el.offsetHeight;\\n};\\n\\n// Select all elements matching selector. Returns [] if none found\\nvar dom_selectAll = function selectAll(selector, root) {\\n  if (!isElement(root)) {\\n    root = document;\\n  }\\n  return from(root.querySelectorAll(selector));\\n};\\n\\n// Select a single element, returns null if not found\\nvar dom_select = function select(selector, root) {\\n  if (!isElement(root)) {\\n    root = document;\\n  }\\n  return root.querySelector(selector) || null;\\n};\\n\\n// Determine if an element matches a selector\\nvar matches = function matches(el, selector) {\\n  if (!isElement(el)) {\\n    return false;\\n  }\\n\\n  // https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill\\n  // Prefer native implementations over polyfill function\\n  var proto = Element.prototype;\\n  var Matches = proto.matches || proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector || proto.webkitMatchesSelector ||\\n  /* istanbul ignore next */\\n  function (sel) {\\n    var element = this;\\n    var m = dom_selectAll(sel, element.document || element.ownerDocument);\\n    var i = m.length;\\n    // eslint-disable-next-line no-empty\\n    while (--i >= 0 && m.item(i) !== element) {}\\n    return i > -1;\\n  };\\n\\n  return Matches.call(el, selector);\\n};\\n\\n// Finds closest element matching selector. Returns null if not found\\nvar closest = function closest(selector, root) {\\n  if (!isElement(root)) {\\n    return null;\\n  }\\n\\n  // https://developer.mozilla.org/en-US/docs/Web/API/Element/closest\\n  // Since we dont support IE < 10, we can use the \\\"Matches\\\" version of the polyfill for speed\\n  // Prefer native implementation over polyfill function\\n  var Closest = Element.prototype.closest ||\\n  /* istanbul ignore next */\\n  function (sel) {\\n    var element = this;\\n    if (!document.documentElement.contains(element)) {\\n      return null;\\n    }\\n    do {\\n      // Use our \\\"patched\\\" matches function\\n      if (matches(element, sel)) {\\n        return element;\\n      }\\n      element = element.parentElement;\\n    } while (element !== null);\\n    return null;\\n  };\\n\\n  var el = Closest.call(root, selector);\\n  // Emulate jQuery closest and return null if match is the passed in element (root)\\n  return el === root ? null : el;\\n};\\n\\n// Get an element given an ID\\nvar getById = function getById(id) {\\n  return document.getElementById(/^#/.test(id) ? id.slice(1) : id) || null;\\n};\\n\\n// Add a class to an element\\nvar addClass = function addClass(el, className) {\\n  if (className && isElement(el)) {\\n    el.classList.add(className);\\n  }\\n};\\n\\n// Remove a class from an element\\nvar removeClass = function removeClass(el, className) {\\n  if (className && isElement(el)) {\\n    el.classList.remove(className);\\n  }\\n};\\n\\n// Test if an element has a class\\nvar hasClass = function hasClass(el, className) {\\n  if (className && isElement(el)) {\\n    return el.classList.contains(className);\\n  }\\n  return false;\\n};\\n\\n// Set an attribute on an element\\nvar setAttr = function setAttr(el, attr, value) {\\n  if (attr && isElement(el)) {\\n    el.setAttribute(attr, value);\\n  }\\n};\\n\\n// Remove an attribute from an element\\nvar removeAttr = function removeAttr(el, attr) {\\n  if (attr && isElement(el)) {\\n    el.removeAttribute(attr);\\n  }\\n};\\n\\n// Get an attribute value from an element (returns null if not found)\\nvar getAttr = function getAttr(el, attr) {\\n  if (attr && isElement(el)) {\\n    return el.getAttribute(attr);\\n  }\\n  return null;\\n};\\n\\n// Determine if an attribute exists on an element (returns true or false, or null if element not found)\\nvar hasAttr = function hasAttr(el, attr) {\\n  if (attr && isElement(el)) {\\n    return el.hasAttribute(attr);\\n  }\\n  return null;\\n};\\n\\n// Return the Bounding Client Rec of an element. Retruns null if not an element\\nvar getBCR = function getBCR(el) {\\n  return isElement(el) ? el.getBoundingClientRect() : null;\\n};\\n\\n// Get computed style object for an element\\nvar getCS = function getCS(el) {\\n  return isElement(el) ? window.getComputedStyle(el) : {};\\n};\\n\\n// Return an element's offset wrt document element\\n// https://j11y.io/jquery/#v=git&fn=jQuery.fn.offset\\nvar dom_offset = function offset(el) {\\n  if (isElement(el)) {\\n    if (!el.getClientRects().length) {\\n      return { top: 0, left: 0 };\\n    }\\n    var bcr = getBCR(el);\\n    var win = el.ownerDocument.defaultView;\\n    return {\\n      top: bcr.top + win.pageYOffset,\\n      left: bcr.left + win.pageXOffset\\n    };\\n  }\\n};\\n\\n// Return an element's offset wrt to it's offsetParent\\n// https://j11y.io/jquery/#v=git&fn=jQuery.fn.position\\nvar position = function position(el) {\\n  if (!isElement(el)) {\\n    return;\\n  }\\n  var parentOffset = { top: 0, left: 0 };\\n  var offsetSelf = void 0;\\n  var offsetParent = void 0;\\n  if (getCS(el).position === 'fixed') {\\n    offsetSelf = getBCR(el);\\n  } else {\\n    offsetSelf = dom_offset(el);\\n    var doc = el.ownerDocument;\\n    offsetParent = el.offsetParent || doc.documentElement;\\n    while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && getCS(offsetParent).position === 'static') {\\n      offsetParent = offsetParent.parentNode;\\n    }\\n    if (offsetParent && offsetParent !== el && offsetParent.nodeType === Node.ELEMENT_NODE) {\\n      parentOffset = dom_offset(offsetParent);\\n      parentOffset.top += parseFloat(getCS(offsetParent).borderTopWidth);\\n      parentOffset.left += parseFloat(getCS(offsetParent).borderLeftWidth);\\n    }\\n  }\\n  return {\\n    top: offsetSelf.top - parentOffset.top - parseFloat(getCS(el).marginTop),\\n    left: offsetSelf.left - parentOffset.left - parseFloat(getCS(el).marginLeft)\\n  };\\n};\\n\\n// Attach an event listener to an element\\nvar eventOn = function eventOn(el, evtName, handler) {\\n  if (el && el.addEventListener) {\\n    el.addEventListener(evtName, handler);\\n  }\\n};\\n\\n// Remove an event listener from an element\\nvar eventOff = function eventOff(el, evtName, handler) {\\n  if (el && el.removeEventListener) {\\n    el.removeEventListener(evtName, handler);\\n  }\\n};\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/button/button.js\\nfunction button_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\n\\n\\n\\n\\n\\n\\nvar btnProps = {\\n  block: {\\n    type: Boolean,\\n    default: false\\n  },\\n  disabled: {\\n    type: Boolean,\\n    default: false\\n  },\\n  size: {\\n    type: String,\\n    default: null\\n  },\\n  variant: {\\n    type: String,\\n    default: null\\n  },\\n  type: {\\n    type: String,\\n    default: 'button'\\n  },\\n  pressed: {\\n    // tri-state prop: true, false or null\\n    // => on, off, not a toggle\\n    type: Boolean,\\n    default: null\\n  }\\n};\\n\\nvar button_linkProps = propsFactory();\\ndelete button_linkProps.href.default;\\ndelete button_linkProps.to.default;\\nvar linkPropKeys = keys(button_linkProps);\\n\\nvar button_props = object_assign(button_linkProps, btnProps);\\n\\nfunction handleFocus(evt) {\\n  if (evt.type === 'focusin') {\\n    addClass(evt.target, 'focus');\\n  } else if (evt.type === 'focusout') {\\n    removeClass(evt.target, 'focus');\\n  }\\n}\\n\\n/* harmony default export */ var button_button = ({\\n  functional: true,\\n  props: button_props,\\n  render: function render(h, _ref) {\\n    var _ref2;\\n\\n    var props = _ref.props,\\n        data = _ref.data,\\n        listeners = _ref.listeners,\\n        children = _ref.children;\\n\\n    var isLink = Boolean(props.href || props.to);\\n    var isToggle = typeof props.pressed === 'boolean';\\n    var on = {\\n      click: function click(e) {\\n        if (props.disabled && e instanceof Event) {\\n          e.stopPropagation();\\n          e.preventDefault();\\n        } else if (isToggle) {\\n          // Concat will normalize the value to an array\\n          // without double wrapping an array value in an array.\\n          concat(listeners['update:pressed']).forEach(function (fn) {\\n            if (typeof fn === 'function') {\\n              fn(!props.pressed);\\n            }\\n          });\\n        }\\n      }\\n    };\\n\\n    if (isToggle) {\\n      on.focusin = handleFocus;\\n      on.focusout = handleFocus;\\n    }\\n\\n    var componentData = {\\n      staticClass: 'btn',\\n      class: [props.variant ? 'btn-' + props.variant : 'btn-secondary', (_ref2 = {}, button_defineProperty(_ref2, 'btn-' + props.size, Boolean(props.size)), button_defineProperty(_ref2, 'btn-block', props.block), button_defineProperty(_ref2, 'disabled', props.disabled), button_defineProperty(_ref2, 'active', props.pressed), _ref2)],\\n      props: isLink ? pluckProps(linkPropKeys, props) : null,\\n      attrs: {\\n        type: isLink ? null : props.type,\\n        disabled: isLink ? null : props.disabled,\\n        // Data attribute not used for js logic,\\n        // but only for BS4 style selectors.\\n        'data-toggle': isToggle ? 'button' : null,\\n        'aria-pressed': isToggle ? String(props.pressed) : null,\\n        // Tab index is used when the component becomes a link.\\n        // Links are tabable, but don't allow disabled,\\n        // so we mimic that functionality by disabling tabbing.\\n        tabindex: props.disabled && isLink ? '-1' : data.attrs ? data.attrs['tabindex'] : null\\n      },\\n      on: on\\n    };\\n\\n    return h(isLink ? link_link : 'button', mergeData(data, componentData), children);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/button/index.js\\n\\n\\n\\n\\nvar button_components = {\\n  bButton: button_button,\\n  bBtn: button_button,\\n  bButtonClose: button_close,\\n  bBtnClose: button_close\\n};\\n\\nvar button_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, button_components);\\n  }\\n};\\n\\nvueUse(button_VuePlugin);\\n\\n/* harmony default export */ var components_button = (button_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/button-group/button-group.js\\nfunction button_group_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\n\\n\\nvar button_group_props = {\\n  vertical: {\\n    type: Boolean,\\n    default: false\\n  },\\n  size: {\\n    type: String,\\n    default: null,\\n    validator: function validator(size) {\\n      return arrayIncludes(['sm', '', 'lg'], size);\\n    }\\n  },\\n  tag: {\\n    type: String,\\n    default: 'div'\\n  },\\n  ariaRole: {\\n    type: String,\\n    default: 'group'\\n  }\\n};\\n\\n/* harmony default export */ var button_group = ({\\n  functional: true,\\n  props: button_group_props,\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data,\\n        children = _ref.children;\\n\\n    return h(props.tag, mergeData(data, {\\n      class: button_group_defineProperty({\\n        'btn-group': !props.vertical,\\n        'btn-group-vertical': props.vertical\\n      }, 'btn-group-' + props.size, Boolean(props.size)),\\n      attrs: { 'role': props.ariaRole }\\n    }), children);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/button-group/index.js\\n\\n\\n\\nvar button_group_components = {\\n  bButtonGroup: button_group,\\n  bBtnGroup: button_group\\n};\\n\\nvar button_group_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, button_group_components);\\n  }\\n};\\n\\nvueUse(button_group_VuePlugin);\\n\\n/* harmony default export */ var components_button_group = (button_group_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/utils/key-codes.js\\n/*\\n * Key Codes (events)\\n */\\n\\n/* harmony default export */ var key_codes = ({\\n  SPACE: 32,\\n  ENTER: 13,\\n  ESC: 27,\\n  LEFT: 37,\\n  UP: 38,\\n  RIGHT: 39,\\n  DOWN: 40,\\n  PAGEUP: 33,\\n  PAGEDOWN: 34,\\n  HOME: 36,\\n  END: 35\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/button-toolbar/button-toolbar.js\\n\\n\\n\\nvar ITEM_SELECTOR = ['.btn:not(.disabled):not([disabled]):not(.dropdown-item)', '.form-control:not(.disabled):not([disabled])', 'select:not(.disabled):not([disabled])', 'input[type=\\\"checkbox\\\"]:not(.disabled)', 'input[type=\\\"radio\\\"]:not(.disabled)'].join(',');\\n\\n/* harmony default export */ var button_toolbar = ({\\n  render: function render(h) {\\n    return h('div', {\\n      class: this.classObject,\\n      attrs: {\\n        role: 'toolbar',\\n        tabindex: this.keyNav ? '0' : null\\n      },\\n      on: {\\n        focusin: this.onFocusin,\\n        keydown: this.onKeydown\\n      }\\n    }, [this.$slots.default]);\\n  },\\n\\n  computed: {\\n    classObject: function classObject() {\\n      return ['btn-toolbar', this.justify && !this.vertical ? 'justify-content-between' : ''];\\n    }\\n  },\\n  props: {\\n    justify: {\\n      type: Boolean,\\n      default: false\\n    },\\n    keyNav: {\\n      type: Boolean,\\n      default: false\\n    }\\n  },\\n  methods: {\\n    onFocusin: function onFocusin(evt) {\\n      if (evt.target === this.$el) {\\n        evt.preventDefault();\\n        evt.stopPropagation();\\n        this.focusFirst(evt);\\n      }\\n    },\\n    onKeydown: function onKeydown(evt) {\\n      if (!this.keyNav) {\\n        return;\\n      }\\n      var key = evt.keyCode;\\n      var shift = evt.shiftKey;\\n      if (key === key_codes.UP || key === key_codes.LEFT) {\\n        evt.preventDefault();\\n        evt.stopPropagation();\\n        if (shift) {\\n          this.focusFirst(evt);\\n        } else {\\n          this.focusNext(evt, true);\\n        }\\n      } else if (key === key_codes.DOWN || key === key_codes.RIGHT) {\\n        evt.preventDefault();\\n        evt.stopPropagation();\\n        if (shift) {\\n          this.focusLast(evt);\\n        } else {\\n          this.focusNext(evt, false);\\n        }\\n      }\\n    },\\n    setItemFocus: function setItemFocus(item) {\\n      this.$nextTick(function () {\\n        item.focus();\\n      });\\n    },\\n    focusNext: function focusNext(evt, prev) {\\n      var items = this.getItems();\\n      if (items.length < 1) {\\n        return;\\n      }\\n      var index = items.indexOf(evt.target);\\n      if (prev && index > 0) {\\n        index--;\\n      } else if (!prev && index < items.length - 1) {\\n        index++;\\n      }\\n      if (index < 0) {\\n        index = 0;\\n      }\\n      this.setItemFocus(items[index]);\\n    },\\n    focusFirst: function focusFirst(evt) {\\n      var items = this.getItems();\\n      if (items.length > 0) {\\n        this.setItemFocus(items[0]);\\n      }\\n    },\\n    focusLast: function focusLast(evt) {\\n      var items = this.getItems();\\n      if (items.length > 0) {\\n        this.setItemFocus([items.length - 1]);\\n      }\\n    },\\n    getItems: function getItems() {\\n      var items = dom_selectAll(ITEM_SELECTOR, this.$el);\\n      items.forEach(function (item) {\\n        // Ensure tabfocus is -1 on any new elements\\n        item.tabIndex = -1;\\n      });\\n      return items.filter(function (el) {\\n        return isVisible(el);\\n      });\\n    }\\n  },\\n  mounted: function mounted() {\\n    if (this.keyNav) {\\n      // Pre-set the tabindexes if the markup does not include tabindex=\\\"-1\\\" on the toolbar items\\n      this.getItems();\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/button-toolbar/index.js\\n\\n\\n\\nvar button_toolbar_components = {\\n  bButtonToolbar: button_toolbar,\\n  bBtnToolbar: button_toolbar\\n};\\n\\nvar button_toolbar_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, button_toolbar_components);\\n  }\\n};\\n\\nvueUse(button_toolbar_VuePlugin);\\n\\n/* harmony default export */ var components_button_toolbar = (button_toolbar_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/input-group/input-group-text.js\\n\\n\\nvar input_group_text_props = {\\n  tag: {\\n    type: String,\\n    default: 'div'\\n  }\\n};\\n\\n/* harmony default export */ var input_group_text = ({\\n  props: input_group_text_props,\\n  functional: true,\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data,\\n        children = _ref.children;\\n\\n    return h(props.tag, mergeData(data, {\\n      staticClass: 'input-group-text'\\n    }), children);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/input-group/input-group-addon.js\\n\\n\\n\\nvar input_group_addon_propsFactory = function propsFactory(append) {\\n  return {\\n    id: {\\n      type: String,\\n      default: null\\n    },\\n    tag: {\\n      type: String,\\n      default: 'div'\\n    },\\n    append: {\\n      type: Boolean,\\n      default: append\\n    },\\n    isText: {\\n      type: Boolean,\\n      default: false\\n    }\\n  };\\n};\\n\\n/* harmony default export */ var input_group_addon = ({\\n  functional: true,\\n  props: input_group_addon_propsFactory(false),\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data,\\n        children = _ref.children;\\n\\n    return h(props.tag, mergeData(data, {\\n      staticClass: 'input-group-' + (props.append ? 'append' : 'prepend'),\\n      attrs: {\\n        id: props.id\\n      }\\n    }), props.isText ? [h(input_group_text, children)] : children);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/input-group/input-group-prepend.js\\n\\n\\n/* harmony default export */ var input_group_prepend = ({\\n  functional: true,\\n  props: input_group_addon_propsFactory(false),\\n  render: input_group_addon.render\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/input-group/input-group-append.js\\n\\n\\n/* harmony default export */ var input_group_append = ({\\n  functional: true,\\n  props: input_group_addon_propsFactory(true),\\n  render: input_group_addon.render\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/input-group/input-group.js\\nfunction input_group_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\n\\n\\n\\n\\nvar input_group_props = {\\n  id: {\\n    type: String,\\n    default: null\\n  },\\n  size: {\\n    type: String,\\n    default: null\\n  },\\n  prepend: {\\n    type: String,\\n    default: null\\n  },\\n  append: {\\n    type: String,\\n    default: null\\n  },\\n  tag: {\\n    type: String,\\n    default: 'div'\\n  }\\n};\\n\\n/* harmony default export */ var input_group = ({\\n  functional: true,\\n  props: input_group_props,\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data,\\n        slots = _ref.slots;\\n\\n    var $slots = slots();\\n\\n    var childNodes = [];\\n\\n    // Prepend prop\\n    if (props.prepend) {\\n      childNodes.push(h(input_group_prepend, [h(input_group_text, { domProps: { innerHTML: props.prepend } })]));\\n    }\\n\\n    // Prepend slot\\n    if ($slots.prepend) {\\n      childNodes.push(h(input_group_prepend, $slots.prepend));\\n    }\\n\\n    // Default slot\\n    childNodes.push($slots.default);\\n\\n    // Append prop\\n    if (props.append) {\\n      childNodes.push(h(input_group_append, [h(input_group_text, { domProps: { innerHTML: props.append } })]));\\n    }\\n\\n    // Append slot\\n    if ($slots.append) {\\n      childNodes.push(h(input_group_append, $slots.append));\\n    }\\n\\n    return h(props.tag, mergeData(data, {\\n      staticClass: 'input-group',\\n      class: input_group_defineProperty({}, 'input-group-' + props.size, Boolean(props.size)),\\n      attrs: {\\n        id: props.id || null,\\n        role: 'group'\\n      }\\n    }), childNodes);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/input-group/index.js\\n\\n\\n\\n\\n\\n\\n\\n\\nvar input_group_components = {\\n  bInputGroup: input_group,\\n  bInputGroupAddon: input_group_addon,\\n  bInputGroupPrepend: input_group_prepend,\\n  bInputGroupAppend: input_group_append,\\n  bInputGroupText: input_group_text\\n};\\n\\nvar input_group_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, input_group_components);\\n  }\\n};\\n\\nvueUse(input_group_VuePlugin);\\n\\n/* harmony default export */ var components_input_group = (input_group_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/utils/upper-first.js\\n/**\\n * @param {string} str\\n */\\nfunction upperFirst(str) {\\n  if (typeof str !== 'string') {\\n    str = String(str);\\n  }\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n}\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/utils/prefix-prop-name.js\\n\\n\\n/**\\n * @param {string} prefix\\n * @param {string} value\\n */\\nfunction prefixPropName(prefix, value) {\\n  return prefix + upperFirst(value);\\n}\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/utils/lower-first.js\\n/**\\n * @param {string} str\\n */\\nfunction lowerFirst(str) {\\n  if (typeof str !== 'string') {\\n    str = String(str);\\n  }\\n  return str.charAt(0).toLowerCase() + str.slice(1);\\n}\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/utils/unprefix-prop-name.js\\n\\n\\n/**\\n * @param {string} prefix\\n * @param {string} value\\n */\\nfunction unPrefixPropName(prefix, value) {\\n  return lowerFirst(value.replace(prefix, ''));\\n}\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/utils/copyProps.js\\nvar copyProps_typeof = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\n\\n\\n\\n\\n/**\\n * @param {[]|{}} props\\n * @param {Function} transformFn\\n */\\nfunction copyProps(props) {\\n  var transformFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity;\\n\\n  if (isArray(props)) {\\n    return props.map(transformFn);\\n  }\\n  // Props as an object.\\n  var copied = {};\\n\\n  for (var prop in props) {\\n    if (props.hasOwnProperty(prop)) {\\n      if ((typeof prop === 'undefined' ? 'undefined' : copyProps_typeof(prop)) === 'object') {\\n        copied[transformFn(prop)] = object_assign({}, props[prop]);\\n      } else {\\n        copied[transformFn(prop)] = props[prop];\\n      }\\n    }\\n  }\\n\\n  return copied;\\n}\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/mixins/card-mixin.js\\n/* harmony default export */ var card_mixin = ({\\n  props: {\\n    tag: {\\n      type: String,\\n      default: 'div'\\n    },\\n    bgVariant: {\\n      type: String,\\n      default: null\\n    },\\n    borderVariant: {\\n      type: String,\\n      default: null\\n    },\\n    textVariant: {\\n      type: String,\\n      default: null\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/card/card-body.js\\nfunction card_body_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\n\\n\\n\\n\\n\\nvar card_body_props = object_assign({}, copyProps(card_mixin.props, prefixPropName.bind(null, 'body')), {\\n  bodyClass: {\\n    type: [String, Object, Array],\\n    default: null\\n  },\\n  title: {\\n    type: String,\\n    default: null\\n  },\\n  titleTag: {\\n    type: String,\\n    default: 'h4'\\n  },\\n  subTitle: {\\n    type: String,\\n    default: null\\n  },\\n  subTitleTag: {\\n    type: String,\\n    default: 'h6'\\n  },\\n  overlay: {\\n    type: Boolean,\\n    default: false\\n  }\\n});\\n\\n/* harmony default export */ var card_body = ({\\n  functional: true,\\n  props: card_body_props,\\n  render: function render(h, _ref) {\\n    var _ref2;\\n\\n    var props = _ref.props,\\n        data = _ref.data,\\n        slots = _ref.slots;\\n\\n    var cardBodyChildren = [];\\n    if (props.title) {\\n      cardBodyChildren.push(h(props.titleTag, {\\n        staticClass: 'card-title',\\n        domProps: { innerHTML: props.title }\\n      }));\\n    }\\n    if (props.subTitle) {\\n      cardBodyChildren.push(h(props.subTitleTag, {\\n        staticClass: 'card-subtitle mb-2 text-muted',\\n        domProps: { innerHTML: props.subTitle }\\n      }));\\n    }\\n    cardBodyChildren.push(slots().default);\\n\\n    return h(props.bodyTag, mergeData(data, {\\n      staticClass: 'card-body',\\n      class: [(_ref2 = {\\n        'card-img-overlay': props.overlay\\n      }, card_body_defineProperty(_ref2, 'bg-' + props.bodyBgVariant, Boolean(props.bodyBgVariant)), card_body_defineProperty(_ref2, 'border-' + props.bodyBorderVariant, Boolean(props.bodyBorderVariant)), card_body_defineProperty(_ref2, 'text-' + props.bodyTextVariant, Boolean(props.bodyTextVariant)), _ref2), props.bodyClass || {}]\\n    }), cardBodyChildren);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/card/card-header.js\\nfunction card_header_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\n\\n\\n\\n\\n\\n\\nvar card_header_props = object_assign({}, copyProps(card_mixin.props, prefixPropName.bind(null, 'header')), {\\n  header: {\\n    type: String,\\n    default: null\\n  },\\n  headerClass: {\\n    type: [String, Object, Array],\\n    default: null\\n  }\\n});\\n\\n/* harmony default export */ var card_header = ({\\n  functional: true,\\n  props: card_header_props,\\n  render: function render(h, _ref) {\\n    var _ref2;\\n\\n    var props = _ref.props,\\n        data = _ref.data,\\n        slots = _ref.slots,\\n        children = _ref.children;\\n\\n    return h(props.headerTag, mergeData(data, {\\n      staticClass: 'card-header',\\n      class: [props.headerClass, (_ref2 = {}, card_header_defineProperty(_ref2, 'bg-' + props.headerBgVariant, Boolean(props.headerBgVariant)), card_header_defineProperty(_ref2, 'border-' + props.headerBorderVariant, Boolean(props.headerBorderVariant)), card_header_defineProperty(_ref2, 'text-' + props.headerTextVariant, Boolean(props.headerTextVariant)), _ref2)]\\n    }), children || [h('div', { domProps: { innerHTML: props.header } })]);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/card/card-footer.js\\nfunction card_footer_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\n\\n\\n\\n\\n\\n\\nvar card_footer_props = object_assign({}, copyProps(card_mixin.props, prefixPropName.bind(null, 'footer')), {\\n  footer: {\\n    type: String,\\n    default: null\\n  },\\n  footerClass: {\\n    type: [String, Object, Array],\\n    default: null\\n  }\\n});\\n\\n/* harmony default export */ var card_footer = ({\\n  functional: true,\\n  props: card_footer_props,\\n  render: function render(h, _ref) {\\n    var _ref2;\\n\\n    var props = _ref.props,\\n        data = _ref.data,\\n        slots = _ref.slots,\\n        children = _ref.children;\\n\\n    return h(props.footerTag, mergeData(data, {\\n      staticClass: 'card-footer',\\n      class: [props.footerClass, (_ref2 = {}, card_footer_defineProperty(_ref2, 'bg-' + props.footerBgVariant, Boolean(props.footerBgVariant)), card_footer_defineProperty(_ref2, 'border-' + props.footerBorderVariant, Boolean(props.footerBorderVariant)), card_footer_defineProperty(_ref2, 'text-' + props.footerTextVariant, Boolean(props.footerTextVariant)), _ref2)]\\n    }), children || [h('div', { domProps: { innerHTML: props.footer } })]);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/card/card-img.js\\n\\n\\nvar card_img_props = {\\n  src: {\\n    type: String,\\n    default: null,\\n    required: true\\n  },\\n  alt: {\\n    type: String,\\n    default: null\\n  },\\n  top: {\\n    type: Boolean,\\n    default: false\\n  },\\n  bottom: {\\n    type: Boolean,\\n    default: false\\n  },\\n  fluid: {\\n    type: Boolean,\\n    default: false\\n  }\\n};\\n\\n/* harmony default export */ var card_img = ({\\n  functional: true,\\n  props: card_img_props,\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data,\\n        slots = _ref.slots;\\n\\n    var staticClass = 'card-img';\\n    if (props.top) {\\n      staticClass += '-top';\\n    } else if (props.bottom) {\\n      staticClass += '-bottom';\\n    }\\n\\n    return h('img', mergeData(data, {\\n      staticClass: staticClass,\\n      class: { 'img-fluid': props.fluid },\\n      attrs: { src: props.src, alt: props.alt }\\n    }));\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/card/card.js\\nfunction card_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvar cardImgProps = copyProps(card_img_props, prefixPropName.bind(null, 'img'));\\ncardImgProps.imgSrc.required = false;\\n\\nvar card_props = object_assign({}, card_body_props, card_header_props, card_footer_props, cardImgProps, copyProps(card_mixin.props), {\\n  align: {\\n    type: String,\\n    default: null\\n  },\\n  noBody: {\\n    type: Boolean,\\n    default: false\\n  }\\n});\\n\\n/* harmony default export */ var card = ({\\n  functional: true,\\n  props: card_props,\\n  render: function render(h, _ref) {\\n    var _class;\\n\\n    var props = _ref.props,\\n        data = _ref.data,\\n        slots = _ref.slots,\\n        children = _ref.children;\\n\\n    // The order of the conditionals matter.\\n    // We are building the component markup in order.\\n    var childNodes = [];\\n    var $slots = slots();\\n    var img = props.imgSrc ? h(card_img, {\\n      props: pluckProps(cardImgProps, props, unPrefixPropName.bind(null, 'img'))\\n    }) : null;\\n\\n    if (img) {\\n      // Above the header placement.\\n      if (props.imgTop || !props.imgBottom) {\\n        childNodes.push(img);\\n      }\\n    }\\n    if (props.header || $slots.header) {\\n      childNodes.push(h(card_header, { props: pluckProps(card_header_props, props) }, $slots.header));\\n    }\\n    if (props.noBody) {\\n      childNodes.push($slots.default);\\n    } else {\\n      childNodes.push(h(card_body, { props: pluckProps(card_body_props, props) }, $slots.default));\\n    }\\n    if (props.footer || $slots.footer) {\\n      childNodes.push(h(card_footer, { props: pluckProps(card_footer_props, props) }, $slots.footer));\\n    }\\n    if (img && props.imgBottom) {\\n      // Below the footer placement.\\n      childNodes.push(img);\\n    }\\n\\n    return h(props.tag, mergeData(data, {\\n      staticClass: 'card',\\n      class: (_class = {}, card_defineProperty(_class, 'text-' + props.align, Boolean(props.align)), card_defineProperty(_class, 'bg-' + props.bgVariant, Boolean(props.bgVariant)), card_defineProperty(_class, 'border-' + props.borderVariant, Boolean(props.borderVariant)), card_defineProperty(_class, 'text-' + props.textVariant, Boolean(props.textVariant)), _class)\\n    }), childNodes);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/card/card-group.js\\n\\n\\nvar card_group_props = {\\n  tag: {\\n    type: String,\\n    default: 'div'\\n  },\\n  deck: {\\n    type: Boolean,\\n    default: false\\n  },\\n  columns: {\\n    type: Boolean,\\n    default: false\\n  }\\n};\\n\\n/* harmony default export */ var card_group = ({\\n  functional: true,\\n  props: card_group_props,\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data,\\n        children = _ref.children;\\n\\n    var staticClass = 'card-group';\\n    if (props.columns) {\\n      staticClass = 'card-columns';\\n    }\\n    if (props.deck) {\\n      staticClass = 'card-deck';\\n    }\\n\\n    return h(props.tag, mergeData(data, { staticClass: staticClass }), children);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/card/index.js\\n\\n\\n\\n\\n\\n\\n\\n\\nvar card_components = {\\n  bCard: card,\\n  bCardHeader: card_header,\\n  bCardBody: card_body,\\n  bCardFooter: card_footer,\\n  bCardImg: card_img,\\n  bCardGroup: card_group\\n};\\n\\nvar card_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, card_components);\\n  }\\n};\\n\\nvueUse(card_VuePlugin);\\n\\n/* harmony default export */ var components_card = (card_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/utils/observe-dom.js\\n\\n\\n\\n/**\\n * Observe a DOM element changes, falls back to eventListener mode\\n * @param {Element} el The DOM element to observe\\n * @param {Function} callback callback to be called on change\\n * @param {object} [opts={childList: true, subtree: true}] observe options\\n * @see http://stackoverflow.com/questions/3219758\\n */\\nfunction observeDOM(el, callback, opts) {\\n  var MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;\\n  var eventListenerSupported = window.addEventListener;\\n\\n  // Handle case where we might be passed a vue instance\\n  el = el ? el.$el || el : null;\\n  /* istanbul ignore next: dificult to test in JSDOM */\\n  if (!isElement(el)) {\\n    // We can't observe somthing that isn't an element\\n    return null;\\n  }\\n\\n  var obs = null;\\n\\n  /* istanbul ignore next: dificult to test in JSDOM */\\n  if (MutationObserver) {\\n    // Define a new observer\\n    obs = new MutationObserver(function (mutations) {\\n      var changed = false;\\n      // A Mutation can contain several change records, so we loop through them to see what has changed.\\n      // We break out of the loop early if any \\\"significant\\\" change has been detected\\n      for (var i = 0; i < mutations.length && !changed; i++) {\\n        // The muttion record\\n        var mutation = mutations[i];\\n        // Mutation Type\\n        var type = mutation.type;\\n        // DOM Node (could be any DOM Node type - HTMLElement, Text, comment, etc)\\n        var target = mutation.target;\\n        if (type === 'characterData' && target.nodeType === Node.TEXT_NODE) {\\n          // We ignore nodes that are not TEXt (i.e. comments, etc) as they don't change layout\\n          changed = true;\\n        } else if (type === 'attributes') {\\n          changed = true;\\n        } else if (type === 'childList' && (mutation.addedNodes.length > 0 || mutation.removedNodes.length > 0)) {\\n          // This includes HTMLElement and Text Nodes being added/removed/re-arranged\\n          changed = true;\\n        }\\n      }\\n      if (changed) {\\n        // We only call the callback if a change that could affect layout/size truely happened.\\n        callback();\\n      }\\n    });\\n\\n    // Have the observer observe foo for changes in children, etc\\n    obs.observe(el, object_assign({ childList: true, subtree: true }, opts));\\n  } else if (eventListenerSupported) {\\n    // Legacy interface. most likely not used in modern browsers\\n    el.addEventListener('DOMNodeInserted', callback, false);\\n    el.addEventListener('DOMNodeRemoved', callback, false);\\n  }\\n\\n  // We return a reference to the observer so that obs.disconnect() can be called if necessary\\n  // To reduce overhead when the root element is hiiden\\n  return obs;\\n}\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/mixins/id.js\\n/*\\n * SSR Safe Client Side ID attribute generation\\n *\\n */\\n\\n/* harmony default export */ var mixins_id = ({\\n  props: {\\n    id: {\\n      type: String,\\n      default: null\\n    }\\n  },\\n  methods: {\\n    safeId: function safeId() {\\n      var suffix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\\n\\n      var id = this.id || this.localId_ || null;\\n      if (!id) {\\n        return null;\\n      }\\n      suffix = String(suffix).replace(/\\\\s+/g, '_');\\n      return suffix ? id + '_' + suffix : id;\\n    }\\n  },\\n  computed: {\\n    localId_: function localId_() {\\n      if (!this.$isServer && !this.id && typeof this._uid !== 'undefined') {\\n        return '__BVID__' + this._uid;\\n      }\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/carousel/carousel.js\\n\\n\\n\\n\\n\\n// Slide directional classes\\nvar DIRECTION = {\\n  next: {\\n    dirClass: 'carousel-item-left',\\n    overlayClass: 'carousel-item-next'\\n  },\\n  prev: {\\n    dirClass: 'carousel-item-right',\\n    overlayClass: 'carousel-item-prev'\\n  }\\n\\n  // Fallback Transition duration (with a little buffer) in ms\\n};var TRANS_DURATION = 600 + 50;\\n\\n// Transition Event names\\nvar TransitionEndEvents = {\\n  WebkitTransition: 'webkitTransitionEnd',\\n  MozTransition: 'transitionend',\\n  OTransition: 'otransitionend oTransitionEnd',\\n  transition: 'transitionend'\\n\\n  // Return the browser specific transitionEnd event name\\n};function getTransisionEndEvent(el) {\\n  for (var name in TransitionEndEvents) {\\n    if (el.style[name] !== undefined) {\\n      return TransitionEndEvents[name];\\n    }\\n  }\\n  // fallback\\n  return null;\\n}\\n\\n/* harmony default export */ var carousel = ({\\n  mixins: [mixins_id],\\n  render: function render(h) {\\n    var _this = this;\\n\\n    // Wrapper for slides\\n    var inner = h('div', {\\n      ref: 'inner',\\n      class: ['carousel-inner'],\\n      attrs: {\\n        id: this.safeId('__BV_inner_'),\\n        role: 'list'\\n      }\\n    }, [this.$slots.default]);\\n\\n    // Prev and Next Controls\\n    var controls = h(false);\\n    if (this.controls) {\\n      controls = [h('a', {\\n        class: ['carousel-control-prev'],\\n        attrs: { href: '#', role: 'button', 'aria-controls': this.safeId('__BV_inner_') },\\n        on: {\\n          click: function click(evt) {\\n            evt.preventDefault();\\n            evt.stopPropagation();\\n            _this.prev();\\n          },\\n          keydown: function keydown(evt) {\\n            var keyCode = evt.keyCode;\\n            if (keyCode === key_codes.SPACE || keyCode === key_codes.ENTER) {\\n              evt.preventDefault();\\n              evt.stopPropagation();\\n              _this.prev();\\n            }\\n          }\\n        }\\n      }, [h('span', { class: ['carousel-control-prev-icon'], attrs: { 'aria-hidden': 'true' } }), h('span', { class: ['sr-only'] }, [this.labelPrev])]), h('a', {\\n        class: ['carousel-control-next'],\\n        attrs: { href: '#', role: 'button', 'aria-controls': this.safeId('__BV_inner_') },\\n        on: {\\n          click: function click(evt) {\\n            evt.preventDefault();\\n            evt.stopPropagation();\\n            _this.next();\\n          },\\n          keydown: function keydown(evt) {\\n            var keyCode = evt.keyCode;\\n            if (keyCode === key_codes.SPACE || keyCode === key_codes.ENTER) {\\n              evt.preventDefault();\\n              evt.stopPropagation();\\n              _this.next();\\n            }\\n          }\\n        }\\n      }, [h('span', { class: ['carousel-control-next-icon'], attrs: { 'aria-hidden': 'true' } }), h('span', { class: ['sr-only'] }, [this.labelNext])])];\\n    }\\n\\n    // Indicators\\n    var indicators = h('ol', {\\n      class: ['carousel-indicators'],\\n      directives: [{ name: 'show', rawName: 'v-show', value: this.indicators, expression: 'indicators' }],\\n      attrs: {\\n        id: this.safeId('__BV_indicators_'),\\n        'aria-hidden': this.indicators ? 'false' : 'true',\\n        'aria-label': this.labelIndicators,\\n        'aria-owns': this.safeId('__BV_inner_')\\n      }\\n    }, this.slides.map(function (slide, n) {\\n      return h('li', {\\n        key: 'slide_' + n,\\n        class: { active: n === _this.index },\\n        attrs: {\\n          role: 'button',\\n          id: _this.safeId('__BV_indicator_' + (n + 1) + '_'),\\n          tabindex: _this.indicators ? '0' : '-1',\\n          'aria-current': n === _this.index ? 'true' : 'false',\\n          'aria-label': _this.labelGotoSlide + ' ' + (n + 1),\\n          'aria-describedby': _this.slides[n].id || null,\\n          'aria-controls': _this.safeId('__BV_inner_')\\n        },\\n        on: {\\n          click: function click(evt) {\\n            _this.setSlide(n);\\n          },\\n          keydown: function keydown(evt) {\\n            var keyCode = evt.keyCode;\\n            if (keyCode === key_codes.SPACE || keyCode === key_codes.ENTER) {\\n              evt.preventDefault();\\n              evt.stopPropagation();\\n              _this.setSlide(n);\\n            }\\n          }\\n        }\\n      });\\n    }));\\n\\n    // Return the carousel\\n    return h('div', {\\n      class: ['carousel', 'slide'],\\n      style: { background: this.background },\\n      attrs: {\\n        role: 'region',\\n        id: this.safeId(),\\n        'aria-busy': this.isSliding ? 'true' : 'false'\\n      },\\n      on: {\\n        mouseenter: this.pause,\\n        mouseleave: this.restart,\\n        focusin: this.pause,\\n        focusout: this.restart,\\n        keydown: function keydown(evt) {\\n          var keyCode = evt.keyCode;\\n          if (keyCode === key_codes.LEFT || keyCode === key_codes.RIGHT) {\\n            evt.preventDefault();\\n            evt.stopPropagation();\\n            _this[keyCode === key_codes.LEFT ? 'prev' : 'next']();\\n          }\\n        }\\n      }\\n    }, [inner, controls, indicators]);\\n  },\\n  data: function data() {\\n    return {\\n      index: this.value || 0,\\n      isSliding: false,\\n      intervalId: null,\\n      transitionEndEvent: null,\\n      slides: [],\\n      direction: null\\n    };\\n  },\\n\\n  props: {\\n    labelPrev: {\\n      type: String,\\n      default: 'Previous Slide'\\n    },\\n    labelNext: {\\n      type: String,\\n      default: 'Next Slide'\\n    },\\n    labelGotoSlide: {\\n      type: String,\\n      default: 'Goto Slide'\\n    },\\n    labelIndicators: {\\n      type: String,\\n      default: 'Select a slide to display'\\n    },\\n    interval: {\\n      type: Number,\\n      default: 5000\\n    },\\n    indicators: {\\n      type: Boolean,\\n      default: false\\n    },\\n    controls: {\\n      type: Boolean,\\n      default: false\\n    },\\n    imgWidth: {\\n      // Sniffed by carousel-slide\\n      type: [Number, String]\\n    },\\n    imgHeight: {\\n      // Sniffed by carousel-slide\\n      type: [Number, String]\\n    },\\n    background: {\\n      type: String\\n    },\\n    value: {\\n      type: Number,\\n      default: 0\\n    }\\n  },\\n  computed: {\\n    isCycling: function isCycling() {\\n      return Boolean(this.intervalId);\\n    }\\n  },\\n  methods: {\\n    // Set slide\\n    setSlide: function setSlide(slide) {\\n      var _this2 = this;\\n\\n      // Don't animate when page is not visible\\n      if (typeof document !== 'undefined' && document.visibilityState && document.hidden) {\\n        return;\\n      }\\n      var len = this.slides.length;\\n      // Don't do anything if nothing to slide to\\n      if (len === 0) {\\n        return;\\n      }\\n      // Don't change slide while transitioning, wait until transition is done\\n      if (this.isSliding) {\\n        // Schedule slide after sliding complete\\n        this.$once('sliding-end', function () {\\n          return _this2.setSlide(slide);\\n        });\\n        return;\\n      }\\n      // Make sure we have an integer (you never know!)\\n      slide = Math.floor(slide);\\n      // Set new slide index. Wrap around if necessary\\n      this.index = slide >= len ? 0 : slide >= 0 ? slide : len - 1;\\n    },\\n\\n    // Previous slide\\n    prev: function prev() {\\n      this.direction = 'prev';\\n      this.setSlide(this.index - 1);\\n    },\\n\\n    // Next slide\\n    next: function next() {\\n      this.direction = 'next';\\n      this.setSlide(this.index + 1);\\n    },\\n\\n    // Pause auto rotation\\n    pause: function pause() {\\n      if (this.isCycling) {\\n        clearInterval(this.intervalId);\\n        this.intervalId = null;\\n        if (this.slides[this.index]) {\\n          // Make current slide focusable for screen readers\\n          this.slides[this.index].tabIndex = 0;\\n        }\\n      }\\n    },\\n\\n    // Start auto rotate slides\\n    start: function start() {\\n      var _this3 = this;\\n\\n      // Don't start if no interval, or if we are already running\\n      if (!this.interval || this.isCycling) {\\n        return;\\n      }\\n      this.slides.forEach(function (slide) {\\n        slide.tabIndex = -1;\\n      });\\n      this.intervalId = setInterval(function () {\\n        _this3.next();\\n      }, Math.max(1000, this.interval));\\n    },\\n\\n    // Re-Start auto rotate slides when focus/hover leaves the carousel\\n    restart: function restart(evt) {\\n      if (!this.$el.contains(document.activeElement)) {\\n        this.start();\\n      }\\n    },\\n\\n    // Update slide list\\n    updateSlides: function updateSlides() {\\n      this.pause();\\n      // Get all slides as DOM elements\\n      this.slides = dom_selectAll('.carousel-item', this.$refs.inner);\\n      var numSlides = this.slides.length;\\n      // Keep slide number in range\\n      var index = Math.max(0, Math.min(Math.floor(this.index), numSlides - 1));\\n      this.slides.forEach(function (slide, idx) {\\n        var n = idx + 1;\\n        if (idx === index) {\\n          addClass(slide, 'active');\\n        } else {\\n          removeClass(slide, 'active');\\n        }\\n        setAttr(slide, 'aria-current', idx === index ? 'true' : 'false');\\n        setAttr(slide, 'aria-posinset', String(n));\\n        setAttr(slide, 'aria-setsize', String(numSlides));\\n        slide.tabIndex = -1;\\n      });\\n      // Set slide as active\\n      this.setSlide(index);\\n      this.start();\\n    },\\n    calcDirection: function calcDirection() {\\n      var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\\n      var curIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\\n      var nextIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\\n\\n      if (!direction) {\\n        return nextIndex > curIndex ? DIRECTION.next : DIRECTION.prev;\\n      }\\n      return DIRECTION[direction];\\n    }\\n  },\\n  watch: {\\n    value: function value(newVal, oldVal) {\\n      if (newVal !== oldVal) {\\n        this.setSlide(newVal);\\n      }\\n    },\\n    interval: function interval(newVal, oldVal) {\\n      if (newVal === oldVal) {\\n        return;\\n      }\\n      if (!newVal) {\\n        // Pausing slide show\\n        this.pause();\\n      } else {\\n        // Restarting or Changing interval\\n        this.pause();\\n        this.start();\\n      }\\n    },\\n    index: function index(val, oldVal) {\\n      var _this4 = this;\\n\\n      if (val === oldVal || this.isSliding) {\\n        return;\\n      }\\n      // Determine sliding direction\\n      var direction = this.calcDirection(this.direction, oldVal, val);\\n      // Determine current and next slides\\n      var currentSlide = this.slides[oldVal];\\n      var nextSlide = this.slides[val];\\n      // Don't do anything if there aren't any slides to slide to\\n      if (!currentSlide || !nextSlide) {\\n        return;\\n      }\\n      // Start animating\\n      this.isSliding = true;\\n      this.$emit('sliding-start', val);\\n      // Update v-model\\n      this.$emit('input', this.index);\\n      nextSlide.classList.add(direction.overlayClass);\\n      // Trigger a reflow of next slide\\n      reflow(nextSlide);\\n      addClass(currentSlide, direction.dirClass);\\n      addClass(nextSlide, direction.dirClass);\\n      // Transition End handler\\n      var called = false;\\n      /* istanbul ignore next: dificult to test */\\n      var onceTransEnd = function onceTransEnd(evt) {\\n        if (called) {\\n          return;\\n        }\\n        called = true;\\n        if (_this4.transitionEndEvent) {\\n          var events = _this4.transitionEndEvent.split(/\\\\s+/);\\n          events.forEach(function (event) {\\n            eventOff(currentSlide, event, onceTransEnd);\\n          });\\n        }\\n        _this4._animationTimeout = null;\\n        removeClass(nextSlide, direction.dirClass);\\n        removeClass(nextSlide, direction.overlayClass);\\n        addClass(nextSlide, 'active');\\n        removeClass(currentSlide, 'active');\\n        removeClass(currentSlide, direction.dirClass);\\n        removeClass(currentSlide, direction.overlayClass);\\n        setAttr(currentSlide, 'aria-current', 'false');\\n        setAttr(nextSlide, 'aria-current', 'true');\\n        setAttr(currentSlide, 'aria-hidden', 'true');\\n        setAttr(nextSlide, 'aria-hidden', 'false');\\n        currentSlide.tabIndex = -1;\\n        nextSlide.tabIndex = -1;\\n        if (!_this4.isCycling) {\\n          // Focus the next slide for screen readers if not in play mode\\n          nextSlide.tabIndex = 0;\\n          _this4.$nextTick(function () {\\n            nextSlide.focus();\\n          });\\n        }\\n        _this4.isSliding = false;\\n        _this4.direction = null;\\n        // Notify ourselves that we're done sliding (slid)\\n        _this4.$nextTick(function () {\\n          return _this4.$emit('sliding-end', val);\\n        });\\n      };\\n      // Clear transition classes after transition ends\\n      if (this.transitionEndEvent) {\\n        var events = this.transitionEndEvent.split(/\\\\s+/);\\n        events.forEach(function (event) {\\n          eventOn(currentSlide, event, onceTransEnd);\\n        });\\n      }\\n      // Fallback to setTimeout\\n      this._animationTimeout = setTimeout(onceTransEnd, TRANS_DURATION);\\n    }\\n  },\\n  created: function created() {\\n    // Create private non-reactive props\\n    this._animationTimeout = null;\\n  },\\n  mounted: function mounted() {\\n    // Cache current browser transitionend event name\\n    this.transitionEndEvent = getTransisionEndEvent(this.$el) || null;\\n    // Get all slides\\n    this.updateSlides();\\n    // Observe child changes so we can update slide list\\n    observeDOM(this.$refs.inner, this.updateSlides.bind(this), {\\n      subtree: false,\\n      childList: true,\\n      attributes: true,\\n      attributeFilter: ['id']\\n    });\\n  },\\n\\n  /* istanbul ignore next: dificult to test */\\n  beforeDestroy: function beforeDestroy() {\\n    clearInterval(this.intervalId);\\n    clearTimeout(this._animationTimeout);\\n    this.intervalId = null;\\n    this._animationTimeout = null;\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/image/img.js\\nfunction img_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\n\\n// Blank image with fill template\\nvar BLANK_TEMPLATE = '<svg width=\\\"%{w}\\\" height=\\\"%{h}\\\" ' + 'xmlns=\\\"http://www.w3.org/2000/svg\\\" ' + 'viewBox=\\\"0 0 %{w} %{h}\\\" preserveAspectRatio=\\\"none\\\">' + '<rect width=\\\"100%\\\" height=\\\"100%\\\" style=\\\"fill:%{f};\\\"></rect>' + '</svg>';\\n\\nfunction makeBlankImgSrc(width, height, color) {\\n  var src = encodeURIComponent(BLANK_TEMPLATE.replace('%{w}', String(width)).replace('%{h}', String(height)).replace('%{f}', color));\\n  return 'data:image/svg+xml;charset=UTF-8,' + src;\\n}\\n\\nvar img_props = {\\n  src: {\\n    type: String,\\n    default: null\\n  },\\n  alt: {\\n    type: String,\\n    default: null\\n  },\\n  width: {\\n    type: [Number, String],\\n    default: null\\n  },\\n  height: {\\n    type: [Number, String],\\n    default: null\\n  },\\n  block: {\\n    type: Boolean,\\n    default: false\\n  },\\n  fluid: {\\n    type: Boolean,\\n    default: false\\n  },\\n  fluidGrow: {\\n    // Gives fluid images class `w-100` to make them grow to fit container\\n    type: Boolean,\\n    default: false\\n  },\\n  rounded: {\\n    // rounded can be:\\n    //   false: no rounding of corners\\n    //   true: slightly rounded corners\\n    //   'top': top corners rounded\\n    //   'right': right corners rounded\\n    //   'bottom': bottom corners rounded\\n    //   'left': left corners rounded\\n    //   'circle': circle/oval\\n    //   '0': force rounding off\\n    type: [Boolean, String],\\n    default: false\\n  },\\n  thumbnail: {\\n    type: Boolean,\\n    default: false\\n  },\\n  left: {\\n    type: Boolean,\\n    default: false\\n  },\\n  right: {\\n    type: Boolean,\\n    default: false\\n  },\\n  center: {\\n    type: Boolean,\\n    default: false\\n  },\\n  blank: {\\n    type: Boolean,\\n    default: false\\n  },\\n  blankColor: {\\n    type: String,\\n    default: 'transparent'\\n  }\\n};\\n\\n/* harmony default export */ var image_img = ({\\n  functional: true,\\n  props: img_props,\\n  render: function render(h, _ref) {\\n    var _class;\\n\\n    var props = _ref.props,\\n        data = _ref.data;\\n\\n    var src = props.src;\\n    var width = parseInt(props.width, 10) ? parseInt(props.width, 10) : null;\\n    var height = parseInt(props.height, 10) ? parseInt(props.height, 10) : null;\\n    var align = null;\\n    var block = props.block;\\n    if (props.blank) {\\n      if (!height && Boolean(width)) {\\n        height = width;\\n      } else if (!width && Boolean(height)) {\\n        width = height;\\n      }\\n      if (!width && !height) {\\n        width = 1;\\n        height = 1;\\n      }\\n      // Make a blank SVG image\\n      src = makeBlankImgSrc(width, height, props.blankColor || 'transparent');\\n    }\\n    if (props.left) {\\n      align = 'float-left';\\n    } else if (props.right) {\\n      align = 'float-right';\\n    } else if (props.center) {\\n      align = 'mx-auto';\\n      block = true;\\n    }\\n    return h('img', mergeData(data, {\\n      attrs: {\\n        'src': src,\\n        'alt': props.alt,\\n        'width': width ? String(width) : null,\\n        'height': height ? String(height) : null\\n      },\\n      class: (_class = {\\n        'img-thumbnail': props.thumbnail,\\n        'img-fluid': props.fluid || props.fluidGrow,\\n        'w-100': props.fluidGrow,\\n        'rounded': props.rounded === '' || props.rounded === true\\n      }, img_defineProperty(_class, 'rounded-' + props.rounded, typeof props.rounded === 'string' && props.rounded !== ''), img_defineProperty(_class, align, Boolean(align)), img_defineProperty(_class, 'd-block', block), _class)\\n    }));\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/utils/warn.js\\n/**\\n * Log a warning message to the console with bootstrap-vue formatting sugar.\\n * @param {string} message\\n */\\n/* istanbul ignore next */\\nfunction warn(message) {\\n  console.warn(\\\"[Bootstrap-Vue warn]: \\\" + message);\\n}\\n\\n/* harmony default export */ var utils_warn = (warn);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/carousel/carousel-slide.js\\n\\n\\n\\n\\n/* harmony default export */ var carousel_slide = ({\\n  components: { bImg: image_img },\\n  mixins: [mixins_id],\\n  render: function render(h) {\\n    var $slots = this.$slots;\\n\\n    var img = $slots.img;\\n    if (!img && (this.imgSrc || this.imgBlank)) {\\n      img = h('b-img', {\\n        props: {\\n          fluidGrow: true,\\n          block: true,\\n          src: this.imgSrc,\\n          blank: this.imgBlank,\\n          blankColor: this.imgBlankColor,\\n          width: this.computedWidth,\\n          height: this.computedHeight,\\n          alt: this.imgAlt\\n        }\\n      });\\n    }\\n\\n    var content = h(this.contentTag, { class: this.contentClasses }, [this.caption ? h(this.captionTag, { domProps: { innerHTML: this.caption } }) : h(false), this.text ? h(this.textTag, { domProps: { innerHTML: this.text } }) : h(false), $slots.default]);\\n\\n    return h('div', {\\n      class: ['carousel-item'],\\n      style: { background: this.background },\\n      attrs: { id: this.safeId(), role: 'listitem' }\\n    }, [img, content]);\\n  },\\n\\n  props: {\\n    imgSrc: {\\n      type: String,\\n      default: function _default() {\\n        if (this && this.src) {\\n          // Deprecate src\\n          utils_warn(\\\"b-carousel-slide: prop 'src' has been deprecated. Use 'img-src' instead\\\");\\n          return this.src;\\n        }\\n        return null;\\n      }\\n    },\\n    src: {\\n      // Deprecated: use img-src instead\\n      type: String\\n    },\\n    imgAlt: {\\n      type: String\\n    },\\n    imgWidth: {\\n      type: [Number, String]\\n    },\\n    imgHeight: {\\n      type: [Number, String]\\n    },\\n    imgBlank: {\\n      type: Boolean,\\n      default: false\\n    },\\n    imgBlankColor: {\\n      type: String,\\n      default: 'transparent'\\n    },\\n    contentVisibleUp: {\\n      type: String\\n    },\\n    contentTag: {\\n      type: String,\\n      default: 'div'\\n    },\\n    caption: {\\n      type: String\\n    },\\n    captionTag: {\\n      type: String,\\n      default: 'h3'\\n    },\\n    text: {\\n      type: String\\n    },\\n    textTag: {\\n      type: String,\\n      default: 'p'\\n    },\\n    background: {\\n      type: String\\n    }\\n  },\\n  computed: {\\n    contentClasses: function contentClasses() {\\n      return ['carousel-caption', this.contentVisibleUp ? 'd-none' : '', this.contentVisibleUp ? 'd-' + this.contentVisibleUp + '-block' : ''];\\n    },\\n    computedWidth: function computedWidth() {\\n      // Use local width, or try parent width\\n      return this.imgWidth || this.$parent.imgWidth;\\n    },\\n    computedHeight: function computedHeight() {\\n      // Use local height, or try parent height\\n      return this.imgHeight || this.$parent.imgHeight;\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/carousel/index.js\\n\\n\\n\\n\\nvar carousel_components = {\\n  bCarousel: carousel,\\n  bCarouselSlide: carousel_slide\\n};\\n\\nvar carousel_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, carousel_components);\\n  }\\n};\\n\\nvueUse(carousel_VuePlugin);\\n\\n/* harmony default export */ var components_carousel = (carousel_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/layout/container.js\\n\\n\\nvar container_props = {\\n  tag: {\\n    type: String,\\n    default: 'div'\\n  },\\n  fluid: {\\n    type: Boolean,\\n    default: false\\n  }\\n};\\n\\n/* harmony default export */ var layout_container = ({\\n  functional: true,\\n  props: container_props,\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data,\\n        children = _ref.children;\\n\\n    return h(props.tag, mergeData(data, {\\n      class: {\\n        'container': !props.fluid,\\n        'container-fluid': props.fluid\\n      }\\n    }), children);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/layout/row.js\\nfunction row_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\n\\n\\nvar COMMON_ALIGNMENT = ['start', 'end', 'center'];\\n\\nvar row_props = {\\n  tag: {\\n    type: String,\\n    default: 'div'\\n  },\\n  noGutters: {\\n    type: Boolean,\\n    default: false\\n  },\\n  alignV: {\\n    type: String,\\n    default: null,\\n    validator: function validator(str) {\\n      return arrayIncludes(COMMON_ALIGNMENT.concat(['baseline', 'stretch']), str);\\n    }\\n  },\\n  alignH: {\\n    type: String,\\n    default: null,\\n    validator: function validator(str) {\\n      return arrayIncludes(COMMON_ALIGNMENT.concat(['between', 'around']), str);\\n    }\\n  },\\n  alignContent: {\\n    type: String,\\n    default: null,\\n    validator: function validator(str) {\\n      return arrayIncludes(COMMON_ALIGNMENT.concat(['between', 'around', 'stretch']), str);\\n    }\\n  }\\n};\\n\\n/* harmony default export */ var row = ({\\n  functional: true,\\n  props: row_props,\\n  render: function render(h, _ref) {\\n    var _class;\\n\\n    var props = _ref.props,\\n        data = _ref.data,\\n        children = _ref.children;\\n\\n    return h(props.tag, mergeData(data, {\\n      staticClass: 'row',\\n      class: (_class = {\\n        'no-gutters': props.noGutters\\n      }, row_defineProperty(_class, 'align-items-' + props.alignV, props.alignV), row_defineProperty(_class, 'justify-content-' + props.alignH, props.alignH), row_defineProperty(_class, 'align-content-' + props.alignContent, props.alignContent), _class)\\n    }), children);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/utils/memoize.js\\n\\n\\nfunction memoize(fn) {\\n  var cache = create(null);\\n\\n  return function memoizedFn() {\\n    var args = JSON.stringify(arguments);\\n    return cache[args] = cache[args] || fn.apply(null, arguments);\\n  };\\n}\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/utils/suffix-prop-name.js\\n\\n\\n/**\\n * Suffix can be a falsey value so nothing is appended to string.\\n * (helps when looping over props & some shouldn't change)\\n * Use data last parameters to allow for currying.\\n * @param {string} suffix\\n * @param {string} str\\n */\\nfunction suffixPropName(suffix, str) {\\n  return str + (suffix ? upperFirst(suffix) : '');\\n}\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/layout/col.js\\nfunction col_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * Generates a prop object with a type of\\n * [Boolean, String, Number]\\n */\\nfunction boolStrNum() {\\n  return {\\n    type: [Boolean, String, Number],\\n    default: false\\n  };\\n}\\n\\n/**\\n * Generates a prop object with a type of\\n * [String, Number]\\n */\\nfunction strNum() {\\n  return {\\n    type: [String, Number],\\n    default: null\\n  };\\n}\\n\\nvar computeBkPtClass = memoize(function computeBkPt(type, breakpoint, val) {\\n  var className = type;\\n  if (val === false || val === null || val === undefined) {\\n    return undefined;\\n  }\\n  if (breakpoint) {\\n    className += '-' + breakpoint;\\n  }\\n  // Handling the boolean style prop when accepting [Boolean, String, Number]\\n  // means Vue will not convert <b-col sm /> to sm: true for us.\\n  // Since the default is false, an empty string indicates the prop's presence.\\n  if (type === 'col' && (val === '' || val === true)) {\\n    // .col-md\\n    return className.toLowerCase();\\n  }\\n  // .order-md-6\\n  className += '-' + val;\\n  return className.toLowerCase();\\n});\\n\\nvar BREAKPOINTS = ['sm', 'md', 'lg', 'xl'];\\n// Supports classes like: .col-sm, .col-md-6, .col-lg-auto\\nvar breakpointCol = BREAKPOINTS.reduce(\\n// eslint-disable-next-line no-sequences\\nfunction (propMap, breakpoint) {\\n  return propMap[breakpoint] = boolStrNum(), propMap;\\n}, create(null));\\n// Supports classes like: .offset-md-1, .offset-lg-12\\nvar breakpointOffset = BREAKPOINTS.reduce(\\n// eslint-disable-next-line no-sequences\\nfunction (propMap, breakpoint) {\\n  return propMap[suffixPropName(breakpoint, 'offset')] = strNum(), propMap;\\n}, create(null));\\n// Supports classes like: .order-md-1, .order-lg-12\\nvar breakpointOrder = BREAKPOINTS.reduce(\\n// eslint-disable-next-line no-sequences\\nfunction (propMap, breakpoint) {\\n  return propMap[suffixPropName(breakpoint, 'order')] = strNum(), propMap;\\n}, create(null));\\n\\n// For loop doesn't need to check hasOwnProperty\\n// when using an object created from null\\nvar breakpointPropMap = object_assign(create(null), {\\n  col: keys(breakpointCol),\\n  offset: keys(breakpointOffset),\\n  order: keys(breakpointOrder)\\n});\\n\\nvar col_props = object_assign({}, breakpointCol, breakpointOffset, breakpointOrder, {\\n  tag: {\\n    type: String,\\n    default: 'div'\\n  },\\n  // Generic flexbox .col\\n  col: {\\n    type: Boolean,\\n    default: false\\n  },\\n  // .col-[1-12]|auto\\n  cols: strNum(),\\n  // .offset-[1-12]\\n  offset: strNum(),\\n  // Flex ordering utility .order-[1-12]\\n  order: strNum(),\\n  alignSelf: {\\n    type: String,\\n    default: null,\\n    validator: function validator(str) {\\n      return arrayIncludes(['auto', 'start', 'end', 'center', 'baseline', 'stretch'], str);\\n    }\\n  }\\n});\\n\\n/**\\n * We need \\\".col\\\" to default in when no other props are passed,\\n * but always render when col=true.\\n */\\n/* harmony default export */ var col = ({\\n  functional: true,\\n  props: col_props,\\n  render: function render(h, _ref) {\\n    var _classList$push;\\n\\n    var props = _ref.props,\\n        data = _ref.data,\\n        children = _ref.children;\\n\\n    var classList = [];\\n    // Loop through `col`, `offset`, `order` breakpoint props\\n    for (var type in breakpointPropMap) {\\n      // Returns colSm, offset, offsetSm, orderMd, etc.\\n      var _keys = breakpointPropMap[type];\\n      for (var i = 0; i < _keys.length; i++) {\\n        // computeBkPt(col, colSm => Sm, value=[String, Number, Boolean])\\n        var c = computeBkPtClass(type, _keys[i].replace(type, ''), props[_keys[i]]);\\n        // If a class is returned, push it onto the array.\\n        if (c) {\\n          classList.push(c);\\n        }\\n      }\\n    }\\n\\n    classList.push((_classList$push = {\\n      // Default to .col if no other classes generated nor `cols` specified.\\n      col: props.col || classList.length === 0 && !props.cols\\n    }, col_defineProperty(_classList$push, 'col-' + props.cols, props.cols), col_defineProperty(_classList$push, 'offset-' + props.offset, props.offset), col_defineProperty(_classList$push, 'order-' + props.order, props.order), col_defineProperty(_classList$push, 'align-self-' + props.alignSelf, props.alignSelf), _classList$push));\\n\\n    return h(props.tag, mergeData(data, { class: classList }), children);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/layout/form-row.js\\n\\n\\nvar form_row_props = {\\n  tag: {\\n    type: String,\\n    default: 'div'\\n  }\\n};\\n\\n/* harmony default export */ var form_row = ({\\n  functional: true,\\n  props: form_row_props,\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data,\\n        children = _ref.children;\\n\\n    return h(props.tag, mergeData(data, {\\n      staticClass: 'form-row'\\n    }), children);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/layout/index.js\\n\\n\\n\\n\\n\\n\\nvar layout_components = {\\n  bContainer: layout_container,\\n  bRow: row,\\n  bCol: col,\\n  bFormRow: form_row\\n};\\n\\nvar layout_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, layout_components);\\n  }\\n};\\n\\nvueUse(layout_VuePlugin);\\n\\n/* harmony default export */ var layout = (layout_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/mixins/listen-on-root.js\\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\\n\\n\\n/**\\n * Issue #569: collapse::toggle::state triggered too many times\\n * @link https://github.com/bootstrap-vue/bootstrap-vue/issues/569\\n */\\n\\nvar BVRL = '__BV_root_listeners__';\\n\\n/* harmony default export */ var listen_on_root = ({\\n  methods: {\\n    /**\\n         * Safely register event listeners on the root Vue node.\\n         * While Vue automatically removes listeners for individual components,\\n         * when a component registers a listener on root and is destroyed,\\n         * this orphans a callback because the node is gone,\\n         * but the root does not clear the callback.\\n         *\\n         * This adds a non-reactive prop to a vm on the fly\\n         * in order to avoid object observation and its performance costs\\n         * to something that needs no reactivity.\\n         * It should be highly unlikely there are any naming collisions.\\n         * @param {string} event\\n         * @param {function} callback\\n         * @chainable\\n         */\\n    listenOnRoot: function listenOnRoot(event, callback) {\\n      if (!this[BVRL] || !isArray(this[BVRL])) {\\n        this[BVRL] = [];\\n      }\\n      this[BVRL].push({ event: event, callback: callback });\\n      this.$root.$on(event, callback);\\n      return this;\\n    },\\n\\n\\n    /**\\n         * Convenience method for calling vm.$emit on vm.$root.\\n         * @param {string} event\\n         * @param {*} args\\n         * @chainable\\n         */\\n    emitOnRoot: function emitOnRoot(event) {\\n      var _$root;\\n\\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\\n        args[_key - 1] = arguments[_key];\\n      }\\n\\n      (_$root = this.$root).$emit.apply(_$root, [event].concat(_toConsumableArray(args)));\\n      return this;\\n    }\\n  },\\n\\n  beforeDestroy: function beforeDestroy() {\\n    if (this[BVRL] && isArray(this[BVRL])) {\\n      while (this[BVRL].length > 0) {\\n        // shift to process in order\\n        var _BVRL$shift = this[BVRL].shift(),\\n            event = _BVRL$shift.event,\\n            callback = _BVRL$shift.callback;\\n\\n        this.$root.$off(event, callback);\\n      }\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/collapse/collapse.js\\n\\n\\n\\n// Events we emit on $root\\nvar EVENT_STATE = 'bv::collapse::state';\\nvar EVENT_ACCORDION = 'bv::collapse::accordion';\\n// Events we listen to on $root\\nvar EVENT_TOGGLE = 'bv::toggle::collapse';\\n\\n/* harmony default export */ var collapse = ({\\n  mixins: [listen_on_root],\\n  render: function render(h) {\\n    var content = h(this.tag, {\\n      class: this.classObject,\\n      directives: [{ name: 'show', value: this.show }],\\n      attrs: { id: this.id || null },\\n      on: { click: this.clickHandler }\\n    }, [this.$slots.default]);\\n    return h('transition', {\\n      props: {\\n        enterClass: '',\\n        enterActiveClass: 'collapsing',\\n        enterToClass: '',\\n        leaveClass: '',\\n        leaveActiveClass: 'collapsing',\\n        leaveToClass: ''\\n      },\\n      on: {\\n        enter: this.onEnter,\\n        afterEnter: this.onAfterEnter,\\n        leave: this.onLeave,\\n        afterLeave: this.onAfterLeave\\n      }\\n    }, [content]);\\n  },\\n  data: function data() {\\n    return {\\n      show: this.visible,\\n      transitioning: false\\n    };\\n  },\\n\\n  model: {\\n    prop: 'visible',\\n    event: 'input'\\n  },\\n  props: {\\n    id: {\\n      type: String,\\n      required: true\\n    },\\n    isNav: {\\n      type: Boolean,\\n      default: false\\n    },\\n    accordion: {\\n      type: String,\\n      default: null\\n    },\\n    visible: {\\n      type: Boolean,\\n      default: false\\n    },\\n    tag: {\\n      type: String,\\n      default: 'div'\\n    }\\n  },\\n  watch: {\\n    visible: function visible(newVal) {\\n      if (newVal !== this.show) {\\n        this.show = newVal;\\n      }\\n    },\\n    show: function show(newVal, oldVal) {\\n      if (newVal !== oldVal) {\\n        this.emitState();\\n      }\\n    }\\n  },\\n  computed: {\\n    classObject: function classObject() {\\n      return {\\n        'navbar-collapse': this.isNav,\\n        'collapse': !this.transitioning,\\n        'show': this.show && !this.transitioning\\n      };\\n    }\\n  },\\n  methods: {\\n    toggle: function toggle() {\\n      this.show = !this.show;\\n    },\\n    onEnter: function onEnter(el) {\\n      el.style.height = 0;\\n      reflow(el);\\n      el.style.height = el.scrollHeight + 'px';\\n      this.transitioning = true;\\n      // This should be moved out so we can add cancellable events\\n      this.$emit('show');\\n    },\\n    onAfterEnter: function onAfterEnter(el) {\\n      el.style.height = null;\\n      this.transitioning = false;\\n      this.$emit('shown');\\n    },\\n    onLeave: function onLeave(el) {\\n      el.style.height = 'auto';\\n      el.style.display = 'block';\\n      el.style.height = el.getBoundingClientRect().height + 'px';\\n      reflow(el);\\n      this.transitioning = true;\\n      el.style.height = 0;\\n      // This should be moved out so we can add cancellable events\\n      this.$emit('hide');\\n    },\\n    onAfterLeave: function onAfterLeave(el) {\\n      el.style.height = null;\\n      this.transitioning = false;\\n      this.$emit('hidden');\\n    },\\n    emitState: function emitState() {\\n      this.$emit('input', this.show);\\n      // Let v-b-toggle know the state of this collapse\\n      this.$root.$emit(EVENT_STATE, this.id, this.show);\\n      if (this.accordion && this.show) {\\n        // Tell the other collapses in this accordion to close\\n        this.$root.$emit(EVENT_ACCORDION, this.id, this.accordion);\\n      }\\n    },\\n    clickHandler: function clickHandler(evt) {\\n      // If we are in a nav/navbar, close the collapse when non-disabled link clicked\\n      var el = evt.target;\\n      if (!this.isNav || !el || getComputedStyle(this.$el).display !== 'block') {\\n        return;\\n      }\\n      if (hasClass(el, 'nav-link') || hasClass(el, 'dropdown-item')) {\\n        this.show = false;\\n      }\\n    },\\n    handleToggleEvt: function handleToggleEvt(target) {\\n      if (target !== this.id) {\\n        return;\\n      }\\n      this.toggle();\\n    },\\n    handleAccordionEvt: function handleAccordionEvt(openedId, accordion) {\\n      if (!this.accordion || accordion !== this.accordion) {\\n        return;\\n      }\\n      if (openedId === this.id) {\\n        // Open this collapse if not shown\\n        if (!this.show) {\\n          this.toggle();\\n        }\\n      } else {\\n        // Close this collapse if shown\\n        if (this.show) {\\n          this.toggle();\\n        }\\n      }\\n    },\\n    handleResize: function handleResize() {\\n      // Handler for orientation/resize to set collapsed state in nav/navbar\\n      this.show = getComputedStyle(this.$el).display === 'block';\\n    }\\n  },\\n  created: function created() {\\n    // Listen for toggle events to open/close us\\n    this.listenOnRoot(EVENT_TOGGLE, this.handleToggleEvt);\\n    // Listen to otehr collapses for accordion events\\n    this.listenOnRoot(EVENT_ACCORDION, this.handleAccordionEvt);\\n  },\\n  mounted: function mounted() {\\n    if (this.isNav && typeof document !== 'undefined') {\\n      // Set up handlers\\n      window.addEventListener('resize', this.handleResize, false);\\n      window.addEventListener('orientationchange', this.handleResize, false);\\n      this.handleResize();\\n    }\\n    this.emitState();\\n  },\\n  beforeDestroy: function beforeDestroy() {\\n    if (this.isNav && typeof document !== 'undefined') {\\n      window.removeEventListener('resize', this.handleResize, false);\\n      window.removeEventListener('orientationchange', this.handleResize, false);\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/utils/target.js\\n\\n\\nvar allListenTypes = { hover: true, click: true, focus: true };\\n\\nvar BVBoundListeners = '__BV_boundEventListeners__';\\n\\nvar target_bindTargets = function bindTargets(vnode, binding, listenTypes, fn) {\\n  var targets = keys(binding.modifiers || {}).filter(function (t) {\\n    return !allListenTypes[t];\\n  });\\n\\n  if (binding.value) {\\n    targets.push(binding.value);\\n  }\\n\\n  var listener = function listener() {\\n    fn({ targets: targets, vnode: vnode });\\n  };\\n\\n  keys(allListenTypes).forEach(function (type) {\\n    if (listenTypes[type] || binding.modifiers[type]) {\\n      vnode.elm.addEventListener(type, listener);\\n      var boundListeners = vnode.elm[BVBoundListeners] || {};\\n      boundListeners[type] = boundListeners[type] || [];\\n      boundListeners[type].push(listener);\\n      vnode.elm[BVBoundListeners] = boundListeners;\\n    }\\n  });\\n\\n  // Return the list of targets\\n  return targets;\\n};\\n\\nvar target_unbindTargets = function unbindTargets(vnode, binding, listenTypes) {\\n  keys(allListenTypes).forEach(function (type) {\\n    if (listenTypes[type] || binding.modifiers[type]) {\\n      var boundListeners = vnode.elm[BVBoundListeners] && vnode.elm[BVBoundListeners][type];\\n      if (boundListeners) {\\n        boundListeners.forEach(function (listener) {\\n          return vnode.elm.removeEventListener(type, listener);\\n        });\\n        delete vnode.elm[BVBoundListeners][type];\\n      }\\n    }\\n  });\\n};\\n\\n\\n\\n/* harmony default export */ var utils_target = (target_bindTargets);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/directives/toggle/toggle.js\\n\\n\\n\\n// Are we client side?\\nvar inBrowser = typeof window !== 'undefined';\\n\\n// target listen types\\nvar toggle_listenTypes = { click: true\\n\\n  // Property key for handler storage\\n};var BVT = '__BV_toggle__';\\n\\n// Emitted Control Event for collapse (emitted to collapse)\\nvar toggle_EVENT_TOGGLE = 'bv::toggle::collapse';\\n\\n// Listen to Event for toggle state update (Emited by collapse)\\nvar toggle_EVENT_STATE = 'bv::collapse::state';\\n\\n/* harmony default export */ var toggle_toggle = ({\\n  bind: function bind(el, binding, vnode) {\\n    var targets = utils_target(vnode, binding, toggle_listenTypes, function (_ref) {\\n      var targets = _ref.targets,\\n          vnode = _ref.vnode;\\n\\n      targets.forEach(function (target) {\\n        vnode.context.$root.$emit(toggle_EVENT_TOGGLE, target);\\n      });\\n    });\\n\\n    if (inBrowser && vnode.context && targets.length > 0) {\\n      // Add aria attributes to element\\n      setAttr(el, 'aria-controls', targets.join(' '));\\n      setAttr(el, 'aria-expanded', 'false');\\n      if (el.tagName !== 'BUTTON') {\\n        // If element is not a button, we add `role=\\\"button\\\"` for accessibility\\n        setAttr(el, 'role', 'button');\\n      }\\n\\n      // Toggle state hadnler, stored on element\\n      el[BVT] = function toggleDirectiveHandler(id, state) {\\n        if (targets.indexOf(id) !== -1) {\\n          // Set aria-expanded state\\n          setAttr(el, 'aria-expanded', state ? 'true' : 'false');\\n          // Set/Clear 'collapsed' class state\\n          if (state) {\\n            removeClass(el, 'collapsed');\\n          } else {\\n            addClass(el, 'collapsed');\\n          }\\n        }\\n      };\\n\\n      // Listen for toggle state changes\\n      vnode.context.$root.$on(toggle_EVENT_STATE, el[BVT]);\\n    }\\n  },\\n  unbind: function unbind(el, binding, vnode) {\\n    if (el[BVT]) {\\n      // Remove our $root listener\\n      vnode.context.$root.$off(toggle_EVENT_STATE, el[BVT]);\\n      el[BVT] = null;\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/directives/toggle/index.js\\n\\n\\n\\nvar directives = {\\n  bToggle: toggle_toggle\\n};\\n\\nvar toggle_VuePlugin = {\\n  install: function install(Vue) {\\n    registerDirectives(Vue, directives);\\n  }\\n};\\n\\nvueUse(toggle_VuePlugin);\\n\\n/* harmony default export */ var directives_toggle = (toggle_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/collapse/index.js\\n\\n\\n\\n\\nvar collapse_components = {\\n  bCollapse: collapse\\n};\\n\\nvar collapse_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, collapse_components);\\n    Vue.use(directives_toggle);\\n  }\\n};\\n\\nvueUse(collapse_VuePlugin);\\n\\n/* harmony default export */ var components_collapse = (collapse_VuePlugin);\\n// EXTERNAL MODULE: ./node_modules/popper.js/dist/esm/popper.js\\nvar popper = __webpack_require__(0);\\n\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/mixins/clickout.js\\n/* harmony default export */ var clickout = ({\\n  mounted: function mounted() {\\n    if (typeof document !== 'undefined') {\\n      document.documentElement.addEventListener('click', this._clickOutListener);\\n    }\\n  },\\n  beforeDestroy: function beforeDestroy() {\\n    if (typeof document !== 'undefined') {\\n      document.documentElement.removeEventListener('click', this._clickOutListener);\\n    }\\n  },\\n\\n  methods: {\\n    _clickOutListener: function _clickOutListener(e) {\\n      if (!this.$el.contains(e.target)) {\\n        if (this.clickOutListener) {\\n          this.clickOutListener();\\n        }\\n      }\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/utils/bv-event.class.js\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n\\n\\nvar bv_event_class_BvEvent = function () {\\n  function BvEvent(type) {\\n    var eventInit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\\n\\n    _classCallCheck(this, BvEvent);\\n\\n    // Start by emulating native Event constructor.\\n    if (!type) {\\n      throw new TypeError('Failed to construct \\\\'' + this.constructor.name + '\\\\'. 1 argument required, ' + arguments.length + ' given.');\\n    }\\n    // Assign defaults first, the eventInit,\\n    // and the type last so it can't be overwritten.\\n    object_assign(this, BvEvent.defaults(), eventInit, { type: type });\\n    // Freeze some props as readonly, but leave them enumerable.\\n    defineProperties(this, {\\n      type: readonlyDescriptor(),\\n      cancelable: readonlyDescriptor(),\\n      nativeEvent: readonlyDescriptor(),\\n      target: readonlyDescriptor(),\\n      relatedTarget: readonlyDescriptor(),\\n      vueTarget: readonlyDescriptor()\\n    });\\n    // Create a private variable using closure scoping.\\n    var defaultPrevented = false;\\n    // Recreate preventDefault method. One way setter.\\n    this.preventDefault = function preventDefault() {\\n      if (this.cancelable) {\\n        defaultPrevented = true;\\n      }\\n    };\\n    // Create 'defaultPrevented' publicly accessible prop\\n    // that can only be altered by the preventDefault method.\\n    defineProperty(this, 'defaultPrevented', {\\n      enumerable: true,\\n      get: function get() {\\n        return defaultPrevented;\\n      }\\n    });\\n  }\\n\\n  _createClass(BvEvent, null, [{\\n    key: 'defaults',\\n    value: function defaults() {\\n      return {\\n        type: '',\\n        cancelable: true,\\n        nativeEvent: null,\\n        target: null,\\n        relatedTarget: null,\\n        vueTarget: null\\n      };\\n    }\\n  }]);\\n\\n  return BvEvent;\\n}();\\n\\n/* harmony default export */ var bv_event_class = (bv_event_class_BvEvent);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/mixins/dropdown.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// Return an Array of visible items\\nfunction filterVisible(els) {\\n  return (els || []).filter(isVisible);\\n}\\n\\n// Dropdown item CSS selectors\\n// TODO: .dropdown-form handling\\nvar dropdown_ITEM_SELECTOR = '.dropdown-item:not(.disabled):not([disabled])';\\n\\n// Popper attachment positions\\nvar AttachmentMap = {\\n  // DropUp Left Align\\n  TOP: 'top-start',\\n  // DropUp Right Align\\n  TOPEND: 'top-end',\\n  // Dropdown left Align\\n  BOTTOM: 'bottom-start',\\n  // Dropdown Right Align\\n  BOTTOMEND: 'bottom-end'\\n};\\n\\n/* harmony default export */ var mixins_dropdown = ({\\n  mixins: [clickout, listen_on_root],\\n  props: {\\n    disabled: {\\n      type: Boolean,\\n      default: false\\n    },\\n    text: {\\n      // Button label\\n      type: String,\\n      default: ''\\n    },\\n    dropup: {\\n      // place on top if possible\\n      type: Boolean,\\n      default: false\\n    },\\n    right: {\\n      // Right align menu (default is left align)\\n      type: Boolean,\\n      default: false\\n    },\\n    offset: {\\n      // Number of pixels to offset menu, or a CSS unit value (i.e. 1px, 1rem, etc)\\n      type: [Number, String],\\n      default: 0\\n    },\\n    noFlip: {\\n      // Disable auto-flipping of menu from bottom<=>top\\n      type: Boolean,\\n      default: false\\n    },\\n    popperOpts: {\\n      type: Object,\\n      default: function _default() {}\\n    }\\n  },\\n  data: function data() {\\n    return {\\n      visible: false,\\n      inNavbar: null,\\n      visibleChangePrevented: false\\n    };\\n  },\\n  created: function created() {\\n    // Create non-reactive property\\n    this._popper = null;\\n  },\\n  mounted: function mounted() {\\n    // To keep one dropdown opened on page\\n    this.listenOnRoot('bv::dropdown::shown', this.rootCloseListener);\\n    // Hide when clicked on links\\n    this.listenOnRoot('clicked::link', this.rootCloseListener);\\n    // Use new namespaced events\\n    this.listenOnRoot('bv::link::clicked', this.rootCloseListener);\\n  },\\n\\n  /* istanbul ignore next: not easy to test */\\n  deactivated: function deactivated() {\\n    // In case we are inside a `<keep-alive>`\\n    this.visible = false;\\n    this.setTouchStart(false);\\n    this.removePopper();\\n  },\\n\\n  /* istanbul ignore next: not easy to test */\\n  beforeDestroy: function beforeDestroy() {\\n    this.visible = false;\\n    this.setTouchStart(false);\\n    this.removePopper();\\n  },\\n\\n  watch: {\\n    visible: function visible(newValue, oldValue) {\\n      if (this.visibleChangePrevented) {\\n        this.visibleChangePrevented = false;\\n        return;\\n      }\\n\\n      if (newValue !== oldValue) {\\n        var evtName = newValue ? 'show' : 'hide';\\n        var bvEvt = new bv_event_class(evtName, {\\n          cancelable: true,\\n          vueTarget: this,\\n          target: this.$refs.menu,\\n          relatedTarget: null\\n        });\\n        this.emitEvent(bvEvt);\\n        if (bvEvt.defaultPrevented) {\\n          // Reset value and exit if canceled\\n          this.visibleChangePrevented = true;\\n          this.visible = oldValue;\\n          return;\\n        }\\n        if (evtName === 'show') {\\n          this.showMenu();\\n        } else {\\n          this.hideMenu();\\n        }\\n      }\\n    },\\n    disabled: function disabled(newValue, oldValue) {\\n      if (newValue !== oldValue && newValue && this.visible) {\\n        // Hide dropdown if disabled changes to true\\n        this.visible = false;\\n      }\\n    }\\n  },\\n  computed: {\\n    toggler: function toggler() {\\n      return this.$refs.toggle.$el || this.$refs.toggle;\\n    }\\n  },\\n  methods: {\\n    // Event emitter\\n    emitEvent: function emitEvent(bvEvt) {\\n      var type = bvEvt.type;\\n      this.$emit(type, bvEvt);\\n      this.emitOnRoot('bv::dropdown::' + type, bvEvt);\\n    },\\n    showMenu: function showMenu() {\\n      if (this.disabled) {\\n        return;\\n      }\\n      // Ensure other menus are closed\\n      this.emitOnRoot('bv::dropdown::shown', this);\\n\\n      // Are we in a navbar ?\\n      if (this.inNavbar === null && this.isNav) {\\n        this.inNavbar = Boolean(closest('.navbar', this.$el));\\n      }\\n\\n      // Disable totally Popper.js for Dropdown in Navbar\\n      /* istnbul ignore next: can't test popper in JSDOM */\\n      if (!this.inNavbar) {\\n        if (typeof popper[\\\"a\\\" /* default */] === 'undefined') {\\n          utils_warn('b-dropdown: Popper.js not found. Falling back to CSS positioning.');\\n        } else {\\n          // for dropup with alignment we use the parent element as popper container\\n          var element = this.dropup && this.right || this.split ? this.$el : this.$refs.toggle;\\n          // Make sure we have a reference to an element, not a component!\\n          element = element.$el || element;\\n          // Instantiate popper.js\\n          this.createPopper(element);\\n        }\\n      }\\n\\n      this.setTouchStart(true);\\n      this.$emit('shown');\\n\\n      // Focus on the first item on show\\n      this.$nextTick(this.focusFirstItem);\\n    },\\n    hideMenu: function hideMenu() {\\n      this.setTouchStart(false);\\n      this.emitOnRoot('bv::dropdown::hidden', this);\\n      this.$emit('hidden');\\n      this.removePopper();\\n    },\\n    createPopper: function createPopper(element) {\\n      this.removePopper();\\n      this._popper = new popper[\\\"a\\\" /* default */](element, this.$refs.menu, this.getPopperConfig());\\n    },\\n    removePopper: function removePopper() {\\n      if (this._popper) {\\n        // Ensure popper event listeners are removed cleanly\\n        this._popper.destroy();\\n      }\\n      this._popper = null;\\n    },\\n    getPopperConfig /* istanbul ignore next: can't test popper in JSDOM */: function getPopperConfig() {\\n      var placement = AttachmentMap.BOTTOM;\\n      if (this.dropup && this.right) {\\n        // dropup + right\\n        placement = AttachmentMap.TOPEND;\\n      } else if (this.dropup) {\\n        // dropup + left\\n        placement = AttachmentMap.TOP;\\n      } else if (this.right) {\\n        // dropdown + right\\n        placement = AttachmentMap.BOTTOMEND;\\n      }\\n      var popperConfig = {\\n        placement: placement,\\n        modifiers: {\\n          offset: {\\n            offset: this.offset || 0\\n          },\\n          flip: {\\n            enabled: !this.noFlip\\n          }\\n        }\\n      };\\n      if (this.boundary) {\\n        popperConfig.modifiers.preventOverflow = {\\n          boundariesElement: this.boundary\\n        };\\n      }\\n      return object_assign(popperConfig, this.popperOpts || {});\\n    },\\n    setTouchStart: function setTouchStart(on) {\\n      var _this = this;\\n\\n      /*\\n       * If this is a touch-enabled device we add extra\\n       * empty mouseover listeners to the body's immediate children;\\n       * only needed because of broken event delegation on iOS\\n       * https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\\n       */\\n      if ('ontouchstart' in document.documentElement) {\\n        var children = from(document.body.children);\\n        children.forEach(function (el) {\\n          if (on) {\\n            eventOn('mouseover', _this._noop);\\n          } else {\\n            eventOff('mouseover', _this._noop);\\n          }\\n        });\\n      }\\n    },\\n\\n    /* istanbul ignore next: not easy to test */\\n    _noop: function _noop() {\\n      // Do nothing event handler (used in touchstart event handler)\\n    },\\n    rootCloseListener: function rootCloseListener(vm) {\\n      if (vm !== this) {\\n        this.visible = false;\\n      }\\n    },\\n    clickOutListener: function clickOutListener() {\\n      this.visible = false;\\n    },\\n    show: function show() {\\n      // Public method to show dropdown\\n      if (this.disabled) {\\n        return;\\n      }\\n      this.visible = true;\\n    },\\n    hide: function hide() {\\n      // Public method to hide dropdown\\n      if (this.disabled) {\\n        return;\\n      }\\n      this.visible = false;\\n    },\\n    toggle: function toggle(evt) {\\n      // Called only by a button that toggles the menu\\n      evt = evt || {};\\n      var type = evt.type;\\n      var key = evt.keyCode;\\n      if (type !== 'click' && !(type === 'keydown' && (key === key_codes.ENTER || key === key_codes.SPACE || key === key_codes.DOWN))) {\\n        // We only toggle on Click, Enter, Space, and Arrow Down\\n        return;\\n      }\\n      if (this.disabled) {\\n        this.visible = false;\\n        return;\\n      }\\n      this.$emit('toggle', evt);\\n      if (evt.defaultPrevented) {\\n        // Exit if canceled\\n        return;\\n      }\\n      evt.preventDefault();\\n      evt.stopPropagation();\\n      // Toggle visibility\\n      this.visible = !this.visible;\\n    },\\n    click: function click(evt) {\\n      // Calle only in split button mode, for the split button\\n      if (this.disabled) {\\n        this.visible = false;\\n        return;\\n      }\\n      this.$emit('click', evt);\\n    },\\n\\n    /* istanbul ignore next: not easy to test */\\n    onKeydown: function onKeydown(evt) {\\n      // Called from dropdown menu context\\n      var key = evt.keyCode;\\n      if (key === key_codes.ESC) {\\n        // Close on ESC\\n        this.onEsc(evt);\\n      } else if (key === key_codes.TAB) {\\n        // Close on tab out\\n        this.onTab(evt);\\n      } else if (key === key_codes.DOWN) {\\n        // Down Arrow\\n        this.focusNext(evt, false);\\n      } else if (key === key_codes.UP) {\\n        // Up Arrow\\n        this.focusNext(evt, true);\\n      }\\n    },\\n\\n    /* istanbul ignore next: not easy to test */\\n    onEsc: function onEsc(evt) {\\n      if (this.visible) {\\n        this.visible = false;\\n        evt.preventDefault();\\n        evt.stopPropagation();\\n        // Return focus to original trigger button\\n        this.$nextTick(this.focusToggler);\\n      }\\n    },\\n\\n    /* istanbul ignore next: not easy to test */\\n    onTab: function onTab(evt) {\\n      if (this.visible) {\\n        // TODO: Need special handler for dealing with form inputs\\n        // Tab, if in a text-like input, we should just focus next item in the dropdown\\n        // Note: Inputs are in a special .dropdown-form container\\n        this.visible = false;\\n      }\\n    },\\n    onFocusOut: function onFocusOut(evt) {\\n      if (this.$refs.menu.contains(evt.relatedTarget)) {\\n        return;\\n      }\\n      this.visible = false;\\n    },\\n\\n    /* istanbul ignore next: not easy to test */\\n    onMouseOver: function onMouseOver(evt) {\\n      // Focus the item on hover\\n      // TODO: Special handling for inputs? Inputs are in a special .dropdown-form container\\n      var item = evt.target;\\n      if (item.classList.contains('dropdown-item') && !item.disabled && !item.classList.contains('disabled') && item.focus) {\\n        item.focus();\\n      }\\n    },\\n    focusNext: function focusNext(evt, up) {\\n      var _this2 = this;\\n\\n      if (!this.visible) {\\n        return;\\n      }\\n      evt.preventDefault();\\n      evt.stopPropagation();\\n      this.$nextTick(function () {\\n        var items = _this2.getItems();\\n        if (items.length < 1) {\\n          return;\\n        }\\n        var index = items.indexOf(evt.target);\\n        if (up && index > 0) {\\n          index--;\\n        } else if (!up && index < items.length - 1) {\\n          index++;\\n        }\\n        if (index < 0) {\\n          index = 0;\\n        }\\n        _this2.focusItem(index, items);\\n      });\\n    },\\n    focusItem: function focusItem(idx, items) {\\n      var el = items.find(function (el, i) {\\n        return i === idx;\\n      });\\n      if (el && getAttr(el, 'tabindex') !== '-1') {\\n        el.focus();\\n      }\\n    },\\n    getItems: function getItems() {\\n      // Get all items\\n      return filterVisible(dom_selectAll(dropdown_ITEM_SELECTOR, this.$refs.menu));\\n    },\\n    getFirstItem: function getFirstItem() {\\n      // Get the first non-disabled item\\n      var item = this.getItems()[0];\\n      return item || null;\\n    },\\n    focusFirstItem: function focusFirstItem() {\\n      var item = this.getFirstItem();\\n      if (item) {\\n        this.focusItem(0, [item]);\\n      }\\n    },\\n    focusToggler: function focusToggler() {\\n      var toggler = this.toggler;\\n      if (toggler && toggler.focus) {\\n        toggler.focus();\\n      }\\n    }\\n  }\\n});\\n// EXTERNAL MODULE: ./node_modules/bootstrap-vue/es/components/dropdown/dropdown.css\\nvar dropdown_dropdown = __webpack_require__(24);\\n\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/dropdown/dropdown.js\\n\\n\\n\\n\\n\\n\\n/* harmony default export */ var components_dropdown_dropdown = ({\\n  mixins: [mixins_id, mixins_dropdown],\\n  components: { bButton: button_button },\\n  render: function render(h) {\\n    var split = h(false);\\n    if (this.split) {\\n      split = h('b-button', {\\n        ref: 'button',\\n        props: {\\n          disabled: this.disabled,\\n          variant: this.variant,\\n          size: this.size\\n        },\\n        attrs: {\\n          id: this.safeId('_BV_button_')\\n        },\\n        on: {\\n          click: this.click\\n        }\\n      }, [this.$slots['button-content'] || this.$slots.text || this.text]);\\n    }\\n    var toggle = h('b-button', {\\n      ref: 'toggle',\\n      class: this.toggleClasses,\\n      props: {\\n        variant: this.variant,\\n        size: this.size,\\n        disabled: this.disabled\\n      },\\n      attrs: {\\n        id: this.safeId('_BV_toggle_'),\\n        'aria-haspopup': 'true',\\n        'aria-expanded': this.visible ? 'true' : 'false'\\n      },\\n      on: {\\n        click: this.toggle, // click\\n        keydown: this.toggle // enter, space, down\\n      }\\n    }, [this.split ? h('span', { class: ['sr-only'] }, [this.toggleText]) : this.$slots['button-content'] || this.$slots.text || this.text]);\\n    var menu = h('div', {\\n      ref: 'menu',\\n      class: this.menuClasses,\\n      attrs: {\\n        role: this.role,\\n        'aria-labelledby': this.safeId(this.split ? '_BV_button_' : '_BV_toggle_')\\n      },\\n      on: {\\n        mouseover: this.onMouseOver,\\n        keydown: this.onKeydown // tab, up, down, esc\\n      }\\n    }, [this.$slots.default]);\\n    return h('div', { attrs: { id: this.safeId() }, class: this.dropdownClasses }, [split, toggle, menu]);\\n  },\\n\\n  props: {\\n    split: {\\n      type: Boolean,\\n      default: false\\n    },\\n    toggleText: {\\n      type: String,\\n      default: 'Toggle Dropdown'\\n    },\\n    size: {\\n      type: String,\\n      default: null\\n    },\\n    variant: {\\n      type: String,\\n      default: null\\n    },\\n    menuClass: {\\n      type: [String, Array],\\n      default: null\\n    },\\n    toggleClass: {\\n      type: [String, Array],\\n      default: null\\n    },\\n    noCaret: {\\n      type: Boolean,\\n      default: false\\n    },\\n    role: {\\n      type: String,\\n      default: 'menu'\\n    },\\n    boundary: {\\n      // String: `scrollParent`, `window` or `viewport`\\n      // Object: HTML Element reference\\n      type: [String, Object],\\n      default: 'scrollParent'\\n    }\\n  },\\n  computed: {\\n    dropdownClasses: function dropdownClasses() {\\n      var position = '';\\n      // Position `static` is needed to allow menu to \\\"breakout\\\" of the scrollParent boundaries\\n      // when boundary is anything other than `scrollParent`\\n      // See https://github.com/twbs/bootstrap/issues/24251#issuecomment-341413786\\n      if (this.boundary !== 'scrollParent' || !this.boundary) {\\n        position = 'position-static';\\n      }\\n      return ['btn-group', 'b-dropdown', 'dropdown', this.dropup ? 'dropup' : '', this.visible ? 'show' : '', position];\\n    },\\n    menuClasses: function menuClasses() {\\n      return ['dropdown-menu', {\\n        'dropdown-menu-right': this.right,\\n        'show': this.visible\\n      }, this.menuClass];\\n    },\\n    toggleClasses: function toggleClasses() {\\n      return [{\\n        'dropdown-toggle': !this.noCaret || this.split,\\n        'dropdown-toggle-split': this.split\\n      }, this.toggleClass];\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/dropdown/dropdown-item.js\\n\\n\\n\\nvar dropdown_item_props = propsFactory();\\n\\n/* harmony default export */ var dropdown_item = ({\\n  functional: true,\\n  props: dropdown_item_props,\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data,\\n        children = _ref.children;\\n\\n    return h(link_link, mergeData(data, {\\n      props: props,\\n      staticClass: 'dropdown-item',\\n      attrs: { role: 'menuitem' }\\n    }), children);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/dropdown/dropdown-item-button.js\\n\\n\\nvar dropdown_item_button_props = {\\n  disabled: {\\n    type: Boolean,\\n    default: false\\n  }\\n};\\n\\n/* harmony default export */ var dropdown_item_button = ({\\n  functional: true,\\n  props: dropdown_item_button_props,\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data,\\n        parent = _ref.parent,\\n        children = _ref.children;\\n\\n    return h('button', mergeData(data, {\\n      props: props,\\n      staticClass: 'dropdown-item',\\n      attrs: { role: 'menuitem', type: 'button', disabled: props.disabled },\\n      on: {\\n        click: function click(e) {\\n          parent.$root.$emit('clicked::link', e);\\n        }\\n      }\\n    }), children);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/dropdown/dropdown-header.js\\n\\n\\nvar dropdown_header_props = {\\n  id: {\\n    type: String,\\n    default: null\\n  },\\n  tag: {\\n    type: String,\\n    default: 'h6'\\n  }\\n};\\n\\n/* harmony default export */ var dropdown_header = ({\\n  functional: true,\\n  props: dropdown_header_props,\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data,\\n        children = _ref.children;\\n\\n    return h(props.tag, mergeData(data, {\\n      staticClass: 'dropdown-header',\\n      attrs: { id: props.id || null }\\n    }), children);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/dropdown/dropdown-divider.js\\n\\n\\nvar dropdown_divider_props = {\\n  tag: {\\n    type: String,\\n    default: 'div'\\n  }\\n};\\n\\n/* harmony default export */ var dropdown_divider = ({\\n  functional: true,\\n  props: dropdown_divider_props,\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data;\\n\\n    return h(props.tag, mergeData(data, {\\n      staticClass: 'dropdown-divider',\\n      attrs: { role: 'separator' }\\n    }));\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/dropdown/index.js\\n\\n\\n\\n\\n\\n\\n\\nvar dropdown_components = {\\n  bDropdown: components_dropdown_dropdown,\\n  bDd: components_dropdown_dropdown,\\n  bDropdownItem: dropdown_item,\\n  bDdItem: dropdown_item,\\n  bDropdownItemButton: dropdown_item_button,\\n  bDropdownItemBtn: dropdown_item_button,\\n  bDdItemButton: dropdown_item_button,\\n  bDdItemBtn: dropdown_item_button,\\n  bDropdownHeader: dropdown_header,\\n  bDdHeader: dropdown_header,\\n  bDropdownDivider: dropdown_divider,\\n  bDdDivider: dropdown_divider\\n};\\n\\nvar dropdown_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, dropdown_components);\\n  }\\n};\\n\\nvueUse(dropdown_VuePlugin);\\n\\n/* harmony default export */ var components_dropdown = (dropdown_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/embed/embed.js\\nfunction embed_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\n\\n\\nvar embed_props = {\\n  type: {\\n    type: String,\\n    default: 'iframe',\\n    validator: function validator(str) {\\n      return arrayIncludes(['iframe', 'embed', 'video', 'object', 'img', 'b-img', 'b-img-lazy'], str);\\n    }\\n  },\\n  tag: {\\n    type: String,\\n    default: 'div'\\n  },\\n  aspect: {\\n    type: String,\\n    default: '16by9'\\n  }\\n};\\n\\n/* harmony default export */ var embed_embed = ({\\n  functional: true,\\n  props: embed_props,\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data,\\n        children = _ref.children;\\n\\n    return h(props.tag, {\\n      ref: data.ref,\\n      staticClass: 'embed-responsive',\\n      class: embed_defineProperty({}, 'embed-responsive-' + props.aspect, Boolean(props.aspect))\\n    }, [h(props.type, mergeData(data, { ref: '', staticClass: 'embed-responsive-item' }), children)]);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/embed/index.js\\n\\n\\n\\nvar embed_components = {\\n  bEmbed: embed_embed\\n};\\n\\nvar embed_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, embed_components);\\n  }\\n};\\n\\nvueUse(embed_VuePlugin);\\n\\n/* harmony default export */ var components_embed = (embed_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/form/form.js\\n\\n\\nvar form_props = {\\n  id: {\\n    type: String,\\n    default: null\\n  },\\n  inline: {\\n    type: Boolean,\\n    default: false\\n  },\\n  novalidate: {\\n    type: Boolean,\\n    default: false\\n  },\\n  validated: {\\n    type: Boolean,\\n    default: false\\n  }\\n};\\n\\n/* harmony default export */ var form_form = ({\\n  functional: true,\\n  props: form_props,\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data,\\n        children = _ref.children;\\n\\n    return h('form', mergeData(data, {\\n      class: {\\n        'form-inline': props.inline,\\n        'was-validated': props.validated\\n      },\\n      attrs: {\\n        id: props.id,\\n        novalidate: props.novalidate\\n      }\\n    }), children);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/form/form-row.js\\n\\n\\n/* harmony default export */ var form_form_row = (form_row);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/form/form-text.js\\nfunction form_text_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\n\\nvar form_text_props = {\\n  id: {\\n    type: String,\\n    default: null\\n  },\\n  tag: {\\n    type: String,\\n    default: 'small'\\n  },\\n  textVariant: {\\n    type: String,\\n    default: 'muted'\\n  },\\n  inline: {\\n    type: Boolean,\\n    default: false\\n  }\\n};\\n\\n/* harmony default export */ var form_text = ({\\n  functional: true,\\n  props: form_text_props,\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data,\\n        children = _ref.children;\\n\\n    return h(props.tag, mergeData(data, {\\n      class: form_text_defineProperty({\\n        'form-text': !props.inline\\n      }, 'text-' + props.textVariant, Boolean(props.textVariant)),\\n      attrs: {\\n        id: props.id\\n      }\\n    }), children);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/form/form-invalid-feedback.js\\n\\n\\nvar form_invalid_feedback_props = {\\n  id: {\\n    type: String,\\n    default: null\\n  },\\n  tag: {\\n    type: String,\\n    default: 'div'\\n  },\\n  forceShow: {\\n    type: Boolean,\\n    default: false\\n  }\\n};\\n\\n/* harmony default export */ var form_invalid_feedback = ({\\n  functional: true,\\n  props: form_invalid_feedback_props,\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data,\\n        children = _ref.children;\\n\\n    return h(props.tag, mergeData(data, {\\n      staticClass: 'invalid-feedback',\\n      class: { 'd-block': props.forceShow },\\n      attrs: { id: props.id }\\n    }), children);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/form/form-valid-feedback.js\\n\\n\\nvar form_valid_feedback_props = {\\n  id: {\\n    type: String,\\n    default: null\\n  },\\n  tag: {\\n    type: String,\\n    default: 'div'\\n  },\\n  forceShow: {\\n    type: Boolean,\\n    default: false\\n  }\\n};\\n\\n/* harmony default export */ var form_valid_feedback = ({\\n  functional: true,\\n  props: form_valid_feedback_props,\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data,\\n        children = _ref.children;\\n\\n    return h(props.tag, mergeData(data, {\\n      staticClass: 'valid-feedback',\\n      class: { 'd-block': props.forceShow },\\n      attrs: { id: props.id }\\n    }), children);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/form/index.js\\n\\n\\n\\n\\n\\n\\n\\nvar form_components = {\\n  bForm: form_form,\\n  bFormRow: form_form_row,\\n  bFormText: form_text,\\n  bFormInvalidFeedback: form_invalid_feedback,\\n  bFormFeedback: form_invalid_feedback,\\n  bFormValidFeedback: form_valid_feedback\\n};\\n\\nvar form_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, form_components);\\n  }\\n};\\n\\nvueUse(form_VuePlugin);\\n\\n/* harmony default export */ var components_form = (form_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/mixins/form-state.js\\n/* Form control contextual state class computation\\n *\\n * Returned class is either 'is-valid' or 'is-invalid' based on the 'state' prop\\n * state can be one of five values:\\n *  - true or 'valid' for is-valid\\n *  - false or 'invalid' for is-invalid\\n *  - null (or empty string) for no contextual state\\n */\\n\\n/* harmony default export */ var form_state = ({\\n  props: {\\n    state: {\\n      // true/'valid', false/'invalid', '',null\\n      type: [Boolean, String],\\n      default: null\\n    }\\n  },\\n  computed: {\\n    computedState: function computedState() {\\n      var state = this.state;\\n      if (state === true || state === 'valid') {\\n        return true;\\n      } else if (state === false || state === 'invalid') {\\n        return false;\\n      }\\n      return null;\\n    },\\n    stateClass: function stateClass() {\\n      var state = this.computedState;\\n      if (state === true) {\\n        return 'is-valid';\\n      } else if (state === false) {\\n        return 'is-invalid';\\n      }\\n      return null;\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/form-group/form-group.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// Selector for finding firt input in the form-group\\nvar SELECTOR = 'input:not(:disabled),textarea:not(:disabled),select:not(:disabled)';\\n\\n/* harmony default export */ var form_group = ({\\n  mixins: [mixins_id, form_state],\\n  components: { bFormRow: form_row, bFormText: form_text, bFormInvalidFeedback: form_invalid_feedback, bFormValidFeedback: form_valid_feedback },\\n  render: function render(h) {\\n    var $slots = this.$slots;\\n\\n    // Label / Legend\\n    var legend = h(false);\\n    if (this.hasLabel) {\\n      var children = $slots['label'];\\n      var legendTag = this.labelFor ? 'label' : 'legend';\\n      var legendDomProps = children ? {} : { innerHTML: this.label };\\n      var legendAttrs = { id: this.labelId, for: this.labelFor || null };\\n      var legendClick = this.labelFor || this.labelSrOnly ? {} : { click: this.legendClick };\\n      if (this.horizontal) {\\n        // Horizontal layout with label\\n        if (this.labelSrOnly) {\\n          // SR Only we wrap label/legend in a div to preserve layout\\n          children = h(legendTag, { class: ['sr-only'], attrs: legendAttrs, domProps: legendDomProps }, children);\\n          legend = h('div', { class: this.labelLayoutClasses }, [children]);\\n        } else {\\n          legend = h(legendTag, {\\n            class: [this.labelLayoutClasses, this.labelClasses],\\n            attrs: legendAttrs,\\n            domProps: legendDomProps,\\n            on: legendClick\\n          }, children);\\n        }\\n      } else {\\n        // Vertical layout with label\\n        legend = h(legendTag, {\\n          class: this.labelSrOnly ? ['sr-only'] : this.labelClasses,\\n          attrs: legendAttrs,\\n          domProps: legendDomProps,\\n          on: legendClick\\n        }, children);\\n      }\\n    } else if (this.horizontal) {\\n      // No label but has horizontal layout, so we need a spacer element for layout\\n      legend = h('div', { class: this.labelLayoutClasses });\\n    }\\n\\n    // Invalid feeback text (explicitly hidden if state is valid)\\n    var invalidFeedback = h(false);\\n    if (this.hasInvalidFeedback) {\\n      var domProps = {};\\n      if (!$slots['invalid-feedback'] && !$slots['feedback']) {\\n        domProps = { innerHTML: this.invalidFeedback || this.feedback || '' };\\n      }\\n      invalidFeedback = h('b-form-invalid-feedback', {\\n        props: {\\n          id: this.invalidFeedbackId,\\n          forceShow: this.computedState === false\\n        },\\n        attrs: {\\n          role: 'alert',\\n          'aria-live': 'assertive',\\n          'aria-atomic': 'true'\\n        },\\n        domProps: domProps\\n      }, $slots['invalid-feedback'] || $slots['feedback']);\\n    }\\n\\n    // Valid feeback text (explicitly hidden if state is invalid)\\n    var validFeedback = h(false);\\n    if (this.hasValidFeedback) {\\n      var _domProps = $slots['valid-feedback'] ? {} : { innerHTML: this.validFeedback || '' };\\n      validFeedback = h('b-form-valid-feedback', {\\n        props: {\\n          id: this.validFeedbackId,\\n          forceShow: this.computedState === true\\n        },\\n        attrs: {\\n          role: 'alert',\\n          'aria-live': 'assertive',\\n          'aria-atomic': 'true'\\n        },\\n        domProps: _domProps\\n      }, $slots['valid-feedback']);\\n    }\\n\\n    // Form help text (description)\\n    var description = h(false);\\n    if (this.hasDescription) {\\n      var _domProps2 = $slots['description'] ? {} : { innerHTML: this.description || '' };\\n      description = h('b-form-text', { attrs: { id: this.descriptionId }, domProps: _domProps2 }, $slots['description']);\\n    }\\n\\n    // Build content layout\\n    var content = h('div', {\\n      ref: 'content',\\n      class: this.inputLayoutClasses,\\n      attrs: this.labelFor ? {} : { role: 'group', 'aria-labelledby': this.labelId }\\n    }, [$slots['default'], invalidFeedback, validFeedback, description]);\\n\\n    // Generate main form-group wrapper\\n    return h(this.labelFor ? 'div' : 'fieldset', {\\n      class: this.groupClasses,\\n      attrs: {\\n        id: this.safeId(),\\n        disabled: this.disabled,\\n        role: 'group',\\n        'aria-invalid': this.computedState === false ? 'true' : null,\\n        'aria-labelledby': this.labelId,\\n        'aria-describedby': this.labelFor ? null : this.describedByIds\\n      }\\n    }, this.horizontal ? [h('b-form-row', {}, [legend, content])] : [legend, content]);\\n  },\\n\\n  props: {\\n    horizontal: {\\n      type: Boolean,\\n      default: false\\n    },\\n    labelCols: {\\n      type: [Number, String],\\n      default: 3,\\n      validator: function validator(value) {\\n        if (Number(value) >= 1 && Number(value) <= 11) {\\n          return true;\\n        }\\n        utils_warn('b-form-group: label-cols must be a value between 1 and 11');\\n        return false;\\n      }\\n    },\\n    breakpoint: {\\n      type: String,\\n      default: 'sm'\\n    },\\n    labelTextAlign: {\\n      type: String,\\n      default: null\\n    },\\n    label: {\\n      type: String,\\n      default: null\\n    },\\n    labelFor: {\\n      type: String,\\n      default: null\\n    },\\n    labelSize: {\\n      type: String,\\n      default: null\\n    },\\n    labelSrOnly: {\\n      type: Boolean,\\n      default: false\\n    },\\n    labelClass: {\\n      type: [String, Array],\\n      default: null\\n    },\\n    description: {\\n      type: String,\\n      default: null\\n    },\\n    invalidFeedback: {\\n      type: String,\\n      default: null\\n    },\\n    feedback: {\\n      // Deprecated in favor of invalid-feedback\\n      type: String,\\n      default: null\\n    },\\n    validFeedback: {\\n      type: String,\\n      default: null\\n    },\\n    validated: {\\n      type: Boolean,\\n      default: false\\n    }\\n  },\\n  computed: {\\n    groupClasses: function groupClasses() {\\n      return ['b-form-group', 'form-group', this.validated ? 'was-validated' : null, this.stateClass];\\n    },\\n    labelClasses: function labelClasses() {\\n      return ['col-form-label', this.labelSize ? 'col-form-label-' + this.labelSize : null, this.labelTextAlign ? 'text-' + this.labelTextAlign : null, this.horizontal ? null : 'pt-0', this.labelClass];\\n    },\\n    labelLayoutClasses: function labelLayoutClasses() {\\n      return [this.horizontal ? 'col-' + this.breakpoint + '-' + this.labelCols : null];\\n    },\\n    inputLayoutClasses: function inputLayoutClasses() {\\n      return [this.horizontal ? 'col-' + this.breakpoint + '-' + (12 - Number(this.labelCols)) : null];\\n    },\\n    hasLabel: function hasLabel() {\\n      return this.label || this.$slots['label'];\\n    },\\n    hasDescription: function hasDescription() {\\n      return this.description || this.$slots['description'];\\n    },\\n    hasInvalidFeedback: function hasInvalidFeedback() {\\n      if (this.computedState === true) {\\n        // If the form-group state is explicityly valid, we return false\\n        return false;\\n      }\\n      return this.invalidFeedback || this.feedback || this.$slots['invalid-feedback'] || this.$slots['feedback'];\\n    },\\n    hasValidFeedback: function hasValidFeedback() {\\n      if (this.computedState === false) {\\n        // If the form-group state is explicityly invalid, we return false\\n        return false;\\n      }\\n      return this.validFeedback || this.$slots['valid-feedback'];\\n    },\\n    labelId: function labelId() {\\n      return this.hasLabel ? this.safeId('_BV_label_') : null;\\n    },\\n    descriptionId: function descriptionId() {\\n      return this.hasDescription ? this.safeId('_BV_description_') : null;\\n    },\\n    invalidFeedbackId: function invalidFeedbackId() {\\n      return this.hasInvalidFeedback ? this.safeId('_BV_feedback_invalid_') : null;\\n    },\\n    validFeedbackId: function validFeedbackId() {\\n      return this.hasValidFeedback ? this.safeId('_BV_feedback_valid_') : null;\\n    },\\n    describedByIds: function describedByIds() {\\n      return [this.descriptionId, this.invalidFeedbackId, this.validFeedbackId].filter(function (i) {\\n        return i;\\n      }).join(' ') || null;\\n    }\\n  },\\n  watch: {\\n    describedByIds: function describedByIds(add, remove) {\\n      if (add !== remove) {\\n        this.setInputDescribedBy(add, remove);\\n      }\\n    }\\n  },\\n  methods: {\\n    legendClick: function legendClick(evt) {\\n      var tagName = evt.target ? evt.target.tagName : '';\\n      if (/^(input|select|textarea|label)$/i.test(tagName)) {\\n        // If clicked an input inside legend, we just let the default happen\\n        return;\\n      }\\n      // Focus the first non-disabled visible input when the legend element is clicked\\n      var inputs = dom_selectAll(SELECTOR, this.$refs.content).filter(isVisible);\\n      if (inputs[0] && inputs[0].focus) {\\n        inputs[0].focus();\\n      }\\n    },\\n    setInputDescribedBy: function setInputDescribedBy(add, remove) {\\n      // Sets the `aria-describedby` attribute on the input if label-for is set.\\n      // Optionally accepts a string of IDs to remove as the second parameter\\n      if (this.labelFor && typeof document !== 'undefined') {\\n        var input = dom_select('#' + this.labelFor, this.$refs.content);\\n        if (input) {\\n          var adb = 'aria-describedby';\\n          var ids = (getAttr(input, adb) || '').split(/\\\\s+/);\\n          remove = (remove || '').split(/\\\\s+/);\\n          // Update ID list, preserving any original IDs\\n          ids = ids.filter(function (id) {\\n            return remove.indexOf(id) === -1;\\n          }).concat(add || '').join(' ').trim();\\n          if (ids) {\\n            setAttr(input, adb, ids);\\n          } else {\\n            removeAttr(input, adb);\\n          }\\n        }\\n      }\\n    }\\n  },\\n  mounted: function mounted() {\\n    var _this = this;\\n\\n    this.$nextTick(function () {\\n      // Set the adia-describedby IDs on the input specified by label-for\\n      // We do this in a nextTick to ensure the children have finished rendering\\n      _this.setInputDescribedBy(_this.describedByIds);\\n    });\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/form-group/index.js\\n\\n\\n\\nvar form_group_components = {\\n  bFormGroup: form_group,\\n  bFormFieldset: form_group\\n};\\n\\nvar form_group_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, form_group_components);\\n  }\\n};\\n\\nvueUse(form_group_VuePlugin);\\n\\n/* harmony default export */ var components_form_group = (form_group_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/mixins/form-radio-check.js\\n/*\\n * form-radio & form-check mixin\\n *\\n */\\n\\n/* harmony default export */ var form_radio_check = ({\\n  data: function data() {\\n    return {\\n      localChecked: this.checked,\\n      hasFocus: false\\n    };\\n  },\\n\\n  model: {\\n    prop: 'checked',\\n    event: 'input'\\n  },\\n  props: {\\n    value: {},\\n    checked: {\\n      // This is the model, except when in group mode\\n    },\\n    buttonVariant: {\\n      // Only applicable when rendered with button style\\n      type: String,\\n      default: null\\n    }\\n  },\\n  computed: {\\n    computedLocalChecked: {\\n      get: function get() {\\n        if (this.is_Child) {\\n          return this.$parent.localChecked;\\n        } else {\\n          return this.localChecked;\\n        }\\n      },\\n      set: function set(val) {\\n        if (this.is_Child) {\\n          this.$parent.localChecked = val;\\n        } else {\\n          this.localChecked = val;\\n        }\\n      }\\n    },\\n    is_Child: function is_Child() {\\n      return Boolean(this.$parent && this.$parent.is_RadioCheckGroup);\\n    },\\n    is_Disabled: function is_Disabled() {\\n      // Child can be disabled while parent isn't\\n      return Boolean(this.is_Child ? this.$parent.disabled || this.disabled : this.disabled);\\n    },\\n    is_Required: function is_Required() {\\n      return Boolean(this.is_Child ? this.$parent.required : this.required);\\n    },\\n    is_Plain: function is_Plain() {\\n      return Boolean(this.is_Child ? this.$parent.plain : this.plain);\\n    },\\n    is_Custom: function is_Custom() {\\n      return !this.is_Plain;\\n    },\\n    get_Size: function get_Size() {\\n      return this.is_Child ? this.$parent.size : this.size;\\n    },\\n    get_State: function get_State() {\\n      // This is a tri-state prop (true, false, null)\\n      if (this.is_Child && typeof this.$parent.get_State === 'boolean') {\\n        return this.$parent.get_State;\\n      }\\n      return this.computedState;\\n    },\\n    get_StateClass: function get_StateClass() {\\n      // This is a tri-state prop (true, false, null)\\n      return typeof this.get_State === 'boolean' ? this.get_State ? 'is-valid' : 'is-invalid' : '';\\n    },\\n    is_Stacked: function is_Stacked() {\\n      return Boolean(this.is_Child && this.$parent.stacked);\\n    },\\n    is_Inline: function is_Inline() {\\n      return !this.is_Stacked;\\n    },\\n    is_ButtonMode: function is_ButtonMode() {\\n      return Boolean(this.is_Child && this.$parent.buttons);\\n    },\\n    get_ButtonVariant: function get_ButtonVariant() {\\n      // Local variant trumps parent variant\\n      return this.buttonVariant || (this.is_Child ? this.$parent.buttonVariant : null) || 'secondary';\\n    },\\n    get_Name: function get_Name() {\\n      return (this.is_Child ? this.$parent.name || this.$parent.safeId() : this.name) || null;\\n    },\\n    buttonClasses: function buttonClasses() {\\n      // Same for radio & check\\n      return ['btn', 'btn-' + this.get_ButtonVariant, this.get_Size ? 'btn-' + this.get_Size : '',\\n      // 'disabled' class makes \\\"button\\\" look disabled\\n      this.is_Disabled ? 'disabled' : '',\\n      // 'active' class makes \\\"button\\\" look pressed\\n      this.is_Checked ? 'active' : '',\\n      // Focus class makes button look focused\\n      this.hasFocus ? 'focus' : ''];\\n    }\\n  },\\n  methods: {\\n    handleFocus: function handleFocus(evt) {\\n      // When in buttons mode, we need to add 'focus' class to label when radio focused\\n      if (this.is_ButtonMode && evt.target) {\\n        if (evt.type === 'focus') {\\n          this.hasFocus = true;\\n        } else if (evt.type === 'blur') {\\n          this.hasFocus = false;\\n        }\\n      }\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/mixins/form.js\\n/* harmony default export */ var mixins_form = ({\\n  props: {\\n    name: {\\n      type: String\\n    },\\n    id: {\\n      type: String\\n    },\\n    disabled: {\\n      type: Boolean\\n    },\\n    required: {\\n      type: Boolean,\\n      default: false\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/mixins/form-size.js\\n/* harmony default export */ var form_size = ({\\n  props: {\\n    size: {\\n      type: String,\\n      default: null\\n    }\\n  },\\n  computed: {\\n    sizeFormClass: function sizeFormClass() {\\n      return [this.size ? \\\"form-control-\\\" + this.size : null];\\n    },\\n    sizeBtnClass: function sizeBtnClass() {\\n      return [this.size ? \\\"btn-\\\" + this.size : null];\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/mixins/form-custom.js\\n/* harmony default export */ var form_custom = ({\\n  computed: {\\n    custom: function custom() {\\n      return !this.plain;\\n    }\\n  },\\n  props: {\\n    plain: {\\n      type: Boolean,\\n      default: false\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/utils/loose-equal.js\\nvar loose_equal_typeof = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\n\\n\\n\\n/**\\n * Quick object check - this is primarily used to tell\\n * Objects from primitive values when we know the value\\n * is a JSON-compliant type.\\n */\\nfunction isObject(obj) {\\n  return obj !== null && (typeof obj === 'undefined' ? 'undefined' : loose_equal_typeof(obj)) === 'object';\\n}\\n\\n/**\\n * Check if two values are loosely equal - that is,\\n * if they are plain objects, do they have the same shape?\\n * Returns boolean true or false\\n */\\nfunction looseEqual(a, b) {\\n  if (a === b) return true;\\n  var isObjectA = isObject(a);\\n  var isObjectB = isObject(b);\\n  if (isObjectA && isObjectB) {\\n    try {\\n      var isArrayA = isArray(a);\\n      var isArrayB = isArray(b);\\n      if (isArrayA && isArrayB) {\\n        return a.length === b.length && a.every(function (e, i) {\\n          return looseEqual(e, b[i]);\\n        });\\n      } else if (!isArrayA && !isArrayB) {\\n        var keysA = keys(a);\\n        var keysB = keys(b);\\n        return keysA.length === keysB.length && keysA.every(function (key) {\\n          return looseEqual(a[key], b[key]);\\n        });\\n      } else {\\n        return false;\\n      }\\n    } catch (e) {\\n      return false;\\n    }\\n  } else if (!isObjectA && !isObjectB) {\\n    return String(a) === String(b);\\n  } else {\\n    return false;\\n  }\\n}\\n\\n/* harmony default export */ var loose_equal = (looseEqual);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/form-checkbox/form-checkbox.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/* harmony default export */ var form_checkbox = ({\\n  mixins: [mixins_id, form_radio_check, mixins_form, form_size, form_state, form_custom],\\n  render: function render(h) {\\n    var _this = this;\\n\\n    var input = h('input', {\\n      ref: 'check',\\n      class: [this.is_ButtonMode ? '' : this.is_Plain ? 'form-check-input' : 'custom-control-input', this.get_StateClass],\\n      directives: [{\\n        name: 'model',\\n        rawName: 'v-model',\\n        value: this.computedLocalChecked,\\n        expression: 'computedLocalChecked'\\n      }],\\n      attrs: {\\n        id: this.safeId(),\\n        type: 'checkbox',\\n        name: this.get_Name,\\n        disabled: this.is_Disabled,\\n        required: this.is_Required,\\n        autocomplete: 'off',\\n        'true-value': this.value,\\n        'false-value': this.uncheckedValue,\\n        'aria-required': this.is_Required ? 'true' : null\\n      },\\n      domProps: { value: this.value, checked: this.is_Checked },\\n      on: {\\n        focus: this.handleFocus,\\n        blur: this.handleFocus,\\n        change: this.emitChange,\\n        __c: function __c(evt) {\\n          var $$a = _this.computedLocalChecked;\\n          var $$el = evt.target;\\n          if (isArray($$a)) {\\n            // Multiple checkbox\\n            var $$v = _this.value;\\n            var $$i = _this._i($$a, $$v); // Vue's 'loose' Array.indexOf\\n            if ($$el.checked) {\\n              // Append value to array\\n              $$i < 0 && (_this.computedLocalChecked = $$a.concat([$$v]));\\n            } else {\\n              // Remove value from array\\n              $$i > -1 && (_this.computedLocalChecked = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));\\n            }\\n          } else {\\n            // Single checkbox\\n            _this.computedLocalChecked = $$el.checked ? _this.value : _this.uncheckedValue;\\n          }\\n        }\\n      }\\n    });\\n\\n    var description = h(this.is_ButtonMode ? 'span' : 'label', {\\n      class: this.is_ButtonMode ? null : this.is_Plain ? 'form-check-label' : 'custom-control-label',\\n      attrs: { for: this.is_ButtonMode ? null : this.safeId() }\\n    }, [this.$slots.default]);\\n\\n    if (!this.is_ButtonMode) {\\n      return h('div', {\\n        class: [this.is_Plain ? 'form-check' : this.labelClasses, { 'form-check-inline': this.is_Plain && !this.is_Stacked }, { 'custom-control-inline': !this.is_Plain && !this.is_Stacked }]\\n      }, [input, description]);\\n    } else {\\n      return h('label', { class: [this.buttonClasses] }, [input, description]);\\n    }\\n  },\\n\\n  props: {\\n    value: {\\n      default: true\\n    },\\n    uncheckedValue: {\\n      // Not applicable in multi-check mode\\n      default: false\\n    },\\n    indeterminate: {\\n      // Not applicable in multi-check mode\\n      type: Boolean,\\n      default: false\\n    }\\n  },\\n  computed: {\\n    labelClasses: function labelClasses() {\\n      return ['custom-control', 'custom-checkbox', this.get_Size ? 'form-control-' + this.get_Size : '', this.get_StateClass];\\n    },\\n    is_Checked: function is_Checked() {\\n      var checked = this.computedLocalChecked;\\n      if (isArray(checked)) {\\n        for (var i = 0; i < checked.length; i++) {\\n          if (loose_equal(checked[i], this.value)) {\\n            return true;\\n          }\\n        }\\n        return false;\\n      } else {\\n        return loose_equal(checked, this.value);\\n      }\\n    }\\n  },\\n  watch: {\\n    computedLocalChecked: function computedLocalChecked(newVal, oldVal) {\\n      if (loose_equal(newVal, oldVal)) {\\n        return;\\n      }\\n      this.$emit('input', newVal);\\n      this.$emit('update:indeterminate', this.$refs.check.indeterminate);\\n    },\\n    checked: function checked(newVal, oldVal) {\\n      if (this.is_Child || loose_equal(newVal, oldVal)) {\\n        return;\\n      }\\n      this.computedLocalChecked = newVal;\\n    },\\n    indeterminate: function indeterminate(newVal, oldVal) {\\n      this.setIndeterminate(newVal);\\n    }\\n  },\\n  methods: {\\n    emitChange: function emitChange(_ref) {\\n      var checked = _ref.target.checked;\\n\\n      // Change event is only fired via user interaction\\n      // And we only emit the value of this checkbox\\n      if (this.is_Child || isArray(this.computedLocalChecked)) {\\n        this.$emit('change', checked ? this.value : null);\\n        if (this.is_Child) {\\n          // If we are a child of form-checkbbox-group, emit change on parent\\n          this.$parent.$emit('change', this.computedLocalChecked);\\n        }\\n      } else {\\n        // Single radio mode supports unchecked value\\n        this.$emit('change', checked ? this.value : this.uncheckedValue);\\n      }\\n      this.$emit('update:indeterminate', this.$refs.check.indeterminate);\\n    },\\n    setIndeterminate: function setIndeterminate(state) {\\n      // Indeterminate only supported in single checkbox mode\\n      if (this.is_Child || isArray(this.computedLocalChecked)) {\\n        return;\\n      }\\n      this.$refs.check.indeterminate = state;\\n      // Emit update event to prop\\n      this.$emit('update:indeterminate', this.$refs.check.indeterminate);\\n    }\\n  },\\n  mounted: function mounted() {\\n    // Set initial indeterminate state\\n    this.setIndeterminate(this.indeterminate);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/mixins/form-options.js\\n\\n\\n\\nfunction form_options_isObject(obj) {\\n  return obj && {}.toString.call(obj) === '[object Object]';\\n}\\n\\n/* harmony default export */ var form_options = ({\\n\\n  props: {\\n    options: {\\n      type: [Array, Object],\\n      default: function _default() {\\n        return [];\\n      }\\n    },\\n    valueField: {\\n      type: String,\\n      default: 'value'\\n    },\\n    textField: {\\n      type: String,\\n      default: 'text'\\n    },\\n    disabledField: {\\n      type: String,\\n      default: 'disabled'\\n    }\\n  },\\n  computed: {\\n    formOptions: function formOptions() {\\n      var options = this.options;\\n\\n      var valueField = this.valueField;\\n      var textField = this.textField;\\n      var disabledField = this.disabledField;\\n\\n      if (isArray(options)) {\\n        // Normalize flat-ish arrays to Array of Objects\\n        return options.map(function (option) {\\n          if (form_options_isObject(option)) {\\n            return {\\n              value: option[valueField],\\n              text: String(option[textField]),\\n              disabled: option[disabledField] || false\\n            };\\n          }\\n          return {\\n            value: option,\\n            text: String(option),\\n            disabled: false\\n          };\\n        });\\n      } else {\\n        // options is Object\\n        // Normalize Objects to Array of Objects\\n        return keys(options).map(function (key) {\\n          var option = options[key] || {};\\n          if (form_options_isObject(option)) {\\n            var value = option[valueField];\\n            var text = option[textField];\\n            return {\\n              value: typeof value === 'undefined' ? key : value,\\n              text: typeof text === 'undefined' ? key : String(text),\\n              disabled: option[disabledField] || false\\n            };\\n          }\\n          return {\\n            value: key,\\n            text: String(option),\\n            disabled: false\\n          };\\n        });\\n      }\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/form-checkbox/form-checkbox-group.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/* harmony default export */ var form_checkbox_group = ({\\n  mixins: [mixins_id, mixins_form, form_size, form_state, form_custom, form_options],\\n  components: { bFormCheckbox: form_checkbox },\\n  render: function render(h) {\\n    var _this = this;\\n\\n    var $slots = this.$slots;\\n\\n    var checks = this.formOptions.map(function (option, idx) {\\n      return h('b-form-checkbox', {\\n        key: 'check_' + idx + '_opt',\\n        props: {\\n          id: _this.safeId('_BV_check_' + idx + '_opt_'),\\n          name: _this.name,\\n          value: option.value,\\n          required: _this.name && _this.required,\\n          disabled: option.disabled\\n        }\\n      }, [h('span', { domProps: { innerHTML: option.text } })]);\\n    });\\n    return h('div', {\\n      class: this.groupClasses,\\n      attrs: {\\n        id: this.safeId(),\\n        role: 'group',\\n        tabindex: '-1',\\n        'aria-required': this.required ? 'true' : null,\\n        'aria-invalid': this.computedAriaInvalid\\n      }\\n    }, [$slots.first, checks, $slots.default]);\\n  },\\n  data: function data() {\\n    return {\\n      localChecked: this.checked || [],\\n      // Flag for children\\n      is_RadioCheckGroup: true\\n    };\\n  },\\n\\n  model: {\\n    prop: 'checked',\\n    event: 'input'\\n  },\\n  props: {\\n    checked: {\\n      type: [String, Number, Object, Array, Boolean],\\n      default: null\\n    },\\n    validated: {\\n      type: Boolean,\\n      default: false\\n    },\\n    ariaInvalid: {\\n      type: [Boolean, String],\\n      default: false\\n    },\\n    stacked: {\\n      type: Boolean,\\n      default: false\\n    },\\n    buttons: {\\n      // Render as button style\\n      type: Boolean,\\n      default: false\\n    },\\n    buttonVariant: {\\n      // Only applicable when rendered with button style\\n      type: String,\\n      default: 'secondary'\\n    }\\n  },\\n  watch: {\\n    checked: function checked(newVal, oldVal) {\\n      this.localChecked = this.checked;\\n    },\\n    localChecked: function localChecked(newVal, oldVal) {\\n      this.$emit('input', newVal);\\n    }\\n  },\\n  computed: {\\n    groupClasses: function groupClasses() {\\n      if (this.buttons) {\\n        return ['btn-group-toggle', this.stacked ? 'btn-group-vertical' : 'btn-group', this.size ? 'btn-group-' + this.size : '', this.validated ? 'was-validated' : ''];\\n      }\\n      return [this.sizeFormClass, this.stacked && this.custom ? 'custom-controls-stacked' : '', this.validated ? 'was-validated' : ''];\\n    },\\n    computedAriaInvalid: function computedAriaInvalid() {\\n      if (this.ariaInvalid === true || this.ariaInvalid === 'true' || this.ariaInvalid === '') {\\n        return 'true';\\n      }\\n      return this.get_State === false ? 'true' : null;\\n    },\\n    get_State: function get_State() {\\n      // Child radios sniff this value\\n      return this.computedState;\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/form-checkbox/index.js\\n\\n\\n\\n\\nvar form_checkbox_components = {\\n  bFormCheckbox: form_checkbox,\\n  bCheckbox: form_checkbox,\\n  bCheck: form_checkbox,\\n  bFormCheckboxGroup: form_checkbox_group,\\n  bCheckboxGroup: form_checkbox_group,\\n  bCheckGroup: form_checkbox_group\\n};\\n\\nvar form_checkbox_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, form_checkbox_components);\\n  }\\n};\\n\\nvueUse(form_checkbox_VuePlugin);\\n\\n/* harmony default export */ var components_form_checkbox = (form_checkbox_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/form-radio/form-radio.js\\n\\n\\n\\n\\n\\n\\n/* harmony default export */ var form_radio = ({\\n  mixins: [mixins_id, form_radio_check, mixins_form, form_state],\\n  render: function render(h) {\\n    var _this = this;\\n\\n    var input = h('input', {\\n      ref: 'radio',\\n      class: [this.is_ButtonMode ? '' : this.is_Plain ? 'form-check-input' : 'custom-control-input', this.get_StateClass],\\n      directives: [{\\n        name: 'model',\\n        rawName: 'v-model',\\n        value: this.computedLocalChecked,\\n        expression: 'computedLocalChecked'\\n      }],\\n      attrs: {\\n        id: this.safeId(),\\n        type: 'radio',\\n        name: this.get_Name,\\n        required: this.get_Name && this.is_Required,\\n        disabled: this.is_Disabled,\\n        autocomplete: 'off'\\n      },\\n      domProps: {\\n        value: this.value,\\n        checked: loose_equal(this.computedLocalChecked, this.value)\\n      },\\n      on: {\\n        focus: this.handleFocus,\\n        blur: this.handleFocus,\\n        change: this.emitChange,\\n        __c: function __c(evt) {\\n          _this.computedLocalChecked = _this.value;\\n        }\\n      }\\n    });\\n\\n    var description = h(this.is_ButtonMode ? 'span' : 'label', {\\n      class: this.is_ButtonMode ? null : this.is_Plain ? 'form-check-label' : 'custom-control-label',\\n      attrs: { for: this.is_ButtonMode ? null : this.safeId() }\\n    }, [this.$slots.default]);\\n\\n    if (!this.is_ButtonMode) {\\n      return h('div', {\\n        class: [this.is_Plain ? 'form-check' : this.labelClasses, { 'form-check-inline': this.is_Plain && !this.is_Stacked }, { 'custom-control-inline': !this.is_Plain && !this.is_Stacked }]\\n      }, [input, description]);\\n    } else {\\n      return h('label', { class: [this.buttonClasses] }, [input, description]);\\n    }\\n  },\\n\\n  watch: {\\n    // Radio Groups can only have a single value, so our watchers are simple\\n    checked: function checked(newVal, oldVal) {\\n      this.computedLocalChecked = newVal;\\n    },\\n    computedLocalChceked: function computedLocalChceked(newVal, oldVal) {\\n      this.$emit('input', this.computedLocalChceked);\\n    }\\n  },\\n  computed: {\\n    is_Checked: function is_Checked() {\\n      return loose_equal(this.value, this.computedLocalChecked);\\n    },\\n    labelClasses: function labelClasses() {\\n      // Specific to radio\\n      return [this.get_Size ? 'form-control-' + this.get_Size : '', 'custom-control', 'custom-radio', this.get_StateClass];\\n    }\\n  },\\n  methods: {\\n    emitChange: function emitChange(_ref) {\\n      var checked = _ref.target.checked;\\n\\n      // Change is only emitted on user interaction\\n      this.$emit('change', checked ? this.value : null);\\n      // If this is a child of form-radio-group, we emit a change event on it as well\\n      if (this.is_Child) {\\n        this.$parent.$emit('change', this.computedLocalChecked);\\n      }\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/form-radio/form-radio-group.js\\n\\n\\n\\n\\n\\n\\n\\n\\n/* harmony default export */ var form_radio_group = ({\\n  mixins: [mixins_id, mixins_form, form_size, form_state, form_custom, form_options],\\n  components: { bFormRadio: form_radio },\\n  render: function render(h) {\\n    var _this = this;\\n\\n    var $slots = this.$slots;\\n\\n    var radios = this.formOptions.map(function (option, idx) {\\n      return h('b-form-radio', {\\n        key: 'radio_' + idx + '_opt',\\n        props: {\\n          id: _this.safeId('_BV_radio_' + idx + '_opt_'),\\n          name: _this.name,\\n          value: option.value,\\n          required: Boolean(_this.name && _this.required),\\n          disabled: option.disabled\\n        }\\n      }, [h('span', { domProps: { innerHTML: option.text } })]);\\n    });\\n    return h('div', {\\n      class: this.groupClasses,\\n      attrs: {\\n        id: this.safeId(),\\n        role: 'radiogroup',\\n        tabindex: '-1',\\n        'aria-required': this.required ? 'true' : null,\\n        'aria-invalid': this.computedAriaInvalid\\n      }\\n    }, [$slots.first, radios, $slots.default]);\\n  },\\n  data: function data() {\\n    return {\\n      localChecked: this.checked,\\n      // Flag for children\\n      is_RadioCheckGroup: true\\n    };\\n  },\\n\\n  model: {\\n    prop: 'checked',\\n    event: 'input'\\n  },\\n  props: {\\n    checked: {\\n      type: [String, Object, Number, Boolean],\\n      default: null\\n    },\\n    validated: {\\n      // Used for applying hte `was-validated` class to the group\\n      type: Boolean,\\n      default: false\\n    },\\n    ariaInvalid: {\\n      type: [Boolean, String],\\n      default: false\\n    },\\n    stacked: {\\n      type: Boolean,\\n      default: false\\n    },\\n    buttons: {\\n      // Render as button style\\n      type: Boolean,\\n      default: false\\n    },\\n    buttonVariant: {\\n      // Only applicable when rendered with button style\\n      type: String,\\n      default: 'secondary'\\n    }\\n  },\\n  watch: {\\n    checked: function checked(newVal, oldVal) {\\n      this.localChecked = this.checked;\\n    },\\n    localChecked: function localChecked(newVal, oldVal) {\\n      this.$emit('input', newVal);\\n    }\\n  },\\n  computed: {\\n    groupClasses: function groupClasses() {\\n      if (this.buttons) {\\n        return ['btn-group-toggle', this.stacked ? 'btn-group-vertical' : 'btn-group', this.size ? 'btn-group-' + this.size : '', this.validated ? 'was-validated' : ''];\\n      }\\n      return [this.sizeFormClass, this.stacked && this.custom ? 'custom-controls-stacked' : '', this.validated ? 'was-validated' : ''];\\n    },\\n    computedAriaInvalid: function computedAriaInvalid() {\\n      if (this.ariaInvalid === true || this.ariaInvalid === 'true' || this.ariaInvalid === '') {\\n        return 'true';\\n      }\\n      return this.get_State === false ? 'true' : null;\\n    },\\n    get_State: function get_State() {\\n      // Required by child radios\\n      return this.computedState;\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/form-radio/index.js\\n\\n\\n\\n\\nvar form_radio_components = {\\n  bFormRadio: form_radio,\\n  bRadio: form_radio,\\n  bFormRadioGroup: form_radio_group,\\n  bRadioGroup: form_radio_group\\n};\\n\\nvar form_radio_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, form_radio_components);\\n  }\\n};\\n\\nvueUse(form_radio_VuePlugin);\\n\\n/* harmony default export */ var components_form_radio = (form_radio_VuePlugin);\\n// EXTERNAL MODULE: ./node_modules/bootstrap-vue/es/components/form-input/form-input.css\\nvar form_input = __webpack_require__(23);\\n\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/form-input/form-input.js\\n\\n\\n\\n\\n\\n\\n// Import styles\\n\\n\\n// Valid supported input types\\nvar TYPES = ['text', 'password', 'email', 'number', 'url', 'tel', 'search', 'range', 'color', 'date', 'time', 'datetime', 'datetime-local', 'month', 'week'];\\n\\n/* harmony default export */ var form_input_form_input = ({\\n  mixins: [mixins_id, mixins_form, form_size, form_state],\\n  render: function render(h) {\\n    return h('input', {\\n      ref: 'input',\\n      class: this.inputClass,\\n      attrs: {\\n        id: this.safeId(),\\n        name: this.name,\\n        type: this.localType,\\n        disabled: this.disabled,\\n        required: this.required,\\n        readonly: this.readonly || this.plaintext,\\n        placeholder: this.placeholder,\\n        autocomplete: this.autocomplete || null,\\n        'aria-required': this.required ? 'true' : null,\\n        'aria-invalid': this.computedAriaInvalid,\\n        value: this.value\\n      },\\n      on: {\\n        input: this.onInput,\\n        change: this.onChange\\n      }\\n    });\\n  },\\n\\n  props: {\\n    value: {\\n      default: null\\n    },\\n    type: {\\n      type: String,\\n      default: 'text',\\n      validator: function validator(type) {\\n        return arrayIncludes(TYPES, type);\\n      }\\n    },\\n    ariaInvalid: {\\n      type: [Boolean, String],\\n      default: false\\n    },\\n    readonly: {\\n      type: Boolean,\\n      default: false\\n    },\\n    plaintext: {\\n      type: Boolean,\\n      default: false\\n    },\\n    autocomplete: {\\n      type: String,\\n      default: null\\n    },\\n    placeholder: {\\n      type: String,\\n      default: null\\n    },\\n    formatter: {\\n      type: Function\\n    },\\n    lazyFormatter: {\\n      type: Boolean,\\n      default: false\\n    }\\n  },\\n  computed: {\\n    localType: function localType() {\\n      // We only allow certain types\\n      return arrayIncludes(TYPES, this.type) ? this.type : 'text';\\n    },\\n    inputClass: function inputClass() {\\n      return [this.plaintext ? 'form-control-plaintext' : 'form-control', this.sizeFormClass, this.stateClass];\\n    },\\n    computedAriaInvalid: function computedAriaInvalid() {\\n      if (!this.ariaInvalid || this.ariaInvalid === 'false') {\\n        // this.ariaInvalid is null or false or 'false'\\n        return this.computedState === false ? 'true' : null;\\n      }\\n      if (this.ariaInvalid === true) {\\n        // User wants explicit aria-invalid=true\\n        return 'true';\\n      }\\n      // Most likely a string value (which could be 'true')\\n      return this.ariaInvalid;\\n    }\\n  },\\n  mounted: function mounted() {\\n    if (this.value) {\\n      var fValue = this.format(this.value, null);\\n      this.setValue(fValue);\\n    }\\n  },\\n\\n  watch: {\\n    value: function value(newVal) {\\n      if (this.lazyFormatter) {\\n        this.setValue(newVal);\\n      } else {\\n        var fValue = this.format(newVal, null);\\n        this.setValue(fValue);\\n      }\\n    }\\n  },\\n  methods: {\\n    format: function format(value, e) {\\n      if (this.formatter) {\\n        return this.formatter(value, e);\\n      }\\n      return value;\\n    },\\n    setValue: function setValue(value) {\\n      this.$emit('input', value);\\n      // When formatter removes last typed character, value of text input should update to formatted value\\n      this.$refs.input.value = value;\\n    },\\n    onInput: function onInput(evt) {\\n      var value = evt.target.value;\\n\\n      if (this.lazyFormatter) {\\n        this.setValue(value);\\n      } else {\\n        var fValue = this.format(value, evt);\\n        this.setValue(fValue);\\n      }\\n    },\\n    onChange: function onChange(evt) {\\n      var fValue = this.format(evt.target.value, evt);\\n      this.setValue(fValue);\\n      this.$emit('change', fValue);\\n    },\\n    focus: function focus() {\\n      if (!this.disabled) {\\n        this.$el.focus();\\n      }\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/form-input/index.js\\n\\n\\n\\nvar form_input_components = {\\n  bFormInput: form_input_form_input,\\n  bInput: form_input_form_input\\n};\\n\\nvar form_input_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, form_input_components);\\n  }\\n};\\n\\nvueUse(form_input_VuePlugin);\\n\\n/* harmony default export */ var components_form_input = (form_input_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/form-textarea/form-textarea.js\\n\\n\\n\\n\\n\\n/* harmony default export */ var form_textarea = ({\\n  mixins: [mixins_id, mixins_form, form_size, form_state],\\n  render: function render(h) {\\n    var _this = this;\\n\\n    return h('textarea', {\\n      ref: 'input',\\n      class: this.inputClass,\\n      style: this.inputStyle,\\n      directives: [{\\n        name: 'model',\\n        rawName: 'v-model',\\n        value: this.localValue,\\n        expression: 'localValue'\\n      }],\\n      domProps: { value: this.value },\\n      attrs: {\\n        id: this.safeId(),\\n        name: this.name,\\n        disabled: this.disabled,\\n        placeholder: this.placeholder,\\n        required: this.required,\\n        autocomplete: this.autocomplete || null,\\n        readonly: this.readonly || this.plaintext,\\n        rows: this.rowsCount,\\n        wrap: this.wrap || null,\\n        'aria-required': this.required ? 'true' : null,\\n        'aria-invalid': this.computedAriaInvalid\\n      },\\n      on: {\\n        input: function input(evt) {\\n          _this.localValue = evt.target.value;\\n        }\\n      }\\n    });\\n  },\\n  data: function data() {\\n    return {\\n      localValue: this.value\\n    };\\n  },\\n\\n  props: {\\n    value: {\\n      type: String,\\n      default: ''\\n    },\\n    ariaInvalid: {\\n      type: [Boolean, String],\\n      default: false\\n    },\\n    readonly: {\\n      type: Boolean,\\n      default: false\\n    },\\n    plaintext: {\\n      type: Boolean,\\n      default: false\\n    },\\n    autocomplete: {\\n      type: String,\\n      default: null\\n    },\\n    placeholder: {\\n      type: String,\\n      default: null\\n    },\\n    rows: {\\n      type: [Number, String],\\n      default: null\\n    },\\n    maxRows: {\\n      type: [Number, String],\\n      default: null\\n    },\\n    wrap: {\\n      // 'soft', 'hard' or 'off'. Browser default is 'soft'\\n      type: String,\\n      default: 'soft'\\n    },\\n    noResize: {\\n      type: Boolean,\\n      default: false\\n    }\\n  },\\n  computed: {\\n    rowsCount: function rowsCount() {\\n      // A better option could be based on https://codepen.io/vsync/pen/frudD\\n      // As linebreaks aren't added until the input is submitted\\n      var rows = parseInt(this.rows, 10) || 1;\\n      var maxRows = parseInt(this.maxRows, 10) || 0;\\n      var lines = (this.localValue || '').toString().split('\\\\n').length;\\n      return maxRows ? Math.min(maxRows, Math.max(rows, lines)) : Math.max(rows, lines);\\n    },\\n    inputClass: function inputClass() {\\n      return [this.plaintext ? 'form-control-plaintext' : 'form-control', this.sizeFormClass, this.stateClass];\\n    },\\n    inputStyle: function inputStyle() {\\n      // We set width 100% in plaintext mode to get around a shortcoming in bootstrap CSS\\n      // setting noResize to true will disable the ability for the user to resize the textarea\\n      return {\\n        width: this.plaintext ? '100%' : null,\\n        resize: this.noResize ? 'none' : null\\n      };\\n    },\\n    computedAriaInvalid: function computedAriaInvalid() {\\n      if (!this.ariaInvalid || this.ariaInvalid === 'false') {\\n        // this.ariaInvalid is null or false or 'false'\\n        return this.computedState === false ? 'true' : null;\\n      }\\n      if (this.ariaInvalid === true) {\\n        // User wants explicit aria-invalid=true\\n        return 'true';\\n      }\\n      // Most likely a string value (which could be the string 'true')\\n      return this.ariaInvalid;\\n    }\\n  },\\n  watch: {\\n    value: function value(newVal, oldVal) {\\n      // Update our localValue\\n      if (newVal !== oldVal) {\\n        this.localValue = newVal;\\n      }\\n    },\\n    localValue: function localValue(newVal, oldVal) {\\n      // update Parent value\\n      if (newVal !== oldVal) {\\n        this.$emit('input', newVal);\\n      }\\n    }\\n  },\\n  methods: {\\n    focus: function focus() {\\n      // For external handler that may want a focus method\\n      if (!this.disabled) {\\n        this.$el.focus();\\n      }\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/form-textarea/index.js\\n\\n\\n\\nvar form_textarea_components = {\\n  bFormTextarea: form_textarea,\\n  bTextarea: form_textarea\\n};\\n\\nvar form_textarea_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, form_textarea_components);\\n  }\\n};\\n\\nvueUse(form_textarea_VuePlugin);\\n\\n/* harmony default export */ var components_form_textarea = (form_textarea_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/form-file/form-file.js\\n\\n\\n\\n\\n\\n\\n/* harmony default export */ var form_file = ({\\n  mixins: [mixins_id, mixins_form, form_state, form_custom],\\n  render: function render(h) {\\n    // Form Input\\n    var input = h('input', {\\n      ref: 'input',\\n      class: [{\\n        'form-control-file': this.plain,\\n        'custom-file-input': this.custom,\\n        focus: this.custom && this.hasFocus\\n      }, this.stateClass],\\n      attrs: {\\n        type: 'file',\\n        id: this.safeId(),\\n        name: this.name,\\n        disabled: this.disabled,\\n        required: this.required,\\n        capture: this.capture || null,\\n        accept: this.accept || null,\\n        multiple: this.multiple,\\n        webkitdirectory: this.directory,\\n        'aria-required': this.required ? 'true' : null,\\n        'aria-describedby': this.plain ? null : this.safeId('_BV_file_control_')\\n      },\\n      on: {\\n        change: this.onFileChange,\\n        focusin: this.focusHandler,\\n        focusout: this.focusHandler\\n      }\\n    });\\n\\n    if (this.plain) {\\n      return input;\\n    }\\n\\n    // Overlay Labels\\n    var label = h('label', {\\n      class: ['custom-file-label', this.dragging ? 'dragging' : null],\\n      attrs: {\\n        id: this.safeId('_BV_file_control_')\\n      }\\n    }, this.selectLabel);\\n\\n    // Return rendered custom file input\\n    return h('div', {\\n      class: ['custom-file', 'b-form-file', this.stateClass],\\n      attrs: { id: this.safeId('_BV_file_outer_') },\\n      on: { dragover: this.dragover }\\n    }, [input, label]);\\n  },\\n  data: function data() {\\n    return {\\n      selectedFile: null,\\n      dragging: false,\\n      hasFocus: false\\n    };\\n  },\\n\\n  props: {\\n    accept: {\\n      type: String,\\n      default: ''\\n    },\\n    // Instruct input to capture from camera\\n    capture: {\\n      type: Boolean,\\n      default: false\\n    },\\n    placeholder: {\\n      type: String,\\n      default: undefined\\n    },\\n    multiple: {\\n      type: Boolean,\\n      default: false\\n    },\\n    directory: {\\n      type: Boolean,\\n      default: false\\n    },\\n    noTraverse: {\\n      type: Boolean,\\n      default: false\\n    },\\n    noDrop: {\\n      type: Boolean,\\n      default: false\\n    }\\n  },\\n  computed: {\\n    selectLabel: function selectLabel() {\\n      // No file choosen\\n      if (!this.selectedFile || this.selectedFile.length === 0) {\\n        return this.placeholder;\\n      }\\n\\n      // Multiple files\\n      if (this.multiple) {\\n        if (this.selectedFile.length === 1) {\\n          return this.selectedFile[0].name;\\n        }\\n        return this.selectedFile.map(function (file) {\\n          return file.name;\\n        }).join(', ');\\n      }\\n\\n      // Single file\\n      return this.selectedFile.name;\\n    }\\n  },\\n  watch: {\\n    selectedFile: function selectedFile(newVal, oldVal) {\\n      if (newVal === oldVal) {\\n        return;\\n      }\\n      if (!newVal && this.multiple) {\\n        this.$emit('input', []);\\n      } else {\\n        this.$emit('input', newVal);\\n      }\\n    }\\n  },\\n  methods: {\\n    focusHandler: function focusHandler(evt) {\\n      // Boostrap v4.beta doesn't have focus styling for custom file input\\n      // Firefox has a borked '[type=file]:focus ~ sibling' selector issue,\\n      // So we add a 'focus' class to get around these \\\"bugs\\\"\\n      if (this.plain || evt.type === 'focusout') {\\n        this.hasFocus = false;\\n      } else {\\n        // Add focus styling for custom file input\\n        this.hasFocus = true;\\n      }\\n    },\\n    reset: function reset() {\\n      try {\\n        // Wrapped in try in case IE < 11 craps out\\n        this.$refs.input.value = '';\\n      } catch (e) {}\\n      // IE < 11 doesn't support setting input.value to '' or null\\n      // So we use this little extra hack to reset the value, just in case\\n      // This also appears to work on modern browsers as well.\\n      this.$refs.input.type = '';\\n      this.$refs.input.type = 'file';\\n      this.selectedFile = this.multiple ? [] : null;\\n    },\\n    onFileChange: function onFileChange(evt) {\\n      var _this = this;\\n\\n      // Always emit original event\\n      this.$emit('change', evt);\\n      // Check if special `items` prop is available on event (drop mode)\\n      // Can be disabled by setting no-traverse\\n      var items = evt.dataTransfer && evt.dataTransfer.items;\\n      if (items && !this.noTraverse) {\\n        var queue = [];\\n        for (var i = 0; i < items.length; i++) {\\n          var item = items[i].webkitGetAsEntry();\\n          if (item) {\\n            queue.push(this.traverseFileTree(item));\\n          }\\n        }\\n        Promise.all(queue).then(function (filesArr) {\\n          _this.setFiles(from(filesArr));\\n        });\\n        return;\\n      }\\n      // Normal handling\\n      this.setFiles(evt.target.files || evt.dataTransfer.files);\\n    },\\n    setFiles: function setFiles(files) {\\n      if (!files) {\\n        this.selectedFile = null;\\n        return;\\n      }\\n      if (!this.multiple) {\\n        this.selectedFile = files[0];\\n        return;\\n      }\\n      // Convert files to array\\n      var filesArray = [];\\n      for (var i = 0; i < files.length; i++) {\\n        if (files[i].type.match(this.accept)) {\\n          filesArray.push(files[i]);\\n        }\\n      }\\n      this.selectedFile = filesArray;\\n    },\\n    dragover: function dragover(evt) {\\n      evt.preventDefault();\\n      evt.stopPropagation();\\n      if (this.noDrop || !this.custom) {\\n        return;\\n      }\\n      this.dragging = true;\\n      evt.dataTransfer.dropEffect = 'copy';\\n    },\\n    dragleave: function dragleave(evt) {\\n      evt.preventDefault();\\n      evt.stopPropagation();\\n      this.dragging = false;\\n    },\\n    drop: function drop(evt) {\\n      evt.preventDefault();\\n      evt.stopPropagation();\\n      if (this.noDrop) {\\n        return;\\n      }\\n      this.dragging = false;\\n      if (evt.dataTransfer.files && evt.dataTransfer.files.length > 0) {\\n        this.onFileChange(evt);\\n      }\\n    },\\n    traverseFileTree: function traverseFileTree(item, path) {\\n      var _this2 = this;\\n\\n      // Based on http://stackoverflow.com/questions/3590058\\n      return new Promise(function (resolve) {\\n        path = path || '';\\n        if (item.isFile) {\\n          // Get file\\n          item.file(function (file) {\\n            file.$path = path; // Inject $path to file obj\\n            resolve(file);\\n          });\\n        } else if (item.isDirectory) {\\n          // Get folder contents\\n          item.createReader().readEntries(function (entries) {\\n            var queue = [];\\n            for (var i = 0; i < entries.length; i++) {\\n              queue.push(_this2.traverseFileTree(entries[i], path + item.name + '/'));\\n            }\\n            Promise.all(queue).then(function (filesArr) {\\n              resolve(from(filesArr));\\n            });\\n          });\\n        }\\n      });\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/form-file/index.js\\n\\n\\n\\nvar form_file_components = {\\n  bFormFile: form_file,\\n  bFile: form_file\\n};\\n\\nvar form_file_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, form_file_components);\\n  }\\n};\\n\\nvueUse(form_file_VuePlugin);\\n\\n/* harmony default export */ var components_form_file = (form_file_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/form-select/form-select.js\\n\\n\\n\\n\\n\\n\\n\\n\\n/* harmony default export */ var form_select = ({\\n  mixins: [mixins_id, mixins_form, form_size, form_state, form_custom, form_options],\\n  render: function render(h) {\\n    var _this = this;\\n\\n    var $slots = this.$slots;\\n    var options = this.formOptions.map(function (option, index) {\\n      return h('option', {\\n        key: 'option_' + index + '_opt',\\n        attrs: { disabled: Boolean(option.disabled) },\\n        domProps: { innerHTML: option.text, value: option.value }\\n      });\\n    });\\n    return h('select', {\\n      ref: 'input',\\n      class: this.inputClass,\\n      directives: [{\\n        name: 'model',\\n        rawName: 'v-model',\\n        value: this.localValue,\\n        expression: 'localValue'\\n      }],\\n      attrs: {\\n        id: this.safeId(),\\n        name: this.name,\\n        multiple: this.multiple || null,\\n        size: this.computedSelectSize,\\n        disabled: this.disabled,\\n        required: this.required,\\n        'aria-required': this.required ? 'true' : null,\\n        'aria-invalid': this.computedAriaInvalid\\n      },\\n      on: {\\n        change: function change(evt) {\\n          var target = evt.target;\\n          var selectedVal = from(target.options).filter(function (o) {\\n            return o.selected;\\n          }).map(function (o) {\\n            return '_value' in o ? o._value : o.value;\\n          });\\n          _this.localValue = target.multiple ? selectedVal : selectedVal[0];\\n          _this.$emit('change', _this.localValue);\\n        }\\n      }\\n    }, [$slots.first, options, $slots.default]);\\n  },\\n  data: function data() {\\n    return {\\n      localValue: this.value\\n    };\\n  },\\n\\n  watch: {\\n    value: function value(newVal, oldVal) {\\n      this.localValue = newVal;\\n    },\\n    localValue: function localValue(newVal, oldVal) {\\n      this.$emit('input', this.localValue);\\n    }\\n  },\\n  props: {\\n    value: {},\\n    multiple: {\\n      type: Boolean,\\n      default: false\\n    },\\n    selectSize: {\\n      // Browsers default size to 0, which shows 4 rows in most browsers in multiple mode\\n      // Size of 1 can bork out firefox\\n      type: Number,\\n      default: 0\\n    },\\n    ariaInvalid: {\\n      type: [Boolean, String],\\n      default: false\\n    }\\n  },\\n  computed: {\\n    computedSelectSize: function computedSelectSize() {\\n      // Custom selects with a size of zero causes the arrows to be hidden,\\n      // so dont render the size attribute in this case\\n      return !this.plain && this.selectSize === 0 ? null : this.selectSize;\\n    },\\n    inputClass: function inputClass() {\\n      return ['form-control', this.stateClass, this.sizeFormClass,\\n      // Awaiting for https://github.com/twbs/bootstrap/issues/23058\\n      this.plain ? null : 'custom-select', this.plain || !this.size ? null : 'custom-select-' + this.size];\\n    },\\n    computedAriaInvalid: function computedAriaInvalid() {\\n      if (this.ariaInvalid === true || this.ariaInvalid === 'true') {\\n        return 'true';\\n      }\\n      return this.stateClass === 'is-invalid' ? 'true' : null;\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/form-select/index.js\\n\\n\\n\\nvar form_select_components = {\\n  bFormSelect: form_select,\\n  bSelect: form_select\\n};\\n\\nvar form_select_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, form_select_components);\\n  }\\n};\\n\\nvueUse(form_select_VuePlugin);\\n\\n/* harmony default export */ var components_form_select = (form_select_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/image/img-lazy.js\\n\\n\\nvar THROTTLE = 100;\\n\\n/* harmony default export */ var img_lazy = ({\\n  components: { bImg: image_img },\\n  render: function render(h) {\\n    return h('b-img', {\\n      props: {\\n        src: this.computedSrc,\\n        alt: this.alt,\\n        blank: this.computedBlank,\\n        blankColor: this.blankColor,\\n        width: this.computedWidth,\\n        height: this.computedHeight,\\n        fluid: this.fluid,\\n        fluidGrow: this.fluidGrow,\\n        block: this.block,\\n        thumbnail: this.thumbnail,\\n        rounded: this.rounded,\\n        left: this.left,\\n        right: this.right,\\n        center: this.center\\n      }\\n    });\\n  },\\n  data: function data() {\\n    return {\\n      isShown: false,\\n      scrollTimeout: null\\n    };\\n  },\\n\\n  props: {\\n    src: {\\n      type: String,\\n      default: null,\\n      required: true\\n    },\\n    alt: {\\n      type: String,\\n      default: null\\n    },\\n    width: {\\n      type: [Number, String],\\n      default: null\\n    },\\n    height: {\\n      type: [Number, String],\\n      default: null\\n    },\\n    blankSrc: {\\n      // If null, a blank image is generated\\n      type: String,\\n      default: null\\n    },\\n    blankColor: {\\n      type: String,\\n      default: 'transparent'\\n    },\\n    blankWidth: {\\n      type: [Number, String],\\n      default: null\\n    },\\n    blankHeight: {\\n      type: [Number, String],\\n      default: null\\n    },\\n    fluid: {\\n      type: Boolean,\\n      default: false\\n    },\\n    fluidGrow: {\\n      type: Boolean,\\n      default: false\\n    },\\n    block: {\\n      type: Boolean,\\n      default: false\\n    },\\n    thumbnail: {\\n      type: Boolean,\\n      default: false\\n    },\\n    rounded: {\\n      type: [Boolean, String],\\n      default: false\\n    },\\n    left: {\\n      type: Boolean,\\n      default: false\\n    },\\n    right: {\\n      type: Boolean,\\n      default: false\\n    },\\n    center: {\\n      type: Boolean,\\n      default: false\\n    },\\n    offset: {\\n      type: [Number, String],\\n      default: 360\\n    },\\n    throttle: {\\n      type: [Number, String],\\n      default: THROTTLE\\n    }\\n  },\\n  computed: {\\n    computedSrc: function computedSrc() {\\n      return !this.blankSrc || this.isShown ? this.src : this.blankSrc;\\n    },\\n    computedBlank: function computedBlank() {\\n      return !(this.isShown || this.blankSrc);\\n    },\\n    computedWidth: function computedWidth() {\\n      return this.isShown ? this.width : this.blankWidth || this.width;\\n    },\\n    computedHeight: function computedHeight() {\\n      return this.isShown ? this.height : this.blankHeight || this.height;\\n    }\\n  },\\n  mounted: function mounted() {\\n    this.setListeners(true);\\n    this.checkView();\\n  },\\n  activated: function activated() {\\n    this.setListeners(true);\\n    this.checkView();\\n  },\\n  deactivated: function deactivated() {\\n    this.setListeners(false);\\n  },\\n  beforeDdestroy: function beforeDdestroy() {\\n    this.setListeners(false);\\n  },\\n\\n  methods: {\\n    setListeners: function setListeners(on) {\\n      clearTimeout(this.scrollTimer);\\n      this.scrollTimeout = null;\\n      var root = window;\\n      if (on) {\\n        eventOn(root, 'scroll', this.onScroll);\\n        eventOn(root, 'resize', this.onScroll);\\n        eventOn(root, 'orientationchange', this.onScroll);\\n      } else {\\n        eventOff(root, 'scroll', this.onScroll);\\n        eventOff(root, 'resize', this.onScroll);\\n        eventOff(root, 'orientationchange', this.onScroll);\\n      }\\n    },\\n    checkView: function checkView() {\\n      // check bounding box + offset to see if we should show\\n      if (!isVisible(this.$el)) {\\n        // Element is hidden, so skip for now\\n        return;\\n      }\\n      var offset = parseInt(this.offset, 10) || 0;\\n      var docElement = document.documentElement;\\n      var view = {\\n        l: 0 - offset,\\n        t: 0 - offset,\\n        b: docElement.clientHeight + offset,\\n        r: docElement.clientWidth + offset\\n      };\\n      var box = getBCR(this.$el);\\n      if (box.right >= view.l && box.bottom >= view.t && box.left <= view.r && box.top <= view.b) {\\n        // image is in view (or about to be in view)\\n        this.isShown = true;\\n        this.setListeners(false);\\n      }\\n    },\\n    onScroll: function onScroll() {\\n      if (this.isShown) {\\n        this.setListeners(false);\\n      } else {\\n        clearTimeout(this.scrollTimeout);\\n        this.scrollTimeout = setTimeout(this.checkView, parseInt(this.throttle, 10) || THROTTLE);\\n      }\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/image/index.js\\n\\n\\n\\n\\nvar image_components = {\\n  bImg: image_img,\\n  bImgLazy: img_lazy\\n};\\n\\nvar image_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, image_components);\\n  }\\n};\\n\\nvueUse(image_VuePlugin);\\n\\n/* harmony default export */ var components_image = (image_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/jumbotron/jumbotron.js\\nfunction jumbotron_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\n\\n\\nvar jumbotron_props = {\\n  fluid: {\\n    type: Boolean,\\n    default: false\\n  },\\n  containerFluid: {\\n    type: Boolean,\\n    default: false\\n  },\\n  header: {\\n    type: String,\\n    default: null\\n  },\\n  headerTag: {\\n    type: String,\\n    default: 'h1'\\n  },\\n  headerLevel: {\\n    type: [Number, String],\\n    default: '3'\\n  },\\n  lead: {\\n    type: String,\\n    default: null\\n  },\\n  leadTag: {\\n    type: String,\\n    default: 'p'\\n  },\\n  tag: {\\n    type: String,\\n    default: 'div'\\n  },\\n  bgVariant: {\\n    type: String,\\n    default: null\\n  },\\n  borderVariant: {\\n    type: String,\\n    default: null\\n  },\\n  textVariant: {\\n    type: String,\\n    default: null\\n  }\\n};\\n\\n/* harmony default export */ var jumbotron = ({\\n  functional: true,\\n  props: jumbotron_props,\\n  render: function render(h, _ref) {\\n    var _class2;\\n\\n    var props = _ref.props,\\n        data = _ref.data,\\n        slots = _ref.slots;\\n\\n    // The order of the conditionals matter.\\n    // We are building the component markup in order.\\n    var childNodes = [];\\n    var $slots = slots();\\n\\n    // Header\\n    if (props.header || $slots.header) {\\n      childNodes.push(h(props.headerTag, {\\n        class: jumbotron_defineProperty({}, 'display-' + props.headerLevel, Boolean(props.headerLevel))\\n      }, $slots.header || props.header));\\n    }\\n\\n    // Lead\\n    if (props.lead || $slots.lead) {\\n      childNodes.push(h(props.leadTag, { staticClass: 'lead' }, $slots.lead || props.lead));\\n    }\\n\\n    // Default slot\\n    if ($slots.default) {\\n      childNodes.push($slots.default);\\n    }\\n\\n    // If fluid, wrap content in a container/container-fluid\\n    if (props.fluid) {\\n      // Children become a child of a container\\n      childNodes = [h(layout_container, { props: { 'fluid': props.containerFluid } }, childNodes)];\\n    }\\n    // Return the jumbotron\\n    return h(props.tag, mergeData(data, {\\n      staticClass: 'jumbotron',\\n      class: (_class2 = {\\n        'jumbotron-fluid': props.fluid\\n      }, jumbotron_defineProperty(_class2, 'text-' + props.textVariant, Boolean(props.textVariant)), jumbotron_defineProperty(_class2, 'bg-' + props.bgVariant, Boolean(props.bgVariant)), jumbotron_defineProperty(_class2, 'border-' + props.borderVariant, Boolean(props.borderVariant)), jumbotron_defineProperty(_class2, 'border', Boolean(props.borderVariant)), _class2)\\n    }), childNodes);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/jumbotron/index.js\\n\\n\\n\\nvar jumbotron_components = {\\n  bJumbotron: jumbotron\\n};\\n\\nvar jumbotron_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, jumbotron_components);\\n  }\\n};\\n\\nvueUse(jumbotron_VuePlugin);\\n\\n/* harmony default export */ var components_jumbotron = (jumbotron_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/link/index.js\\n\\n\\n\\nvar link_components = {\\n  bLink: link_link\\n};\\n\\nvar link_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, link_components);\\n  }\\n};\\n\\nvueUse(link_VuePlugin);\\n\\n/* harmony default export */ var components_link = (link_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/list-group/list-group.js\\n\\n\\nvar list_group_props = {\\n  tag: {\\n    type: String,\\n    default: 'div'\\n  },\\n  flush: {\\n    type: Boolean,\\n    default: false\\n  }\\n};\\n\\n/* harmony default export */ var list_group = ({\\n  functional: true,\\n  props: list_group_props,\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data,\\n        children = _ref.children;\\n\\n    var componentData = {\\n      staticClass: 'list-group',\\n      class: { 'list-group-flush': props.flush }\\n    };\\n\\n    return h(props.tag, mergeData(data, componentData), children);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/list-group/list-group-item.js\\nfunction list_group_item_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\n\\n\\n\\n\\n\\nvar actionTags = ['a', 'router-link', 'button', 'b-link'];\\nvar list_group_item_linkProps = propsFactory();\\ndelete list_group_item_linkProps.href.default;\\ndelete list_group_item_linkProps.to.default;\\n\\nvar list_group_item_props = object_assign({\\n  tag: {\\n    type: String,\\n    default: 'div'\\n  },\\n  action: {\\n    type: Boolean,\\n    default: null\\n  },\\n  button: {\\n    type: Boolean,\\n    default: null\\n  },\\n  variant: {\\n    type: String,\\n    default: null\\n  }\\n}, list_group_item_linkProps);\\n\\n/* harmony default export */ var list_group_item = ({\\n  functional: true,\\n  props: list_group_item_props,\\n  render: function render(h, _ref) {\\n    var _class;\\n\\n    var props = _ref.props,\\n        data = _ref.data,\\n        children = _ref.children;\\n\\n    var tag = props.button ? 'button' : !props.href && !props.to ? props.tag : link_link;\\n    var isAction = Boolean(props.href || props.to || props.action || props.button || arrayIncludes(actionTags, props.tag));\\n    var componentData = {\\n      staticClass: 'list-group-item',\\n      class: (_class = {}, list_group_item_defineProperty(_class, 'list-group-item-' + props.variant, Boolean(props.variant)), list_group_item_defineProperty(_class, 'list-group-item-action', isAction), list_group_item_defineProperty(_class, 'active', props.active), list_group_item_defineProperty(_class, 'disabled', props.disabled), _class),\\n      attrs: tag === 'button' && props.disabled ? { disabled: true } : {},\\n      props: props.button ? {} : pluckProps(list_group_item_linkProps, props)\\n    };\\n\\n    return h(tag, mergeData(data, componentData), children);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/list-group/index.js\\n\\n\\n\\n\\nvar list_group_components = {\\n  bListGroup: list_group,\\n  bListGroupItem: list_group_item\\n};\\n\\nvar list_group_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, list_group_components);\\n  }\\n};\\n\\nvueUse(list_group_VuePlugin);\\n\\n/* harmony default export */ var components_list_group = (list_group_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/media/media-body.js\\n\\n\\nvar media_body_props = {\\n  tag: {\\n    type: String,\\n    default: 'div'\\n  }\\n};\\n\\n/* harmony default export */ var media_body = ({\\n  functional: true,\\n  props: media_body_props,\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data,\\n        children = _ref.children;\\n\\n    return h(props.tag, mergeData(data, {\\n      staticClass: 'media-body'\\n    }), children);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/media/media-aside.js\\nfunction media_aside_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\n\\nvar media_aside_props = {\\n  tag: {\\n    type: String,\\n    default: 'div'\\n  },\\n  verticalAlign: {\\n    type: String,\\n    default: 'top'\\n  }\\n};\\n\\n/* harmony default export */ var media_aside = ({\\n  functional: true,\\n  props: media_aside_props,\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data,\\n        children = _ref.children;\\n\\n    return h(props.tag, mergeData(data, {\\n      staticClass: 'd-flex',\\n      class: media_aside_defineProperty({}, 'align-self-' + props.verticalAlign, props.verticalAlign)\\n    }), children);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/media/media.js\\n\\n\\n\\n\\nvar media_props = {\\n  tag: {\\n    type: String,\\n    default: 'div'\\n  },\\n  rightAlign: {\\n    type: Boolean,\\n    default: false\\n  },\\n  verticalAlign: {\\n    type: String,\\n    default: 'top'\\n  },\\n  noBody: {\\n    type: Boolean,\\n    default: false\\n  }\\n};\\n\\n/* harmony default export */ var media = ({\\n  functional: true,\\n  props: media_props,\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data,\\n        slots = _ref.slots,\\n        children = _ref.children;\\n\\n    var childNodes = props.noBody ? children : [];\\n    var $slots = slots();\\n\\n    if (!props.noBody) {\\n      if ($slots.aside && !props.rightAlign) {\\n        childNodes.push(h(media_aside, { staticClass: 'mr-3', props: { verticalAlign: props.verticalAlign } }, $slots.aside));\\n      }\\n\\n      childNodes.push(h(media_body, $slots.default));\\n\\n      if ($slots.aside && props.rightAlign) {\\n        childNodes.push(h(media_aside, { staticClass: 'ml-3', props: { verticalAlign: props.verticalAlign } }, $slots.aside));\\n      }\\n    }\\n\\n    return h(props.tag, mergeData(data, { staticClass: 'media' }), childNodes);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/media/index.js\\n\\n\\n\\n\\n\\nvar media_components = {\\n  bMedia: media,\\n  bMediaAside: media_aside,\\n  bMediaBody: media_body\\n};\\n\\nvar media_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, media_components);\\n  }\\n};\\n\\nvueUse(media_VuePlugin);\\n\\n/* harmony default export */ var components_media = (media_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/modal/modal.js\\nfunction modal_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// Selectors for padding/margin adjustments\\nvar Selector = {\\n  FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',\\n  STICKY_CONTENT: '.sticky-top',\\n  NAVBAR_TOGGLER: '.navbar-toggler'\\n\\n  // ObserveDom config\\n};var OBSERVER_CONFIG = {\\n  subtree: true,\\n  childList: true,\\n  characterData: true,\\n  attributes: true,\\n  attributeFilter: ['style', 'class']\\n};\\n\\n/* harmony default export */ var modal_modal = ({\\n  mixins: [mixins_id, listen_on_root],\\n  components: { bBtn: button_button, bBtnClose: button_close },\\n  render: function render(h) {\\n    var _this = this;\\n\\n    var $slots = this.$slots;\\n    // Modal Header\\n    var header = h(false);\\n    if (!this.hideHeader) {\\n      var modalHeader = $slots['modal-header'];\\n      if (!modalHeader) {\\n        var closeButton = h(false);\\n        if (!this.hideHeaderClose) {\\n          closeButton = h('b-btn-close', {\\n            props: {\\n              disabled: this.is_transitioning,\\n              ariaLabel: this.headerCloseLabel,\\n              textVariant: this.headerTextVariant\\n            },\\n            on: {\\n              click: function click(evt) {\\n                _this.hide('header-close');\\n              }\\n            }\\n          }, [$slots['modal-header-close']]);\\n        }\\n        modalHeader = [h(this.titleTag, { class: ['modal-title'] }, [$slots['modal-title'] || this.title]), closeButton];\\n      }\\n      header = h('header', {\\n        ref: 'header',\\n        class: this.headerClasses,\\n        attrs: { id: this.safeId('__BV_modal_header_') }\\n      }, [modalHeader]);\\n    }\\n    // Modal Body\\n    var body = h('div', {\\n      ref: 'body',\\n      class: this.bodyClasses,\\n      attrs: { id: this.safeId('__BV_modal_body_') }\\n    }, [$slots.default]);\\n    // Modal Footer\\n    var footer = h(false);\\n    if (!this.hideFooter) {\\n      var modalFooter = $slots['modal-footer'];\\n      if (!modalFooter) {\\n        var cancelButton = h(false);\\n        if (!this.okOnly) {\\n          cancelButton = h('b-btn', {\\n            props: {\\n              variant: this.cancelVariant,\\n              size: this.buttonSize,\\n              disabled: this.cancelDisabled || this.busy || this.is_transitioning\\n            },\\n            on: {\\n              click: function click(evt) {\\n                _this.hide('cancel');\\n              }\\n            }\\n          }, [$slots['modal-cancel'] || this.cancelTitle]);\\n        }\\n        var okButton = h('b-btn', {\\n          props: {\\n            variant: this.okVariant,\\n            size: this.buttonSize,\\n            disabled: this.okDisabled || this.busy || this.is_transitioning\\n          },\\n          on: {\\n            click: function click(evt) {\\n              _this.hide('ok');\\n            }\\n          }\\n        }, [$slots['modal-ok'] || this.okTitle]);\\n        modalFooter = [cancelButton, okButton];\\n      }\\n      footer = h('footer', {\\n        ref: 'footer',\\n        class: this.footerClasses,\\n        attrs: { id: this.safeId('__BV_modal_footer_') }\\n      }, [modalFooter]);\\n    }\\n    // Assemble Modal Content\\n    var modalContent = h('div', {\\n      ref: 'content',\\n      class: ['modal-content'],\\n      attrs: {\\n        tabindex: '-1',\\n        role: 'document',\\n        'aria-labelledby': this.hideHeader ? null : this.safeId('__BV_modal_header_'),\\n        'aria-describedby': this.safeId('__BV_modal_body_')\\n      },\\n      on: {\\n        focusout: this.onFocusout,\\n        click: function click(evt) {\\n          evt.stopPropagation();\\n          // https://github.com/bootstrap-vue/bootstrap-vue/issues/1528\\n          _this.$root.$emit('bv::dropdown::shown');\\n        }\\n      }\\n    }, [header, body, footer]);\\n    // Modal Dialog wrapper\\n    var modalDialog = h('div', { class: this.dialogClasses }, [modalContent]);\\n    // Modal\\n    var modal = h('div', {\\n      ref: 'modal',\\n      class: this.modalClasses,\\n      directives: [{\\n        name: 'show',\\n        rawName: 'v-show',\\n        value: this.is_visible,\\n        expression: 'is_visible'\\n      }],\\n      attrs: {\\n        id: this.safeId(),\\n        role: 'dialog',\\n        'aria-hidden': this.is_visible ? null : 'true'\\n      },\\n      on: {\\n        click: this.onClickOut,\\n        keydown: this.onEsc\\n      }\\n    }, [modalDialog]);\\n    // Wrap modal in transition\\n    modal = h('transition', {\\n      props: {\\n        enterClass: '',\\n        enterToClass: '',\\n        enterActiveClass: '',\\n        leaveClass: '',\\n        leaveActiveClass: '',\\n        leaveToClass: ''\\n      },\\n      on: {\\n        'before-enter': this.onBeforeEnter,\\n        enter: this.onEnter,\\n        'after-enter': this.onAfterEnter,\\n        'before-leave': this.onBeforeLeave,\\n        leave: this.onLeave,\\n        'after-leave': this.onAfterLeave\\n      }\\n    }, [modal]);\\n    // Modal Backdrop\\n    var backdrop = h(false);\\n    if (!this.hideBackdrop && (this.is_visible || this.is_transitioning)) {\\n      backdrop = h('div', {\\n        class: this.backdropClasses,\\n        attrs: { id: this.safeId('__BV_modal_backdrop_') }\\n      });\\n    }\\n    // Assemble modal and backdrop\\n    var outer = h(false);\\n    if (!this.is_hidden) {\\n      outer = h('div', { attrs: { id: this.safeId('__BV_modal_outer_') } }, [modal, backdrop]);\\n    }\\n    // Wrap in DIV to maintain thi.$el reference for hide/show method aceess\\n    return h('div', {}, [outer]);\\n  },\\n  data: function data() {\\n    return {\\n      is_hidden: this.lazy || false,\\n      is_visible: false,\\n      is_transitioning: false,\\n      is_show: false,\\n      is_block: false,\\n      scrollbarWidth: 0,\\n      isBodyOverflowing: false,\\n      return_focus: this.returnFocus || null\\n    };\\n  },\\n\\n  model: {\\n    prop: 'visible',\\n    event: 'change'\\n  },\\n  props: {\\n    title: {\\n      type: String,\\n      default: ''\\n    },\\n    titleTag: {\\n      type: String,\\n      default: 'h5'\\n    },\\n    size: {\\n      type: String,\\n      default: 'md'\\n    },\\n    centered: {\\n      type: Boolean,\\n      default: false\\n    },\\n    buttonSize: {\\n      type: String,\\n      default: ''\\n    },\\n    noFade: {\\n      type: Boolean,\\n      default: false\\n    },\\n    noCloseOnBackdrop: {\\n      type: Boolean,\\n      default: false\\n    },\\n    noCloseOnEsc: {\\n      type: Boolean,\\n      default: false\\n    },\\n    noEnforceFocus: {\\n      type: Boolean,\\n      default: false\\n    },\\n    headerBgVariant: {\\n      type: String,\\n      default: null\\n    },\\n    headerBorderVariant: {\\n      type: String,\\n      default: null\\n    },\\n    headerTextVariant: {\\n      type: String,\\n      default: null\\n    },\\n    headerClass: {\\n      type: [String, Array],\\n      default: null\\n    },\\n    bodyBgVariant: {\\n      type: String,\\n      default: null\\n    },\\n    bodyTextVariant: {\\n      type: String,\\n      default: null\\n    },\\n    modalClass: {\\n      type: [String, Array],\\n      default: null\\n    },\\n    bodyClass: {\\n      type: [String, Array],\\n      default: null\\n    },\\n    footerBgVariant: {\\n      type: String,\\n      default: null\\n    },\\n    footerBorderVariant: {\\n      type: String,\\n      default: null\\n    },\\n    footerTextVariant: {\\n      type: String,\\n      default: null\\n    },\\n    footerClass: {\\n      type: [String, Array],\\n      default: null\\n    },\\n    hideHeader: {\\n      type: Boolean,\\n      default: false\\n    },\\n    hideFooter: {\\n      type: Boolean,\\n      default: false\\n    },\\n    hideHeaderClose: {\\n      type: Boolean,\\n      default: false\\n    },\\n    hideBackdrop: {\\n      type: Boolean,\\n      default: false\\n    },\\n    okOnly: {\\n      type: Boolean,\\n      default: false\\n    },\\n    okDisabled: {\\n      type: Boolean,\\n      default: false\\n    },\\n    cancelDisabled: {\\n      type: Boolean,\\n      default: false\\n    },\\n    visible: {\\n      type: Boolean,\\n      default: false\\n    },\\n    returnFocus: {\\n      default: null\\n    },\\n    headerCloseLabel: {\\n      type: String,\\n      default: 'Close'\\n    },\\n    cancelTitle: {\\n      type: String,\\n      default: 'Cancel'\\n    },\\n    okTitle: {\\n      type: String,\\n      default: 'OK'\\n    },\\n    cancelVariant: {\\n      type: String,\\n      default: 'secondary'\\n    },\\n    okVariant: {\\n      type: String,\\n      default: 'primary'\\n    },\\n    lazy: {\\n      type: Boolean,\\n      default: false\\n    },\\n    busy: {\\n      type: Boolean,\\n      default: false\\n    }\\n  },\\n  computed: {\\n    modalClasses: function modalClasses() {\\n      return ['modal', {\\n        fade: !this.noFade,\\n        show: this.is_show,\\n        'd-block': this.is_block\\n      }, this.modalClass];\\n    },\\n    dialogClasses: function dialogClasses() {\\n      var _ref;\\n\\n      return ['modal-dialog', (_ref = {}, modal_defineProperty(_ref, 'modal-' + this.size, Boolean(this.size)), modal_defineProperty(_ref, 'modal-dialog-centered', this.centered), _ref)];\\n    },\\n    backdropClasses: function backdropClasses() {\\n      return ['modal-backdrop', {\\n        fade: !this.noFade,\\n        show: this.is_show || this.noFade\\n      }];\\n    },\\n    headerClasses: function headerClasses() {\\n      var _ref2;\\n\\n      return ['modal-header', (_ref2 = {}, modal_defineProperty(_ref2, 'bg-' + this.headerBgVariant, Boolean(this.headerBgVariant)), modal_defineProperty(_ref2, 'text-' + this.headerTextVariant, Boolean(this.headerTextVariant)), modal_defineProperty(_ref2, 'border-' + this.headerBorderVariant, Boolean(this.headerBorderVariant)), _ref2), this.headerClass];\\n    },\\n    bodyClasses: function bodyClasses() {\\n      var _ref3;\\n\\n      return ['modal-body', (_ref3 = {}, modal_defineProperty(_ref3, 'bg-' + this.bodyBgVariant, Boolean(this.bodyBgVariant)), modal_defineProperty(_ref3, 'text-' + this.bodyTextVariant, Boolean(this.bodyTextVariant)), _ref3), this.bodyClass];\\n    },\\n    footerClasses: function footerClasses() {\\n      var _ref4;\\n\\n      return ['modal-footer', (_ref4 = {}, modal_defineProperty(_ref4, 'bg-' + this.footerBgVariant, Boolean(this.footerBgVariant)), modal_defineProperty(_ref4, 'text-' + this.footerTextVariant, Boolean(this.footerTextVariant)), modal_defineProperty(_ref4, 'border-' + this.footerBorderVariant, Boolean(this.footerBorderVariant)), _ref4), this.footerClass];\\n    }\\n  },\\n  watch: {\\n    visible: function visible(newVal, oldVal) {\\n      if (newVal === oldVal) {\\n        return;\\n      }\\n      this[newVal ? 'show' : 'hide']();\\n    }\\n  },\\n  methods: {\\n    // Public Methods\\n    show: function show() {\\n      if (this.is_visible) {\\n        return;\\n      }\\n      var showEvt = new bv_event_class('show', {\\n        cancelable: true,\\n        vueTarget: this,\\n        target: this.$refs.modal,\\n        relatedTarget: null\\n      });\\n      this.emitEvent(showEvt);\\n      if (showEvt.defaultPrevented || this.is_visible) {\\n        // Don't show if canceled\\n        return;\\n      }\\n      if (hasClass(document.body, 'modal-open')) {\\n        // If another modal is already open, wait for it to close\\n        this.$root.$once('bv::modal::hidden', this.doShow);\\n      } else {\\n        // Show the modal\\n        this.doShow();\\n      }\\n    },\\n    hide: function hide(trigger) {\\n      if (!this.is_visible) {\\n        return;\\n      }\\n      var hideEvt = new bv_event_class('hide', {\\n        cancelable: true,\\n        vueTarget: this,\\n        target: this.$refs.modal,\\n        // this could be the trigger element/component reference\\n        relatedTarget: null,\\n        isOK: trigger || null,\\n        trigger: trigger || null,\\n        cancel: function cancel() {\\n          // Backwards compatibility\\n          utils_warn('b-modal: evt.cancel() is deprecated. Please use evt.preventDefault().');\\n          this.preventDefault();\\n        }\\n      });\\n      if (trigger === 'ok') {\\n        this.$emit('ok', hideEvt);\\n      } else if (trigger === 'cancel') {\\n        this.$emit('cancel', hideEvt);\\n      }\\n      this.emitEvent(hideEvt);\\n      // Hide if not canceled\\n      if (hideEvt.defaultPrevented || !this.is_visible) {\\n        return;\\n      }\\n      // stop observing for content changes\\n      if (this._observer) {\\n        this._observer.disconnect();\\n        this._observer = null;\\n      }\\n      this.is_visible = false;\\n      this.$emit('change', false);\\n    },\\n\\n    // Private method to finish showing modal\\n    doShow: function doShow() {\\n      var _this2 = this;\\n\\n      // Plce modal in DOM if lazy\\n      this.is_hidden = false;\\n      this.$nextTick(function () {\\n        // We do this in nextTick to ensure the modal is in DOM first before we show it\\n        _this2.is_visible = true;\\n        _this2.$emit('change', true);\\n        // Observe changes in modal content and adjust if necessary\\n        _this2._observer = observeDOM(_this2.$refs.content, _this2.adjustDialog.bind(_this2), OBSERVER_CONFIG);\\n      });\\n    },\\n\\n    // Transition Handlers\\n    onBeforeEnter: function onBeforeEnter() {\\n      this.is_transitioning = true;\\n      this.checkScrollbar();\\n      this.setScrollbar();\\n      this.adjustDialog();\\n      addClass(document.body, 'modal-open');\\n      this.setResizeEvent(true);\\n    },\\n    onEnter: function onEnter() {\\n      this.is_block = true;\\n      this.$refs.modal.scrollTop = 0;\\n    },\\n    onAfterEnter: function onAfterEnter() {\\n      var _this3 = this;\\n\\n      this.is_show = true;\\n      this.is_transitioning = false;\\n      this.$nextTick(function () {\\n        _this3.focusFirst();\\n        var shownEvt = new bv_event_class('shown', {\\n          cancelable: false,\\n          vueTarget: _this3,\\n          target: _this3.$refs.modal,\\n          relatedTarget: null\\n        });\\n        _this3.emitEvent(shownEvt);\\n      });\\n    },\\n    onBeforeLeave: function onBeforeLeave() {\\n      this.is_transitioning = true;\\n      this.setResizeEvent(false);\\n    },\\n    onLeave: function onLeave() {\\n      // Remove the 'show' class\\n      this.is_show = false;\\n    },\\n    onAfterLeave: function onAfterLeave() {\\n      var _this4 = this;\\n\\n      this.is_block = false;\\n      this.resetAdjustments();\\n      this.resetScrollbar();\\n      this.is_transitioning = false;\\n      removeClass(document.body, 'modal-open');\\n      this.$nextTick(function () {\\n        _this4.is_hidden = _this4.lazy || false;\\n        _this4.returnFocusTo();\\n        var hiddenEvt = new bv_event_class('hidden', {\\n          cancelable: false,\\n          vueTarget: _this4,\\n          target: _this4.lazy ? null : _this4.$refs.modal,\\n          relatedTarget: null\\n        });\\n        _this4.emitEvent(hiddenEvt);\\n      });\\n    },\\n\\n    // Event emitter\\n    emitEvent: function emitEvent(bvEvt) {\\n      var type = bvEvt.type;\\n      this.$emit(type, bvEvt);\\n      this.$root.$emit('bv::modal::' + type, bvEvt);\\n    },\\n\\n    // UI Event Handlers\\n    onClickOut: function onClickOut(evt) {\\n      // If backdrop clicked, hide modal\\n      if (this.is_visible && !this.noCloseOnBackdrop) {\\n        this.hide('backdrop');\\n      }\\n    },\\n    onEsc: function onEsc(evt) {\\n      // If ESC pressed, hide modal\\n      if (evt.keyCode === key_codes.ESC && this.is_visible && !this.noCloseOnEsc) {\\n        this.hide('esc');\\n      }\\n    },\\n    onFocusout: function onFocusout(evt) {\\n      // If focus leaves modal, bring it back\\n      // 'focusout' Event Listener bound on content\\n      var content = this.$refs.content;\\n      if (!this.noEnforceFocus && this.is_visible && content && !content.contains(evt.relatedTarget)) {\\n        content.focus();\\n      }\\n    },\\n\\n    // Resize Listener\\n    setResizeEvent: function setResizeEvent(on) {\\n      var _this5 = this;\\n\\n      ;['resize', 'orientationchange'].forEach(function (evtName) {\\n        if (on) {\\n          eventOn(window, evtName, _this5.adjustDialog);\\n        } else {\\n          eventOff(window, evtName, _this5.adjustDialog);\\n        }\\n      });\\n    },\\n\\n    // Root Listener handlers\\n    showHandler: function showHandler(id, triggerEl) {\\n      if (id === this.id) {\\n        this.return_focus = triggerEl || null;\\n        this.show();\\n      }\\n    },\\n    hideHandler: function hideHandler(id) {\\n      if (id === this.id) {\\n        this.hide();\\n      }\\n    },\\n    modalListener: function modalListener(bvEvt) {\\n      // If another modal opens, close this one\\n      if (bvEvt.vueTarget !== this) {\\n        this.hide();\\n      }\\n    },\\n\\n    // Focus control handlers\\n    focusFirst: function focusFirst() {\\n      // Don't try and focus if we are SSR\\n      if (typeof document === 'undefined') {\\n        return;\\n      }\\n      var content = this.$refs.content;\\n      var modal = this.$refs.modal;\\n      var activeElement = document.activeElement;\\n      if (activeElement && content && content.contains(activeElement)) {\\n        // If activeElement is child of content, no need to change focus\\n      } else if (content) {\\n        if (modal) {\\n          modal.scrollTop = 0;\\n        }\\n        // Focus the modal content wrapper\\n        content.focus();\\n      }\\n    },\\n    returnFocusTo: function returnFocusTo() {\\n      // Prefer returnFocus prop over event specified return_focus value\\n      var el = this.returnFocus || this.return_focus || null;\\n      if (typeof el === 'string') {\\n        // CSS Selector\\n        el = dom_select(el);\\n      }\\n      if (el) {\\n        el = el.$el || el;\\n        if (isVisible(el)) {\\n          el.focus();\\n        }\\n      }\\n    },\\n\\n    // Utility methods\\n    getScrollbarWidth: function getScrollbarWidth() {\\n      var scrollDiv = document.createElement('div');\\n      scrollDiv.className = 'modal-scrollbar-measure';\\n      document.body.appendChild(scrollDiv);\\n      this.scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;\\n      document.body.removeChild(scrollDiv);\\n    },\\n    adjustDialog: function adjustDialog() {\\n      if (!this.is_visible) {\\n        return;\\n      }\\n      var modal = this.$refs.modal;\\n      var isModalOverflowing = modal.scrollHeight > document.documentElement.clientHeight;\\n      if (!this.isBodyOverflowing && isModalOverflowing) {\\n        modal.style.paddingLeft = this.scrollbarWidth + 'px';\\n      }\\n      if (this.isBodyOverflowing && !isModalOverflowing) {\\n        modal.style.paddingRight = this.scrollbarWidth + 'px';\\n      }\\n    },\\n    resetAdjustments: function resetAdjustments() {\\n      var modal = this.$refs.modal;\\n      if (modal) {\\n        modal.style.paddingLeft = '';\\n        modal.style.paddingRight = '';\\n      }\\n    },\\n    checkScrollbar: function checkScrollbar() {\\n      var rect = getBCR(document.body);\\n      this.isBodyOverflowing = rect.left + rect.right < window.innerWidth;\\n    },\\n    setScrollbar: function setScrollbar() {\\n      if (this.isBodyOverflowing) {\\n        // Note: DOMNode.style.paddingRight returns the actual value or '' if not set\\n        //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set\\n        var computedStyle = window.getComputedStyle;\\n        var body = document.body;\\n        var scrollbarWidth = this.scrollbarWidth;\\n        // Adjust fixed content padding\\n        dom_selectAll(Selector.FIXED_CONTENT).forEach(function (el) {\\n          var actualPadding = el.style.paddingRight;\\n          var calculatedPadding = computedStyle(el).paddingRight || 0;\\n          setAttr(el, 'data-padding-right', actualPadding);\\n          el.style.paddingRight = parseFloat(calculatedPadding) + scrollbarWidth + 'px';\\n        });\\n        // Adjust sticky content margin\\n        dom_selectAll(Selector.STICKY_CONTENT).forEach(function (el) {\\n          var actualMargin = el.style.marginRight;\\n          var calculatedMargin = computedStyle(el).marginRight || 0;\\n          setAttr(el, 'data-margin-right', actualMargin);\\n          el.style.marginRight = parseFloat(calculatedMargin) - scrollbarWidth + 'px';\\n        });\\n        // Adjust navbar-toggler margin\\n        dom_selectAll(Selector.NAVBAR_TOGGLER).forEach(function (el) {\\n          var actualMargin = el.style.marginRight;\\n          var calculatedMargin = computedStyle(el).marginRight || 0;\\n          setAttr(el, 'data-margin-right', actualMargin);\\n          el.style.marginRight = parseFloat(calculatedMargin) + scrollbarWidth + 'px';\\n        });\\n        // Adjust body padding\\n        var actualPadding = body.style.paddingRight;\\n        var calculatedPadding = computedStyle(body).paddingRight;\\n        setAttr(body, 'data-padding-right', actualPadding);\\n        body.style.paddingRight = parseFloat(calculatedPadding) + scrollbarWidth + 'px';\\n      }\\n    },\\n    resetScrollbar: function resetScrollbar() {\\n      // Restore fixed content padding\\n      dom_selectAll(Selector.FIXED_CONTENT).forEach(function (el) {\\n        if (hasAttr(el, 'data-padding-right')) {\\n          el.style.paddingRight = getAttr(el, 'data-padding-right') || '';\\n          removeAttr(el, 'data-padding-right');\\n        }\\n      });\\n      // Restore sticky content and navbar-toggler margin\\n      dom_selectAll(Selector.STICKY_CONTENT + ', ' + Selector.NAVBAR_TOGGLER).forEach(function (el) {\\n        if (hasAttr(el, 'data-margin-right')) {\\n          el.style.marginRight = getAttr(el, 'data-margin-right') || '';\\n          removeAttr(el, 'data-margin-right');\\n        }\\n      });\\n      // Restore body padding\\n      var body = document.body;\\n      if (hasAttr(body, 'data-padding-right')) {\\n        body.style.paddingRight = getAttr(body, 'data-padding-right') || '';\\n        removeAttr(body, 'data-padding-right');\\n      }\\n    }\\n  },\\n  created: function created() {\\n    // create non-reactive property\\n    this._observer = null;\\n  },\\n  mounted: function mounted() {\\n    // Measure scrollbar\\n    this.getScrollbarWidth();\\n    // Listen for events from others to either open or close ourselves\\n    this.listenOnRoot('bv::show::modal', this.showHandler);\\n    this.listenOnRoot('bv::hide::modal', this.hideHandler);\\n    // Listen for bv:modal::show events, and close ourselves if the opening modal not us\\n    this.listenOnRoot('bv::modal::show', this.modalListener);\\n    // Initially show modal?\\n    if (this.visible === true) {\\n      this.show();\\n    }\\n  },\\n  beforeDestroy: function beforeDestroy() {\\n    // Ensure everything is back to normal\\n    if (this._observer) {\\n      this._observer.disconnect();\\n      this._observer = null;\\n    }\\n    this.setResizeEvent(false);\\n    // Re-adjust body/navbar/fixed padding/margins (if needed)\\n    removeClass(document.body, 'modal-open');\\n    this.resetAdjustments();\\n    this.resetScrollbar();\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/directives/modal/modal.js\\n\\n\\n\\nvar modal_listenTypes = { click: true };\\n\\n/* harmony default export */ var directives_modal_modal = ({\\n  // eslint-disable-next-line no-shadow-restricted-names\\n  bind: function bind(el, binding, vnode) {\\n    target_bindTargets(vnode, binding, modal_listenTypes, function (_ref) {\\n      var targets = _ref.targets,\\n          vnode = _ref.vnode;\\n\\n      targets.forEach(function (target) {\\n        vnode.context.$root.$emit('bv::show::modal', target, vnode.elm);\\n      });\\n    });\\n    if (el.tagName !== 'BUTTON') {\\n      // If element is not a button, we add `role=\\\"button\\\"` for accessibility\\n      setAttr(el, 'role', 'button');\\n    }\\n  },\\n  unbind: function unbind(el, binding, vnode) {\\n    target_unbindTargets(vnode, binding, modal_listenTypes);\\n    if (el.tagName !== 'BUTTON') {\\n      // If element is not a button, we add `role=\\\"button\\\"` for accessibility\\n      removeAttr(el, 'role', 'button');\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/directives/modal/index.js\\n\\n\\n\\nvar modal_directives = {\\n  bModal: directives_modal_modal\\n};\\n\\nvar modal_VuePlugin = {\\n  install: function install(Vue) {\\n    registerDirectives(Vue, modal_directives);\\n  }\\n};\\n\\nvueUse(modal_VuePlugin);\\n\\n/* harmony default export */ var directives_modal = (modal_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/modal/index.js\\n\\n\\n\\n\\nvar modal_components = {\\n  bModal: modal_modal\\n};\\n\\nvar components_modal_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, modal_components);\\n    Vue.use(directives_modal);\\n  }\\n};\\n\\nvueUse(components_modal_VuePlugin);\\n\\n/* harmony default export */ var components_modal = (components_modal_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/nav/nav.js\\n\\n\\n\\nvar nav_props = {\\n  tag: {\\n    type: String,\\n    default: 'ul'\\n  },\\n  fill: {\\n    type: Boolean,\\n    default: false\\n  },\\n  justified: {\\n    type: Boolean,\\n    default: false\\n  },\\n  tabs: {\\n    type: Boolean,\\n    default: false\\n  },\\n  pills: {\\n    type: Boolean,\\n    default: false\\n  },\\n  vertical: {\\n    type: Boolean,\\n    default: false\\n  },\\n  isNavBar: {\\n    type: Boolean,\\n    default: false\\n  }\\n};\\n\\n/* harmony default export */ var nav = ({\\n  functional: true,\\n  props: nav_props,\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data,\\n        children = _ref.children;\\n\\n    if (props.isNavBar) {\\n      utils_warn(\\\"b-nav: Prop 'is-nav-bar' is deprecated. Please use component '<b-navbar-nav>' instead.\\\");\\n    }\\n    return h(props.tag, mergeData(data, {\\n      class: {\\n        'nav': !props.isNavBar,\\n        'navbar-nav': props.isNavBar,\\n        'nav-tabs': props.tabs && !props.isNavBar,\\n        'nav-pills': props.pills && !props.isNavBar,\\n        'flex-column': props.vertical && !props.isNavBar,\\n        'nav-fill': props.fill,\\n        'nav-justified': props.justified\\n      }\\n    }), children);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/nav/nav-item.js\\n\\n\\n\\nvar nav_item_props = propsFactory();\\n\\n/* harmony default export */ var nav_item = ({\\n  functional: true,\\n  props: nav_item_props,\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data,\\n        children = _ref.children;\\n\\n    return h('li', mergeData(data, {\\n      staticClass: 'nav-item'\\n    }), [h(link_link, { staticClass: 'nav-link', props: props }, children)]);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/nav/nav-text.js\\n\\n\\nvar nav_text_props = {\\n  tag: {\\n    type: String,\\n    default: 'span'\\n  }\\n};\\n\\n/* harmony default export */ var nav_text = ({\\n  functional: true,\\n  props: nav_text_props,\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data,\\n        children = _ref.children;\\n\\n    return h(props.tag, mergeData(data, { staticClass: 'navbar-text' }), children);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/nav/nav-form.js\\n\\n\\n\\n/* harmony default export */ var nav_form = ({\\n  functional: true,\\n  props: {\\n    id: {\\n      type: String,\\n      default: null\\n    }\\n  },\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data,\\n        children = _ref.children;\\n\\n    return h(form_form, mergeData(data, { attrs: { id: props.id }, props: { inline: true } }), children);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/nav/nav-item-dropdown.js\\n\\n\\n\\n/* harmony default export */ var nav_item_dropdown = ({\\n  mixins: [mixins_id, mixins_dropdown],\\n  render: function render(h) {\\n    var button = h('a', {\\n      class: this.toggleClasses,\\n      ref: 'toggle',\\n      attrs: {\\n        href: '#',\\n        id: this.safeId('_BV_button_'),\\n        disabled: this.disabled,\\n        'aria-haspopup': 'true',\\n        'aria-expanded': this.visible ? 'true' : 'false'\\n      },\\n      on: {\\n        click: this.toggle,\\n        keydown: this.toggle // space, enter, down\\n      }\\n    }, [this.$slots['button-content'] || this.$slots.text || h('span', { domProps: { innerHTML: this.text } })]);\\n    var menu = h('div', {\\n      class: this.menuClasses,\\n      ref: 'menu',\\n      attrs: { 'aria-labelledby': this.safeId('_BV_button_') },\\n      on: {\\n        mouseover: this.onMouseOver,\\n        keydown: this.onKeydown // tab, up, down, esc\\n      }\\n    }, [this.$slots.default]);\\n    return h('li', { attrs: { id: this.safeId() }, class: this.dropdownClasses }, [button, menu]);\\n  },\\n\\n  computed: {\\n    isNav: function isNav() {\\n      // Signal to dropdown mixin that we are in a navbar\\n      return true;\\n    },\\n    dropdownClasses: function dropdownClasses() {\\n      return ['nav-item', 'b-nav-dropdown', 'dropdown', this.dropup ? 'dropup' : '', this.visible ? 'show' : ''];\\n    },\\n    toggleClasses: function toggleClasses() {\\n      return ['nav-link', this.noCaret ? '' : 'dropdown-toggle', this.disabled ? 'disabled' : '', this.extraToggleClasses ? this.extraToggleClasses : ''];\\n    },\\n    menuClasses: function menuClasses() {\\n      return ['dropdown-menu', this.right ? 'dropdown-menu-right' : 'dropdown-menu-left', this.visible ? 'show' : '', this.extraMenuClasses ? this.extraMenuClasses : ''];\\n    }\\n  },\\n  props: {\\n    noCaret: {\\n      type: Boolean,\\n      default: false\\n    },\\n    extraToggleClasses: {\\n      // Extra Toggle classes\\n      type: String,\\n      default: ''\\n    },\\n    extraMenuClasses: {\\n      // Extra Menu classes\\n      type: String,\\n      default: ''\\n    },\\n    role: {\\n      type: String,\\n      default: 'menu'\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/nav/index.js\\n\\n\\n\\n\\n\\n\\n\\n\\nvar nav_components = {\\n  bNav: nav,\\n  bNavItem: nav_item,\\n  bNavText: nav_text,\\n  bNavForm: nav_form,\\n  bNavItemDropdown: nav_item_dropdown,\\n  bNavItemDd: nav_item_dropdown,\\n  bNavDropdown: nav_item_dropdown,\\n  bNavDd: nav_item_dropdown\\n};\\n\\nvar nav_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, nav_components);\\n    Vue.use(components_dropdown);\\n  }\\n};\\n\\nvueUse(nav_VuePlugin);\\n\\n/* harmony default export */ var components_nav = (nav_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/navbar/navbar.js\\nfunction navbar_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\n\\nvar navbar_props = {\\n  tag: {\\n    type: String,\\n    default: 'nav'\\n  },\\n  type: {\\n    type: String,\\n    default: 'light'\\n  },\\n  variant: {\\n    type: String\\n  },\\n  toggleable: {\\n    type: [Boolean, String],\\n    default: false\\n  },\\n  toggleBreakpoint: {\\n    // Deprecated.  Set toggleable to a string breakpoint\\n    type: String,\\n    default: null\\n  },\\n  fixed: {\\n    type: String\\n  },\\n  sticky: {\\n    type: Boolean,\\n    default: false\\n  }\\n};\\n\\n/* harmony default export */ var navbar = ({\\n  functional: true,\\n  props: navbar_props,\\n  render: function render(h, _ref) {\\n    var _class;\\n\\n    var props = _ref.props,\\n        data = _ref.data,\\n        children = _ref.children;\\n\\n    var breakpoint = props.toggleBreakpoint || (props.toggleable === true ? 'sm' : props.toggleable) || 'sm';\\n    return h(props.tag, mergeData(data, {\\n      staticClass: 'navbar',\\n      class: (_class = {}, navbar_defineProperty(_class, 'navbar-' + props.type, Boolean(props.type)), navbar_defineProperty(_class, 'bg-' + props.variant, Boolean(props.variant)), navbar_defineProperty(_class, 'fixed-' + props.fixed, Boolean(props.fixed)), navbar_defineProperty(_class, 'sticky-top', props.sticky), navbar_defineProperty(_class, 'navbar-expand-' + breakpoint, props.toggleable !== false), _class)\\n    }), children);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/navbar/navbar-nav.js\\n\\n\\nvar navbar_nav_props = {\\n  tag: {\\n    type: String,\\n    default: 'ul'\\n  },\\n  fill: {\\n    type: Boolean,\\n    default: false\\n  },\\n  justified: {\\n    type: Boolean,\\n    default: false\\n  }\\n};\\n\\n/* harmony default export */ var navbar_nav = ({\\n  functional: true,\\n  props: navbar_nav_props,\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data,\\n        children = _ref.children;\\n\\n    return h(props.tag, mergeData(data, {\\n      staticClass: 'navbar-nav',\\n      class: {\\n        'nav-fill': props.fill,\\n        'nav-justified': props.justified\\n      }\\n    }), children);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/navbar/navbar-brand.js\\n\\n\\n\\n\\n\\nvar navbar_brand_linkProps = propsFactory();\\nnavbar_brand_linkProps.href.default = undefined;\\nnavbar_brand_linkProps.to.default = undefined;\\n\\nvar navbar_brand_props = object_assign(navbar_brand_linkProps, {\\n  tag: {\\n    type: String,\\n    default: 'div'\\n  }\\n});\\n\\n/* harmony default export */ var navbar_brand = ({\\n  functional: true,\\n  props: navbar_brand_props,\\n  render: function render(h, _ref) {\\n    var props = _ref.props,\\n        data = _ref.data,\\n        children = _ref.children;\\n\\n    var isLink = Boolean(props.to || props.href);\\n    var tag = isLink ? link_link : props.tag;\\n\\n    return h(tag, mergeData(data, {\\n      staticClass: 'navbar-brand',\\n      props: isLink ? pluckProps(navbar_brand_linkProps, props) : {}\\n    }), children);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/navbar/navbar-toggle.js\\n\\n\\n/* harmony default export */ var navbar_toggle = ({\\n  mixins: [listen_on_root],\\n  render: function render(h) {\\n    return h('button', {\\n      class: ['navbar-toggler'],\\n      attrs: {\\n        type: 'button',\\n        'aria-label': this.label,\\n        'aria-controls': this.target,\\n        'aria-expanded': this.toggleState ? 'true' : 'false'\\n      },\\n      on: { click: this.onClick }\\n    }, [this.$slots.default || h('span', { class: ['navbar-toggler-icon'] })]);\\n  },\\n  data: function data() {\\n    return {\\n      toggleState: false\\n    };\\n  },\\n\\n  props: {\\n    label: {\\n      type: String,\\n      default: 'Toggle navigation'\\n    },\\n    target: {\\n      type: String,\\n      required: true\\n    }\\n  },\\n  methods: {\\n    onClick: function onClick() {\\n      this.$root.$emit('bv::toggle::collapse', this.target);\\n    },\\n    handleStateEvt: function handleStateEvt(id, state) {\\n      if (id === this.target) {\\n        this.toggleState = state;\\n      }\\n    }\\n  },\\n  created: function created() {\\n    this.listenOnRoot('bv::collapse::state', this.handleStateEvt);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/navbar/index.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvar navbar_components = {\\n  bNavbar: navbar,\\n  bNavbarNav: navbar_nav,\\n  bNavbarBrand: navbar_brand,\\n  bNavbarToggle: navbar_toggle,\\n  bNavToggle: navbar_toggle\\n};\\n\\nvar navbar_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, navbar_components);\\n    Vue.use(components_nav);\\n    Vue.use(components_collapse);\\n    Vue.use(components_dropdown);\\n  }\\n};\\n\\nvueUse(navbar_VuePlugin);\\n\\n/* harmony default export */ var components_navbar = (navbar_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/utils/range.js\\n/**\\n * @param {number} length\\n * @return {Array}\\n */\\n/* harmony default export */ var range = (function (length) {\\n  return Array.apply(null, { length: length });\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/mixins/pagination.js\\n/*\\n * Comon props, computed, data, render function, and methods for b-pagination and b-pagination-nav\\n */\\n\\n\\n\\n\\n\\n\\n// Make an array of N to N+X\\nfunction makePageArray(startNum, numPages) {\\n  return range(numPages).map(function (value, index) {\\n    return { number: index + startNum, className: null };\\n  });\\n}\\n\\n// Threshold of limit size when we start/stop showing ellipsis\\nvar ELLIPSIS_THRESHOLD = 3;\\n\\n// Props object\\nvar pagination_props = {\\n  disabled: {\\n    type: Boolean,\\n    default: false\\n  },\\n  value: {\\n    type: Number,\\n    default: 1\\n  },\\n  limit: {\\n    type: Number,\\n    default: 5\\n  },\\n  size: {\\n    type: String,\\n    default: 'md'\\n  },\\n  align: {\\n    type: String,\\n    default: 'left'\\n  },\\n  hideGotoEndButtons: {\\n    type: Boolean,\\n    default: false\\n  },\\n  ariaLabel: {\\n    type: String,\\n    default: 'Pagination'\\n  },\\n  labelFirstPage: {\\n    type: String,\\n    default: 'Goto first page'\\n  },\\n  firstText: {\\n    type: String,\\n    default: '&laquo;'\\n  },\\n  labelPrevPage: {\\n    type: String,\\n    default: 'Goto previous page'\\n  },\\n  prevText: {\\n    type: String,\\n    default: '&lsaquo;'\\n  },\\n  labelNextPage: {\\n    type: String,\\n    default: 'Goto next page'\\n  },\\n  nextText: {\\n    type: String,\\n    default: '&rsaquo;'\\n  },\\n  labelLastPage: {\\n    type: String,\\n    default: 'Goto last page'\\n  },\\n  lastText: {\\n    type: String,\\n    default: '&raquo;'\\n  },\\n  labelPage: {\\n    type: String,\\n    default: 'Goto page'\\n  },\\n  hideEllipsis: {\\n    type: Boolean,\\n    default: false\\n  },\\n  ellipsisText: {\\n    type: String,\\n    default: '&hellip;'\\n  }\\n};\\n\\n/* harmony default export */ var mixins_pagination = ({\\n  components: { bLink: link_link },\\n  data: function data() {\\n    return {\\n      showFirstDots: false,\\n      showLastDots: false,\\n      currentPage: this.value\\n    };\\n  },\\n\\n  props: pagination_props,\\n  render: function render(h) {\\n    var _this = this;\\n\\n    var buttons = [];\\n\\n    // Factory function for prev/next/first/last buttons\\n    var makeEndBtns = function makeEndBtns(linkTo, ariaLabel, btnText, pageTest) {\\n      var button = void 0;\\n      pageTest = pageTest || linkTo; // Page # to test against to disable\\n      if (_this.disabled || _this.isActive(pageTest)) {\\n        button = h('li', {\\n          class: ['page-item', 'disabled'],\\n          attrs: { role: 'none presentation', 'aria-hidden': 'true' }\\n        }, [h('span', {\\n          class: ['page-link'],\\n          domProps: { innerHTML: btnText }\\n        })]);\\n      } else {\\n        button = h('li', {\\n          class: ['page-item'],\\n          attrs: { role: 'none presentation' }\\n        }, [h('b-link', {\\n          class: ['page-link'],\\n          props: _this.linkProps(linkTo),\\n          attrs: {\\n            role: 'menuitem',\\n            tabindex: '-1',\\n            'aria-label': ariaLabel,\\n            'aria-controls': _this.ariaControls || null\\n          },\\n          on: {\\n            click: function click(evt) {\\n              _this.onClick(linkTo, evt);\\n            },\\n            keydown: function keydown(evt) {\\n              // Links don't normally respond to SPACE, so we add that functionality\\n              if (evt.keyCode === key_codes.SPACE) {\\n                evt.preventDefault();\\n                _this.onClick(linkTo, evt);\\n              }\\n            }\\n          }\\n        }, [h('span', {\\n          attrs: { 'aria-hidden': 'true' },\\n          domProps: { innerHTML: btnText }\\n        })])]);\\n      }\\n      return button;\\n    };\\n\\n    // Ellipsis factory\\n    var makeEllipsis = function makeEllipsis() {\\n      return h('li', {\\n        class: ['page-item', 'disabled', 'd-none', 'd-sm-flex'],\\n        attrs: { role: 'separator' }\\n      }, [h('span', {\\n        class: ['page-link'],\\n        domProps: { innerHTML: _this.ellipsisText }\\n      })]);\\n    };\\n\\n    // Goto First Page button\\n    buttons.push(this.hideGotoEndButtons ? h(false) : makeEndBtns(1, this.labelFirstPage, this.firstText));\\n\\n    // Goto Previous page button\\n    buttons.push(makeEndBtns(this.currentPage - 1, this.labelPrevPage, this.prevText, 1));\\n\\n    // First Ellipsis Bookend\\n    buttons.push(this.showFirstDots ? makeEllipsis() : h(false));\\n\\n    // Individual Page links\\n    this.pageList.forEach(function (page) {\\n      var inner = void 0;\\n      var pageNum = _this.makePage(page.number);\\n      if (_this.disabled) {\\n        inner = h('span', {\\n          class: ['page-link'],\\n          domProps: { innerHTML: pageNum }\\n        });\\n      } else {\\n        var active = _this.isActive(page.number);\\n        inner = h('b-link', {\\n          class: _this.pageLinkClasses(page),\\n          props: _this.linkProps(page.number),\\n          attrs: {\\n            role: 'menuitemradio',\\n            tabindex: active ? '0' : '-1',\\n            'aria-controls': _this.ariaControls || null,\\n            'aria-label': _this.labelPage + ' ' + page.number,\\n            'aria-checked': active ? 'true' : 'false',\\n            'aria-posinset': page.number,\\n            'aria-setsize': _this.numberOfPages\\n          },\\n          domProps: { innerHTML: pageNum },\\n          on: {\\n            click: function click(evt) {\\n              _this.onClick(page.number, evt);\\n            },\\n            keydown: function keydown(evt) {\\n              if (evt.keyCode === key_codes.SPACE) {\\n                evt.preventDefault();\\n                _this.onClick(page.number, evt);\\n              }\\n            }\\n          }\\n        });\\n      }\\n      buttons.push(h('li', {\\n        key: page.number,\\n        class: _this.pageItemClasses(page),\\n        attrs: { role: 'none presentation' }\\n      }, [inner]));\\n    });\\n\\n    // Last Ellipsis Bookend\\n    buttons.push(this.showLastDots ? makeEllipsis() : h(false));\\n\\n    // Goto Next page button\\n    buttons.push(makeEndBtns(this.currentPage + 1, this.labelNextPage, this.nextText, this.numberOfPages));\\n\\n    // Goto Last Page button\\n    buttons.push(this.hideGotoEndButtons ? h(false) : makeEndBtns(this.numberOfPages, this.labelLastPage, this.lastText));\\n\\n    // Assemble the paginatiom buttons\\n    var pagination = h('ul', {\\n      ref: 'ul',\\n      class: ['pagination', 'b-pagination', this.btnSize, this.alignment],\\n      attrs: {\\n        role: 'menubar',\\n        'aria-disabled': this.disabled ? 'true' : 'false',\\n        'aria-label': this.ariaLabel || null\\n      },\\n      on: {\\n        keydown: function keydown(evt) {\\n          var keyCode = evt.keyCode;\\n          var shift = evt.shiftKey;\\n          if (keyCode === key_codes.LEFT) {\\n            evt.preventDefault();\\n            shift ? _this.focusFirst() : _this.focusPrev();\\n          } else if (keyCode === key_codes.RIGHT) {\\n            evt.preventDefault();\\n            shift ? _this.focusLast() : _this.focusNext();\\n          }\\n        }\\n      }\\n    }, buttons);\\n\\n    // if we are pagination-nav, wrap in '<nav>' wrapper\\n    return this.isNav ? h('nav', {}, [pagination]) : pagination;\\n  },\\n\\n  watch: {\\n    currentPage: function currentPage(newPage, oldPage) {\\n      if (newPage !== oldPage) {\\n        this.$emit('input', newPage);\\n      }\\n    },\\n    value: function value(newValue, oldValue) {\\n      if (newValue !== oldValue) {\\n        this.currentPage = newValue;\\n      }\\n    }\\n  },\\n  computed: {\\n    btnSize: function btnSize() {\\n      return this.size ? 'pagination-' + this.size : '';\\n    },\\n    alignment: function alignment() {\\n      if (this.align === 'center') {\\n        return 'justify-content-center';\\n      } else if (this.align === 'end' || this.align === 'right') {\\n        return 'justify-content-end';\\n      }\\n      return '';\\n    },\\n    pageList: function pageList() {\\n      // Sanity checks\\n      if (this.currentPage > this.numberOfPages) {\\n        this.currentPage = this.numberOfPages;\\n      } else if (this.currentPage < 1) {\\n        this.currentPage = 1;\\n      }\\n      // - Hide first ellipsis marker\\n      this.showFirstDots = false;\\n      // - Hide last ellipsis marker\\n      this.showLastDots = false;\\n      var numLinks = this.limit;\\n      var startNum = 1;\\n      if (this.numberOfPages <= this.limit) {\\n        // Special Case: Less pages available than the limit of displayed pages\\n        numLinks = this.numberOfPages;\\n      } else if (this.currentPage < this.limit - 1 && this.limit > ELLIPSIS_THRESHOLD) {\\n        // We are near the beginning of the page list\\n        if (!this.hideEllipsis) {\\n          numLinks = this.limit - 1;\\n          this.showLastDots = true;\\n        }\\n      } else if (this.numberOfPages - this.currentPage + 2 < this.limit && this.limit > ELLIPSIS_THRESHOLD) {\\n        // We are near the end of the list\\n        if (!this.hideEllipsis) {\\n          this.showFirstDots = true;\\n          numLinks = this.limit - 1;\\n        }\\n        startNum = this.numberOfPages - numLinks + 1;\\n      } else {\\n        // We are somewhere in the middle of the page list\\n        if (this.limit > ELLIPSIS_THRESHOLD && !this.hideEllipsis) {\\n          this.showFirstDots = true;\\n          this.showLastDots = true;\\n          numLinks = this.limit - 2;\\n        }\\n        startNum = this.currentPage - Math.floor(numLinks / 2);\\n      }\\n      // Sanity checks\\n      if (startNum < 1) {\\n        startNum = 1;\\n      } else if (startNum > this.numberOfPages - numLinks) {\\n        startNum = this.numberOfPages - numLinks + 1;\\n      }\\n      // Generate list of page numbers\\n      var pages = makePageArray(startNum, numLinks);\\n      // We limit to a total of 3 page buttons on small screens\\n      // Ellipsis will also be hidden on small screens\\n      if (pages.length > 3) {\\n        var idx = this.currentPage - startNum;\\n        if (idx === 0) {\\n          // Keep leftmost 3 buttons visible\\n          for (var i = 3; i < pages.length; i++) {\\n            pages[i].className = 'd-none d-sm-flex';\\n          }\\n        } else if (idx === pages.length - 1) {\\n          // Keep rightmost 3 buttons visible\\n          for (var _i = 0; _i < pages.length - 3; _i++) {\\n            pages[_i].className = 'd-none d-sm-flex';\\n          }\\n        } else {\\n          // hide left button(s)\\n          for (var _i2 = 0; _i2 < idx - 1; _i2++) {\\n            pages[_i2].className = 'd-none d-sm-flex';\\n          }\\n          // hide right button(s)\\n          for (var _i3 = pages.length - 1; _i3 > idx + 1; _i3--) {\\n            pages[_i3].className = 'd-none d-sm-flex';\\n          }\\n        }\\n      }\\n      return pages;\\n    }\\n  },\\n  methods: {\\n    isActive: function isActive(pagenum) {\\n      return pagenum === this.currentPage;\\n    },\\n    pageItemClasses: function pageItemClasses(page) {\\n      return ['page-item', this.disabled ? 'disabled' : '', this.isActive(page.number) ? 'active' : '', page.className];\\n    },\\n    pageLinkClasses: function pageLinkClasses(page) {\\n      return ['page-link', this.disabled ? 'disabled' : '',\\n      // Interim workaround to get better focus styling of active button\\n      // See https://github.com/twbs/bootstrap/issues/24838\\n      this.isActive(page.number) ? 'btn-primary' : ''];\\n    },\\n    getButtons: function getButtons() {\\n      // Return only buttons that are visible\\n      return dom_selectAll('a.page-link', this.$el).filter(function (btn) {\\n        return isVisible(btn);\\n      });\\n    },\\n    setBtnFocus: function setBtnFocus(btn) {\\n      this.$nextTick(function () {\\n        btn.focus();\\n      });\\n    },\\n    focusCurrent: function focusCurrent() {\\n      var _this2 = this;\\n\\n      var btn = this.getButtons().find(function (el) {\\n        return parseInt(getAttr(el, 'aria-posinset'), 10) === _this2.currentPage;\\n      });\\n      if (btn && btn.focus) {\\n        this.setBtnFocus(btn);\\n      } else {\\n        // Fallback if current page is not in button list\\n        this.focusFirst();\\n      }\\n    },\\n    focusFirst: function focusFirst() {\\n      var btn = this.getButtons().find(function (el) {\\n        return !isDisabled(el);\\n      });\\n      if (btn && btn.focus && btn !== document.activeElement) {\\n        this.setBtnFocus(btn);\\n      }\\n    },\\n    focusLast: function focusLast() {\\n      var btn = this.getButtons().reverse().find(function (el) {\\n        return !isDisabled(el);\\n      });\\n      if (btn && btn.focus && btn !== document.activeElement) {\\n        this.setBtnFocus(btn);\\n      }\\n    },\\n    focusPrev: function focusPrev() {\\n      var buttons = this.getButtons();\\n      var idx = buttons.indexOf(document.activeElement);\\n      if (idx > 0 && !isDisabled(buttons[idx - 1]) && buttons[idx - 1].focus) {\\n        this.setBtnFocus(buttons[idx - 1]);\\n      }\\n    },\\n    focusNext: function focusNext() {\\n      var buttons = this.getButtons();\\n      var idx = buttons.indexOf(document.activeElement);\\n      var cnt = buttons.length - 1;\\n      if (idx < cnt && !isDisabled(buttons[idx + 1]) && buttons[idx + 1].focus) {\\n        this.setBtnFocus(buttons[idx + 1]);\\n      }\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/pagination/pagination.js\\n\\n\\n\\nvar pagination_pagination_props = {\\n  perPage: {\\n    type: Number,\\n    default: 20\\n  },\\n  totalRows: {\\n    type: Number,\\n    default: 20\\n  },\\n  ariaControls: {\\n    type: String,\\n    default: null\\n  }\\n\\n  // Our render function is brought in from the pagination mixin\\n};/* harmony default export */ var pagination_pagination = ({\\n  mixins: [mixins_pagination],\\n  props: pagination_pagination_props,\\n  computed: {\\n    numberOfPages: function numberOfPages() {\\n      var result = Math.ceil(this.totalRows / this.perPage);\\n      return result < 1 ? 1 : result;\\n    }\\n  },\\n  methods: {\\n    // These methods are used by the render function\\n    onClick: function onClick(num, evt) {\\n      var _this = this;\\n\\n      // Handle edge cases where number of pages has changed (i.e. if perPage changes)\\n      if (num > this.numberOfPages) {\\n        num = this.numberOfPages;\\n      } else if (num < 1) {\\n        num = 1;\\n      }\\n      this.currentPage = num;\\n      this.$nextTick(function () {\\n        // Keep the current button focused if possible\\n        var target = evt.target;\\n        if (isVisible(target) && _this.$el.contains(target) && target.focus) {\\n          target.focus();\\n        } else {\\n          _this.focusCurrent();\\n        }\\n      });\\n      this.$emit('change', this.currentPage);\\n    },\\n    makePage: function makePage(pagenum) {\\n      return pagenum;\\n    },\\n    linkProps: function linkProps(pagenum) {\\n      return { href: '#' };\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/pagination/index.js\\n\\n\\n\\nvar pagination_components = {\\n  bPagination: pagination_pagination\\n};\\n\\nvar pagination_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, pagination_components);\\n  }\\n};\\n\\nvueUse(pagination_VuePlugin);\\n\\n/* harmony default export */ var components_pagination = (pagination_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/pagination-nav/pagination-nav.js\\nvar pagination_nav_typeof = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\n\\n\\n\\n\\n// Props needed for router links\\nvar routerProps = pickLinkProps('activeClass', 'exactActiveClass', 'append', 'exact', 'replace', 'target', 'rel');\\n\\n// Props object\\nvar pagination_nav_props = object_assign(\\n// pagination-nav specific props\\n{\\n  numberOfPages: {\\n    type: Number,\\n    default: 1\\n  },\\n  baseUrl: {\\n    type: String,\\n    default: '/'\\n  },\\n  useRouter: {\\n    type: Boolean,\\n    default: false\\n  },\\n  linkGen: {\\n    type: Function,\\n    default: null\\n  },\\n  pageGen: {\\n    type: Function,\\n    default: null\\n  }\\n},\\n// Router specific props\\nrouterProps);\\n// Our render function is brought in via the pagination mixin\\n/* harmony default export */ var pagination_nav = ({\\n  mixins: [mixins_pagination],\\n  props: pagination_nav_props,\\n  computed: {\\n    // Used by render function to trigger wraping in '<nav>' element\\n    isNav: function isNav() {\\n      return true;\\n    }\\n  },\\n  methods: {\\n    onClick: function onClick(pageNum, evt) {\\n      this.currentPage = pageNum;\\n    },\\n    makePage: function makePage(pagenum) {\\n      if (this.pageGen && typeof this.pageGen === 'function') {\\n        return this.pageGen(pagenum);\\n      }\\n      return pagenum;\\n    },\\n    makeLink: function makeLink(pagenum) {\\n      if (this.linkGen && typeof this.linkGen === 'function') {\\n        return this.linkGen(pagenum);\\n      }\\n      var link = '' + this.baseUrl + pagenum;\\n      return this.useRouter ? { path: link } : link;\\n    },\\n    linkProps: function linkProps(pagenum) {\\n      var link = this.makeLink(pagenum);\\n      var props = {\\n        href: typeof link === 'string' ? link : void 0,\\n        target: this.target || null,\\n        rel: this.rel || null,\\n        disabled: this.disabled\\n      };\\n      if (this.useRouter || (typeof link === 'undefined' ? 'undefined' : pagination_nav_typeof(link)) === 'object') {\\n        props = object_assign(props, {\\n          to: link,\\n          exact: this.exact,\\n          activeClass: this.activeClass,\\n          exactActiveClass: this.exactActiveClass,\\n          append: this.append,\\n          replace: this.replace\\n        });\\n      }\\n      return props;\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/pagination-nav/index.js\\n\\n\\n\\nvar pagination_nav_components = {\\n  bPaginationNav: pagination_nav\\n};\\n\\nvar pagination_nav_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, pagination_nav_components);\\n  }\\n};\\n\\nvueUse(pagination_nav_VuePlugin);\\n\\n/* harmony default export */ var components_pagination_nav = (pagination_nav_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/utils/tooltip.class.js\\nvar tooltip_class_typeof = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\nvar tooltip_class_createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction tooltip_class_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n\\n\\n\\n\\n\\n\\nvar NAME = 'tooltip';\\nvar CLASS_PREFIX = 'bs-tooltip';\\nvar BSCLS_PREFIX_REGEX = new RegExp('\\\\\\\\b' + CLASS_PREFIX + '\\\\\\\\S+', 'g');\\n\\nvar TRANSITION_DURATION = 150;\\n\\n// Modal $root hidden event\\nvar MODAL_CLOSE_EVENT = 'bv::modal::hidden';\\n// Modal container for appending tip/popover\\nvar MODAL_CLASS = '.modal-content';\\n\\nvar tooltip_class_AttachmentMap = {\\n  AUTO: 'auto',\\n  TOP: 'top',\\n  RIGHT: 'right',\\n  BOTTOM: 'bottom',\\n  LEFT: 'left',\\n  TOPLEFT: 'top',\\n  TOPRIGHT: 'top',\\n  RIGHTTOP: 'right',\\n  RIGHTBOTTOM: 'right',\\n  BOTTOMLEFT: 'bottom',\\n  BOTTOMRIGHT: 'bottom',\\n  LEFTTOP: 'left',\\n  LEFTBOTTOM: 'left'\\n};\\n\\nvar OffsetMap = {\\n  AUTO: 0,\\n  TOPLEFT: -1,\\n  TOP: 0,\\n  TOPRIGHT: +1,\\n  RIGHTTOP: -1,\\n  RIGHT: 0,\\n  RIGHTBOTTOM: +1,\\n  BOTTOMLEFT: -1,\\n  BOTTOM: 0,\\n  BOTTOMRIGHT: +1,\\n  LEFTTOP: -1,\\n  LEFT: 0,\\n  LEFTBOTTOM: +1\\n};\\n\\nvar HoverState = {\\n  SHOW: 'show',\\n  OUT: 'out'\\n};\\n\\nvar ClassName = {\\n  FADE: 'fade',\\n  SHOW: 'show'\\n};\\n\\nvar tooltip_class_Selector = {\\n  TOOLTIP: '.tooltip',\\n  TOOLTIP_INNER: '.tooltip-inner',\\n  ARROW: '.arrow'\\n\\n  // ESLINT: Not used\\n  // const Trigger = {\\n  //   HOVER: 'hover',\\n  //   FOCUS: 'focus',\\n  //   CLICK: 'click',\\n  //   BLUR: 'blur',\\n  //   MANUAL: 'manual'\\n  // }\\n\\n};var Defaults = {\\n  animation: true,\\n  template: '<div class=\\\"tooltip\\\" role=\\\"tooltip\\\">' + '<div class=\\\"arrow\\\"></div>' + '<div class=\\\"tooltip-inner\\\"></div>' + '</div>',\\n  trigger: 'hover focus',\\n  title: '',\\n  delay: 0,\\n  html: false,\\n  placement: 'top',\\n  offset: 0,\\n  arrowPadding: 6,\\n  container: false,\\n  fallbackPlacement: 'flip',\\n  callbacks: {},\\n  boundary: 'scrollParent'\\n\\n  // Transition Event names\\n};var tooltip_class_TransitionEndEvents = {\\n  WebkitTransition: ['webkitTransitionEnd'],\\n  MozTransition: ['transitionend'],\\n  OTransition: ['otransitionend', 'oTransitionEnd'],\\n  transition: ['transitionend']\\n\\n  // Client Side Tip ID counter for aria-describedby attribute\\n  // Could use Alex's uid generator util\\n  // Each tooltip requires a unique client side ID\\n};var NEXTID = 1;\\n/* istanbul ignore next */\\nfunction generateId(name) {\\n  return '__BV_' + name + '_' + NEXTID++ + '__';\\n}\\n\\n/*\\n * ToolTip Class definition\\n */\\n/* istanbul ignore next: difficult to test in Jest/JSDOM environment */\\n\\nvar tooltip_class_ToolTip = function () {\\n  // Main constructor\\n  function ToolTip(element, config, $root) {\\n    tooltip_class_classCallCheck(this, ToolTip);\\n\\n    // New tooltip object\\n    this.$isEnabled = true;\\n    this.$fadeTimeout = null;\\n    this.$hoverTimeout = null;\\n    this.$visibleInterval = null;\\n    this.$hoverState = '';\\n    this.$activeTrigger = {};\\n    this.$popper = null;\\n    this.$element = element;\\n    this.$tip = null;\\n    this.$id = generateId(this.constructor.NAME);\\n    this.$root = $root || null;\\n    this.$routeWatcher = null;\\n    // We use a bound version of the following handlers for root/modal listeners to maintain the 'this' context\\n    this.$forceHide = this.forceHide.bind(this);\\n    this.$doHide = this.doHide.bind(this);\\n    this.$doShow = this.doShow.bind(this);\\n    this.$doDisable = this.doDisable.bind(this);\\n    this.$doEnable = this.doEnable.bind(this);\\n    // Set the configuration\\n    this.updateConfig(config);\\n  }\\n\\n  // NOTE: Overridden by PopOver class\\n\\n\\n  tooltip_class_createClass(ToolTip, [{\\n    key: 'updateConfig',\\n\\n\\n    // Update config\\n    value: function updateConfig(config) {\\n      // Merge config into defaults. We use \\\"this\\\" here because PopOver overrides Default\\n      var updatedConfig = object_assign({}, this.constructor.Default, config);\\n\\n      // Sanitize delay\\n      if (config.delay && typeof config.delay === 'number') {\\n        updatedConfig.delay = {\\n          show: config.delay,\\n          hide: config.delay\\n        };\\n      }\\n\\n      // Title for tooltip and popover\\n      if (config.title && typeof config.title === 'number') {\\n        updatedConfig.title = config.title.toString();\\n      }\\n\\n      // Content only for popover\\n      if (config.content && typeof config.content === 'number') {\\n        updatedConfig.content = config.content.toString();\\n      }\\n\\n      // Hide element original title if needed\\n      this.fixTitle();\\n      // Update the config\\n      this.$config = updatedConfig;\\n      // Stop/Restart listening\\n      this.unListen();\\n      this.listen();\\n    }\\n\\n    // Destroy this instance\\n\\n  }, {\\n    key: 'destroy',\\n    value: function destroy() {\\n      // Stop listening to trigger events\\n      this.unListen();\\n      // Disable while open listeners/watchers\\n      this.setWhileOpenListeners(false);\\n      // Clear any timeouts\\n      clearTimeout(this.$hoverTimeout);\\n      this.$hoverTimeout = null;\\n      clearTimeout(this.$fadeTimeout);\\n      this.$fadeTimeout = null;\\n      // Remove popper\\n      if (this.$popper) {\\n        this.$popper.destroy();\\n      }\\n      this.$popper = null;\\n      // Remove tip from document\\n      if (this.$tip && this.$tip.parentElement) {\\n        this.$tip.parentElement.removeChild(this.$tip);\\n      }\\n      this.$tip = null;\\n      // Null out other properties\\n      this.$id = null;\\n      this.$isEnabled = null;\\n      this.$root = null;\\n      this.$element = null;\\n      this.$config = null;\\n      this.$hoverState = null;\\n      this.$activeTrigger = null;\\n      this.$forceHide = null;\\n      this.$doHide = null;\\n      this.$doShow = null;\\n      this.$doDisable = null;\\n      this.$doEnable = null;\\n    }\\n  }, {\\n    key: 'enable',\\n    value: function enable() {\\n      // Create a non-cancelable BvEvent\\n      var enabledEvt = new bv_event_class('enabled', {\\n        cancelable: false,\\n        target: this.$element,\\n        relatedTarget: null\\n      });\\n      this.$isEnabled = true;\\n      this.emitEvent(enabledEvt);\\n    }\\n  }, {\\n    key: 'disable',\\n    value: function disable() {\\n      // Create a non-cancelable BvEvent\\n      var disabledEvt = new bv_event_class('disabled', {\\n        cancelable: false,\\n        target: this.$element,\\n        relatedTarget: null\\n      });\\n      this.$isEnabled = false;\\n      this.emitEvent(disabledEvt);\\n    }\\n\\n    // Click toggler\\n\\n  }, {\\n    key: 'toggle',\\n    value: function toggle(event) {\\n      if (!this.$isEnabled) {\\n        return;\\n      }\\n      if (event) {\\n        this.$activeTrigger.click = !this.$activeTrigger.click;\\n\\n        if (this.isWithActiveTrigger()) {\\n          this.enter(null);\\n        } else {\\n          this.leave(null);\\n        }\\n      } else {\\n        if (hasClass(this.getTipElement(), ClassName.SHOW)) {\\n          this.leave(null);\\n        } else {\\n          this.enter(null);\\n        }\\n      }\\n    }\\n\\n    // Show tooltip\\n\\n  }, {\\n    key: 'show',\\n    value: function show() {\\n      var _this = this;\\n\\n      if (!document.body.contains(this.$element) || !isVisible(this.$element)) {\\n        // If trigger element isn't in the DOM or is not visible\\n        return;\\n      }\\n      // Build tooltip element (also sets this.$tip)\\n      var tip = this.getTipElement();\\n      this.fixTitle();\\n      this.setContent(tip);\\n      if (!this.isWithContent(tip)) {\\n        // if No content, don't bother showing\\n        this.$tip = null;\\n        return;\\n      }\\n\\n      // Set ID on tip and aria-describedby on element\\n      setAttr(tip, 'id', this.$id);\\n      this.addAriaDescribedby();\\n\\n      // Set animation on or off\\n      if (this.$config.animation) {\\n        addClass(tip, ClassName.FADE);\\n      } else {\\n        removeClass(tip, ClassName.FADE);\\n      }\\n\\n      var placement = this.getPlacement();\\n      var attachment = this.constructor.getAttachment(placement);\\n      this.addAttachmentClass(attachment);\\n\\n      // Create a cancelable BvEvent\\n      var showEvt = new bv_event_class('show', {\\n        cancelable: true,\\n        target: this.$element,\\n        relatedTarget: tip\\n      });\\n      this.emitEvent(showEvt);\\n      if (showEvt.defaultPrevented) {\\n        // Don't show if event cancelled\\n        this.$tip = null;\\n        return;\\n      }\\n\\n      // Insert tooltip if needed\\n      var container = this.getContainer();\\n      if (!document.body.contains(tip)) {\\n        container.appendChild(tip);\\n      }\\n\\n      // Refresh popper\\n      this.removePopper();\\n      this.$popper = new popper[\\\"a\\\" /* default */](this.$element, tip, this.getPopperConfig(placement, tip));\\n\\n      // Transitionend Callback\\n      var complete = function complete() {\\n        if (_this.$config.animation) {\\n          _this.fixTransition(tip);\\n        }\\n        var prevHoverState = _this.$hoverState;\\n        _this.$hoverState = null;\\n        if (prevHoverState === HoverState.OUT) {\\n          _this.leave(null);\\n        }\\n        // Create a non-cancelable BvEvent\\n        var shownEvt = new bv_event_class('shown', {\\n          cancelable: false,\\n          target: _this.$element,\\n          relatedTarget: tip\\n        });\\n        _this.emitEvent(shownEvt);\\n      };\\n\\n      // Enable while open listeners/watchers\\n      this.setWhileOpenListeners(true);\\n\\n      // Show tip\\n      addClass(tip, ClassName.SHOW);\\n\\n      // Start the transition/animation\\n      this.transitionOnce(tip, complete);\\n    }\\n\\n    // handler for periodic visibility check\\n\\n  }, {\\n    key: 'visibleCheck',\\n    value: function visibleCheck(on) {\\n      var _this2 = this;\\n\\n      clearInterval(this.$visibleInterval);\\n      this.$visibleInterval = null;\\n      if (on) {\\n        this.$visibleInterval = setInterval(function () {\\n          var tip = _this2.getTipElement();\\n          if (tip && !isVisible(_this2.$element) && hasClass(tip, ClassName.SHOW)) {\\n            // Element is no longer visible, so force-hide the tooltip\\n            _this2.forceHide();\\n          }\\n        }, 100);\\n      }\\n    }\\n  }, {\\n    key: 'setWhileOpenListeners',\\n    value: function setWhileOpenListeners(on) {\\n      // Modal close events\\n      this.setModalListener(on);\\n      // Periodic $element visibility check\\n      // For handling when tip is in <keepalive>, tabs, carousel, etc\\n      this.visibleCheck(on);\\n      // Route change events\\n      this.setRouteWatcher(on);\\n      // Ontouch start listeners\\n      this.setOnTouchStartListener(on);\\n      if (on && /(focus|blur)/.test(this.$config.trigger)) {\\n        // If focus moves between trigger element and tip container, dont close\\n        eventOn(this.$tip, 'focusout', this);\\n      } else {\\n        eventOff(this.$tip, 'focusout', this);\\n      }\\n    }\\n\\n    // force hide of tip (internal method)\\n\\n  }, {\\n    key: 'forceHide',\\n    value: function forceHide() {\\n      if (!this.$tip || !hasClass(this.$tip, ClassName.SHOW)) {\\n        return;\\n      }\\n      // Disable while open listeners/watchers\\n      this.setWhileOpenListeners(false);\\n      // Clear any hover enter/leave event\\n      clearTimeout(this.$hoverTimeout);\\n      this.$hoverTimeout = null;\\n      this.$hoverState = '';\\n      // Hide the tip\\n      this.hide(null, true);\\n    }\\n\\n    // Hide tooltip\\n\\n  }, {\\n    key: 'hide',\\n    value: function hide(callback, force) {\\n      var _this3 = this;\\n\\n      var tip = this.$tip;\\n      if (!tip) {\\n        return;\\n      }\\n\\n      // Create a canelable BvEvent\\n      var hideEvt = new bv_event_class('hide', {\\n        // We disable cancelling if force is true\\n        cancelable: !force,\\n        target: this.$element,\\n        relatedTarget: tip\\n      });\\n      this.emitEvent(hideEvt);\\n      if (hideEvt.defaultPrevented) {\\n        // Don't hide if event cancelled\\n        return;\\n      }\\n\\n      // Transitionend Callback\\n      /* istanbul ignore next */\\n      var complete = function complete() {\\n        if (_this3.$hoverState !== HoverState.SHOW && tip.parentNode) {\\n          // Remove tip from dom, and force recompile on next show\\n          tip.parentNode.removeChild(tip);\\n          _this3.removeAriaDescribedby();\\n          _this3.removePopper();\\n          _this3.$tip = null;\\n        }\\n        if (callback) {\\n          callback();\\n        }\\n        // Create a non-cancelable BvEvent\\n        var hiddenEvt = new bv_event_class('hidden', {\\n          cancelable: false,\\n          target: _this3.$element,\\n          relatedTarget: null\\n        });\\n        _this3.emitEvent(hiddenEvt);\\n      };\\n\\n      // Disable while open listeners/watchers\\n      this.setWhileOpenListeners(false);\\n\\n      // If forced close, disable animation\\n      if (force) {\\n        removeClass(tip, ClassName.FADE);\\n      }\\n      // Hide tip\\n      removeClass(tip, ClassName.SHOW);\\n\\n      this.$activeTrigger.click = false;\\n      this.$activeTrigger.focus = false;\\n      this.$activeTrigger.hover = false;\\n\\n      // Start the hide transition\\n      this.transitionOnce(tip, complete);\\n\\n      this.$hoverState = '';\\n    }\\n  }, {\\n    key: 'emitEvent',\\n    value: function emitEvent(evt) {\\n      var evtName = evt.type;\\n      if (this.$root && this.$root.$emit) {\\n        // Emit an event on $root\\n        this.$root.$emit('bv::' + this.constructor.NAME + '::' + evtName, evt);\\n      }\\n      var callbacks = this.$config.callbacks || {};\\n      if (typeof callbacks[evtName] === 'function') {\\n        callbacks[evtName](evt);\\n      }\\n    }\\n  }, {\\n    key: 'getContainer',\\n    value: function getContainer() {\\n      var container = this.$config.container;\\n      var body = document.body;\\n      // If we are in a modal, we append to the modal instead of body, unless a container is specified\\n      return container === false ? closest(MODAL_CLASS, this.$element) || body : dom_select(container, body) || body;\\n    }\\n\\n    // Will be overritten by popover if needed\\n\\n  }, {\\n    key: 'addAriaDescribedby',\\n    value: function addAriaDescribedby() {\\n      // Add aria-describedby on trigger element, without removing any other IDs\\n      var desc = getAttr(this.$element, 'aria-describedby') || '';\\n      desc = desc.split(/\\\\s+/).concat(this.$id).join(' ').trim();\\n      setAttr(this.$element, 'aria-describedby', desc);\\n    }\\n\\n    // Will be overritten by popover if needed\\n\\n  }, {\\n    key: 'removeAriaDescribedby',\\n    value: function removeAriaDescribedby() {\\n      var _this4 = this;\\n\\n      var desc = getAttr(this.$element, 'aria-describedby') || '';\\n      desc = desc.split(/\\\\s+/).filter(function (d) {\\n        return d !== _this4.$id;\\n      }).join(' ').trim();\\n      if (desc) {\\n        setAttr(this.$element, 'aria-describedby', desc);\\n      } else {\\n        removeAttr(this.$element, 'aria-describedby');\\n      }\\n    }\\n  }, {\\n    key: 'removePopper',\\n    value: function removePopper() {\\n      if (this.$popper) {\\n        this.$popper.destroy();\\n      }\\n      this.$popper = null;\\n    }\\n\\n    /* istanbul ignore next */\\n\\n  }, {\\n    key: 'transitionOnce',\\n    value: function transitionOnce(tip, complete) {\\n      var _this5 = this;\\n\\n      var transEvents = this.getTransitionEndEvents();\\n      var called = false;\\n      clearTimeout(this.$fadeTimeout);\\n      this.$fadeTimeout = null;\\n      var fnOnce = function fnOnce() {\\n        if (called) {\\n          return;\\n        }\\n        called = true;\\n        clearTimeout(_this5.$fadeTimeout);\\n        _this5.$fadeTimeout = null;\\n        transEvents.forEach(function (evtName) {\\n          eventOff(tip, evtName, fnOnce);\\n        });\\n        // Call complete callback\\n        complete();\\n      };\\n      if (hasClass(tip, ClassName.FADE)) {\\n        transEvents.forEach(function (evtName) {\\n          eventOn(tip, evtName, fnOnce);\\n        });\\n        // Fallback to setTimeout\\n        this.$fadeTimeout = setTimeout(fnOnce, TRANSITION_DURATION);\\n      } else {\\n        fnOnce();\\n      }\\n    }\\n\\n    // What transitionend event(s) to use? (returns array of event names)\\n\\n  }, {\\n    key: 'getTransitionEndEvents',\\n    value: function getTransitionEndEvents() {\\n      for (var name in tooltip_class_TransitionEndEvents) {\\n        if (this.$element.style[name] !== undefined) {\\n          return tooltip_class_TransitionEndEvents[name];\\n        }\\n      }\\n      // fallback\\n      return [];\\n    }\\n  }, {\\n    key: 'update',\\n    value: function update() {\\n      if (this.$popper !== null) {\\n        this.$popper.scheduleUpdate();\\n      }\\n    }\\n\\n    // NOTE: Overridden by PopOver class\\n\\n  }, {\\n    key: 'isWithContent',\\n    value: function isWithContent(tip) {\\n      tip = tip || this.$tip;\\n      if (!tip) {\\n        return false;\\n      }\\n      return Boolean((dom_select(tooltip_class_Selector.TOOLTIP_INNER, tip) || {}).innerHTML);\\n    }\\n\\n    // NOTE: Overridden by PopOver class\\n\\n  }, {\\n    key: 'addAttachmentClass',\\n    value: function addAttachmentClass(attachment) {\\n      addClass(this.getTipElement(), CLASS_PREFIX + '-' + attachment);\\n    }\\n  }, {\\n    key: 'getTipElement',\\n    value: function getTipElement() {\\n      if (!this.$tip) {\\n        // Try and compile user supplied template, or fallback to default template\\n        this.$tip = this.compileTemplate(this.$config.template) || this.compileTemplate(this.constructor.Default.template);\\n      }\\n      // Add tab index so tip can be focused, and to allow it to be set as relatedTargt in focusin/out events\\n      this.$tip.tabIndex = -1;\\n      return this.$tip;\\n    }\\n  }, {\\n    key: 'compileTemplate',\\n    value: function compileTemplate(html) {\\n      if (!html || typeof html !== 'string') {\\n        return null;\\n      }\\n      var div = document.createElement('div');\\n      div.innerHTML = html.trim();\\n      var node = div.firstElementChild ? div.removeChild(div.firstElementChild) : null;\\n      div = null;\\n      return node;\\n    }\\n\\n    // NOTE: Overridden by PopOver class\\n\\n  }, {\\n    key: 'setContent',\\n    value: function setContent(tip) {\\n      this.setElementContent(dom_select(tooltip_class_Selector.TOOLTIP_INNER, tip), this.getTitle());\\n      removeClass(tip, ClassName.FADE);\\n      removeClass(tip, ClassName.SHOW);\\n    }\\n  }, {\\n    key: 'setElementContent',\\n    value: function setElementContent(container, content) {\\n      if (!container) {\\n        // If container element doesn't exist, just return\\n        return;\\n      }\\n      var allowHtml = this.$config.html;\\n      if ((typeof content === 'undefined' ? 'undefined' : tooltip_class_typeof(content)) === 'object' && content.nodeType) {\\n        // content is a DOM node\\n        if (allowHtml) {\\n          if (content.parentElement !== container) {\\n            container.innerHtml = '';\\n            container.appendChild(content);\\n          }\\n        } else {\\n          container.innerText = content.innerText;\\n        }\\n      } else {\\n        // We have a plain HTML string or Text\\n        container[allowHtml ? 'innerHTML' : 'innerText'] = content;\\n      }\\n    }\\n\\n    // NOTE: Overridden by PopOver class\\n\\n  }, {\\n    key: 'getTitle',\\n    value: function getTitle() {\\n      var title = this.$config.title || '';\\n      if (typeof title === 'function') {\\n        // Call the function to get the title value\\n        title = title(this.$element);\\n      }\\n      if ((typeof title === 'undefined' ? 'undefined' : tooltip_class_typeof(title)) === 'object' && title.nodeType && !title.innerHTML.trim()) {\\n        // We have a DOM node, but without inner content, so just return empty string\\n        title = '';\\n      }\\n      if (typeof title === 'string') {\\n        title = title.trim();\\n      }\\n      if (!title) {\\n        // If an explicit title is not given, try element's title atributes\\n        title = getAttr(this.$element, 'title') || getAttr(this.$element, 'data-original-title') || '';\\n        title = title.trim();\\n      }\\n\\n      return title;\\n    }\\n  }, {\\n    key: 'listen',\\n    value: function listen() {\\n      var _this6 = this;\\n\\n      var triggers = this.$config.trigger.trim().split(/\\\\s+/);\\n      var el = this.$element;\\n\\n      // Listen for global show/hide events\\n      this.setRootListener(true);\\n\\n      // Using 'this' as the handler will get automagically directed to this.handleEvent\\n      // And maintain our binding to 'this'\\n      triggers.forEach(function (trigger) {\\n        if (trigger === 'click') {\\n          eventOn(el, 'click', _this6);\\n        } else if (trigger === 'focus') {\\n          eventOn(el, 'focusin', _this6);\\n          eventOn(el, 'focusout', _this6);\\n        } else if (trigger === 'blur') {\\n          // Used to close $tip when element looses focus\\n          eventOn(el, 'focusout', _this6);\\n        } else if (trigger === 'hover') {\\n          eventOn(el, 'mouseenter', _this6);\\n          eventOn(el, 'mouseleave', _this6);\\n        }\\n      }, this);\\n    }\\n  }, {\\n    key: 'unListen',\\n    value: function unListen() {\\n      var _this7 = this;\\n\\n      var events = ['click', 'focusin', 'focusout', 'mouseenter', 'mouseleave'];\\n      // Using \\\"this\\\" as the handler will get automagically directed to this.handleEvent\\n      events.forEach(function (evt) {\\n        eventOff(_this7.$element, evt, _this7);\\n      }, this);\\n\\n      // Stop listening for global show/hide/enable/disable events\\n      this.setRootListener(false);\\n    }\\n  }, {\\n    key: 'handleEvent',\\n    value: function handleEvent(e) {\\n      // This special method allows us to use \\\"this\\\" as the event handlers\\n      if (isDisabled(this.$element)) {\\n        // If disabled, don't do anything. Note: if tip is shown before element gets\\n        // disabled, then tip not close until no longer disabled or forcefully closed.\\n        return;\\n      }\\n      if (!this.$isEnabled) {\\n        // If not enable\\n        return;\\n      }\\n      var type = e.type;\\n      var target = e.target;\\n      var relatedTarget = e.relatedTarget;\\n      var $element = this.$element;\\n      var $tip = this.$tip;\\n      if (type === 'click') {\\n        this.toggle(e);\\n      } else if (type === 'focusin' || type === 'mouseenter') {\\n        this.enter(e);\\n      } else if (type === 'focusout') {\\n        // target is the element which is loosing focus\\n        // And relatedTarget is the element gaining focus\\n        if ($tip && $element && $element.contains(target) && $tip.contains(relatedTarget)) {\\n          // If focus moves from $element to $tip, don't trigger a leave\\n          return;\\n        }\\n        if ($tip && $element && $tip.contains(target) && $element.contains(relatedTarget)) {\\n          // If focus moves from $tip to $element, don't trigger a leave\\n          return;\\n        }\\n        if ($tip && $tip.contains(target) && $tip.contains(relatedTarget)) {\\n          // If focus moves within $tip, don't trigger a leave\\n          return;\\n        }\\n        if ($element && $element.contains(target) && $element.contains(relatedTarget)) {\\n          // If focus moves within $element, don't trigger a leave\\n          return;\\n        }\\n        // Otherwise trigger a leave\\n        this.leave(e);\\n      } else if (type === 'mouseleave') {\\n        this.leave(e);\\n      }\\n    }\\n\\n    /* istanbul ignore next */\\n\\n  }, {\\n    key: 'setRouteWatcher',\\n    value: function setRouteWatcher(on) {\\n      var _this8 = this;\\n\\n      if (on) {\\n        this.setRouteWatcher(false);\\n        if (this.$root && Boolean(this.$root.$route)) {\\n          this.$routeWatcher = this.$root.$watch('$route', function (newVal, oldVal) {\\n            if (newVal === oldVal) {\\n              return;\\n            }\\n            // If route has changed, we force hide the tooltip/popover\\n            _this8.forceHide();\\n          });\\n        }\\n      } else {\\n        if (this.$routeWatcher) {\\n          // cancel the route watcher by calling hte stored reference\\n          this.$routeWatcher();\\n          this.$routeWatcher = null;\\n        }\\n      }\\n    }\\n\\n    /* istanbul ignore next */\\n\\n  }, {\\n    key: 'setModalListener',\\n    value: function setModalListener(on) {\\n      var modal = closest(MODAL_CLASS, this.$element);\\n      if (!modal) {\\n        // If we are not in a modal, don't worry. be happy\\n        return;\\n      }\\n      // We can listen for modal hidden events on $root\\n      if (this.$root) {\\n        this.$root[on ? '$on' : '$off'](MODAL_CLOSE_EVENT, this.$forceHide);\\n      }\\n    }\\n\\n    /* istanbul ignore next */\\n\\n  }, {\\n    key: 'setRootListener',\\n    value: function setRootListener(on) {\\n      // Listen for global 'bv::{hide|show}::{tooltip|popover}' hide request event\\n      if (this.$root) {\\n        this.$root[on ? '$on' : '$off']('bv::hide::' + this.constructor.NAME, this.$doHide);\\n        this.$root[on ? '$on' : '$off']('bv::show::' + this.constructor.NAME, this.$doShow);\\n        this.$root[on ? '$on' : '$off']('bv::disable::' + this.constructor.NAME, this.$doDisable);\\n        this.$root[on ? '$on' : '$off']('bv::enable::' + this.constructor.NAME, this.$doEnable);\\n      }\\n    }\\n  }, {\\n    key: 'doHide',\\n    value: function doHide(id) {\\n      // Programmatically hide tooltip or popover\\n      if (!id) {\\n        // Close all tooltips or popovers\\n        this.forceHide();\\n      } else if (this.$element && this.$element.id && this.$element.id === id) {\\n        // Close this specific tooltip or popover\\n        this.hide();\\n      }\\n    }\\n  }, {\\n    key: 'doShow',\\n    value: function doShow(id) {\\n      // Programmatically show tooltip or popover\\n      if (!id) {\\n        // Open all tooltips or popovers\\n        this.show();\\n      } else if (id && this.$element && this.$element.id && this.$element.id === id) {\\n        // Show this specific tooltip or popover\\n        this.show();\\n      }\\n    }\\n  }, {\\n    key: 'doDisable',\\n    value: function doDisable(id) {\\n      // Programmatically disable tooltip or popover\\n      if (!id) {\\n        // Disable all tooltips or popovers\\n        this.disable();\\n      } else if (this.$element && this.$element.id && this.$element.id === id) {\\n        // Disable this specific tooltip or popover\\n        this.disable();\\n      }\\n    }\\n  }, {\\n    key: 'doEnable',\\n    value: function doEnable(id) {\\n      // Programmatically enable tooltip or popover\\n      if (!id) {\\n        // Enable all tooltips or popovers\\n        this.enable();\\n      } else if (this.$element && this.$element.id && this.$element.id === id) {\\n        // Enable this specific tooltip or popover\\n        this.enable();\\n      }\\n    }\\n\\n    /* istanbul ignore next */\\n\\n  }, {\\n    key: 'setOnTouchStartListener',\\n    value: function setOnTouchStartListener(on) {\\n      var _this9 = this;\\n\\n      // if this is a touch-enabled device we add extra\\n      // empty mouseover listeners to the body's immediate children;\\n      // only needed because of broken event delegation on iOS\\n      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\\n      if ('ontouchstart' in document.documentElement) {\\n        from(document.body.children).forEach(function (el) {\\n          if (on) {\\n            eventOn(el, 'mouseover', _this9._noop);\\n          } else {\\n            eventOff(el, 'mouseover', _this9._noop);\\n          }\\n        });\\n      }\\n    }\\n\\n    /* istanbul ignore next */\\n\\n  }, {\\n    key: '_noop',\\n    value: function _noop() {\\n      // Empty noop handler for ontouchstart devices\\n    }\\n  }, {\\n    key: 'fixTitle',\\n    value: function fixTitle() {\\n      var el = this.$element;\\n      var titleType = tooltip_class_typeof(getAttr(el, 'data-original-title'));\\n      if (getAttr(el, 'title') || titleType !== 'string') {\\n        setAttr(el, 'data-original-title', getAttr(el, 'title') || '');\\n        setAttr(el, 'title', '');\\n      }\\n    }\\n\\n    // Enter handler\\n    /* istanbul ignore next */\\n\\n  }, {\\n    key: 'enter',\\n    value: function enter(e) {\\n      var _this10 = this;\\n\\n      if (e) {\\n        this.$activeTrigger[e.type === 'focusin' ? 'focus' : 'hover'] = true;\\n      }\\n      if (hasClass(this.getTipElement(), ClassName.SHOW) || this.$hoverState === HoverState.SHOW) {\\n        this.$hoverState = HoverState.SHOW;\\n        return;\\n      }\\n      clearTimeout(this.$hoverTimeout);\\n      this.$hoverState = HoverState.SHOW;\\n      if (!this.$config.delay || !this.$config.delay.show) {\\n        this.show();\\n        return;\\n      }\\n      this.$hoverTimeout = setTimeout(function () {\\n        if (_this10.$hoverState === HoverState.SHOW) {\\n          _this10.show();\\n        }\\n      }, this.$config.delay.show);\\n    }\\n\\n    // Leave handler\\n    /* istanbul ignore next */\\n\\n  }, {\\n    key: 'leave',\\n    value: function leave(e) {\\n      var _this11 = this;\\n\\n      if (e) {\\n        this.$activeTrigger[e.type === 'focusout' ? 'focus' : 'hover'] = false;\\n        if (e.type === 'focusout' && /blur/.test(this.$config.trigger)) {\\n          // Special case for `blur`: we clear out the other triggers\\n          this.$activeTrigger.click = false;\\n          this.$activeTrigger.hover = false;\\n        }\\n      }\\n      if (this.isWithActiveTrigger()) {\\n        return;\\n      }\\n      clearTimeout(this.$hoverTimeout);\\n      this.$hoverState = HoverState.OUT;\\n      if (!this.$config.delay || !this.$config.delay.hide) {\\n        this.hide();\\n        return;\\n      }\\n      this.$hoverTimeout = setTimeout(function () {\\n        if (_this11.$hoverState === HoverState.OUT) {\\n          _this11.hide();\\n        }\\n      }, this.$config.delay.hide);\\n    }\\n  }, {\\n    key: 'getPopperConfig',\\n    value: function getPopperConfig(placement, tip) {\\n      var _this12 = this;\\n\\n      return {\\n        placement: this.constructor.getAttachment(placement),\\n        modifiers: {\\n          offset: { offset: this.getOffset(placement, tip) },\\n          flip: { behavior: this.$config.fallbackPlacement },\\n          arrow: { element: '.arrow' },\\n          preventOverflow: { boundariesElement: this.$config.boundary }\\n        },\\n        onCreate: function onCreate(data) {\\n          // Handle flipping arrow classes\\n          if (data.originalPlacement !== data.placement) {\\n            _this12.handlePopperPlacementChange(data);\\n          }\\n        },\\n        onUpdate: function onUpdate(data) {\\n          // Handle flipping arrow classes\\n          _this12.handlePopperPlacementChange(data);\\n        }\\n      };\\n    }\\n  }, {\\n    key: 'getOffset',\\n    value: function getOffset(placement, tip) {\\n      if (!this.$config.offset) {\\n        var arrow = dom_select(tooltip_class_Selector.ARROW, tip);\\n        var arrowOffset = parseFloat(getCS(arrow).width) + parseFloat(this.$config.arrowPadding);\\n        switch (OffsetMap[placement.toUpperCase()]) {\\n          case +1:\\n            return '+50%p - ' + arrowOffset + 'px';\\n          case -1:\\n            return '-50%p + ' + arrowOffset + 'px';\\n          default:\\n            return 0;\\n        }\\n      }\\n      return this.$config.offset;\\n    }\\n  }, {\\n    key: 'getPlacement',\\n    value: function getPlacement() {\\n      var placement = this.$config.placement;\\n      if (typeof placement === 'function') {\\n        return placement.call(this, this.$tip, this.$element);\\n      }\\n      return placement;\\n    }\\n  }, {\\n    key: 'isWithActiveTrigger',\\n    value: function isWithActiveTrigger() {\\n      for (var trigger in this.$activeTrigger) {\\n        if (this.$activeTrigger[trigger]) {\\n          return true;\\n        }\\n      }\\n      return false;\\n    }\\n\\n    // NOTE: Overridden by PopOver class\\n\\n  }, {\\n    key: 'cleanTipClass',\\n    value: function cleanTipClass() {\\n      var tip = this.getTipElement();\\n      var tabClass = tip.className.match(BSCLS_PREFIX_REGEX);\\n      if (tabClass !== null && tabClass.length > 0) {\\n        tabClass.forEach(function (cls) {\\n          removeClass(tip, cls);\\n        });\\n      }\\n    }\\n  }, {\\n    key: 'handlePopperPlacementChange',\\n    value: function handlePopperPlacementChange(data) {\\n      this.cleanTipClass();\\n      this.addAttachmentClass(this.constructor.getAttachment(data.placement));\\n    }\\n  }, {\\n    key: 'fixTransition',\\n    value: function fixTransition(tip) {\\n      var initConfigAnimation = this.$config.animation || false;\\n      if (getAttr(tip, 'x-placement') !== null) {\\n        return;\\n      }\\n      removeClass(tip, ClassName.FADE);\\n      this.$config.animation = false;\\n      this.hide();\\n      this.show();\\n      this.$config.animation = initConfigAnimation;\\n    }\\n  }], [{\\n    key: 'getAttachment',\\n    value: function getAttachment(placement) {\\n      return tooltip_class_AttachmentMap[placement.toUpperCase()];\\n    }\\n  }, {\\n    key: 'Default',\\n    get: function get() {\\n      return Defaults;\\n    }\\n\\n    // NOTE: Overridden by PopOver class\\n\\n  }, {\\n    key: 'NAME',\\n    get: function get() {\\n      return NAME;\\n    }\\n  }]);\\n\\n  return ToolTip;\\n}();\\n\\n/* harmony default export */ var tooltip_class = (tooltip_class_ToolTip);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/utils/popover.class.js\\nvar popover_class_typeof = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\nvar popover_class_createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction popover_class_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\n\\n\\n\\n\\nvar popover_class_NAME = 'popover';\\nvar popover_class_CLASS_PREFIX = 'bs-popover';\\nvar popover_class_BSCLS_PREFIX_REGEX = new RegExp('\\\\\\\\b' + popover_class_CLASS_PREFIX + '\\\\\\\\S+', 'g');\\n\\nvar popover_class_Defaults = object_assign({}, tooltip_class.Default, {\\n  placement: 'right',\\n  trigger: 'click',\\n  content: '',\\n  template: '<div class=\\\"popover\\\" role=\\\"tooltip\\\">' + '<div class=\\\"arrow\\\"></div>' + '<h3 class=\\\"popover-header\\\"></h3>' + '<div class=\\\"popover-body\\\"></div></div>'\\n});\\n\\nvar popover_class_ClassName = {\\n  FADE: 'fade',\\n  SHOW: 'show'\\n};\\n\\nvar popover_class_Selector = {\\n  TITLE: '.popover-header',\\n  CONTENT: '.popover-body'\\n\\n  /* istanbul ignore next: dificult to test in Jest/JSDOM environment */\\n};\\nvar popover_class_PopOver = function (_ToolTip) {\\n  _inherits(PopOver, _ToolTip);\\n\\n  function PopOver() {\\n    popover_class_classCallCheck(this, PopOver);\\n\\n    return _possibleConstructorReturn(this, (PopOver.__proto__ || Object.getPrototypeOf(PopOver)).apply(this, arguments));\\n  }\\n\\n  popover_class_createClass(PopOver, [{\\n    key: 'isWithContent',\\n\\n\\n    // Method overrides\\n\\n    value: function isWithContent(tip) {\\n      tip = tip || this.$tip;\\n      if (!tip) {\\n        return false;\\n      }\\n      var hasTitle = Boolean((dom_select(popover_class_Selector.TITLE, tip) || {}).innerHTML);\\n      var hasContent = Boolean((dom_select(popover_class_Selector.CONTENT, tip) || {}).innerHTML);\\n      return hasTitle || hasContent;\\n    }\\n  }, {\\n    key: 'addAttachmentClass',\\n    value: function addAttachmentClass(attachment) {\\n      addClass(this.getTipElement(), popover_class_CLASS_PREFIX + '-' + attachment);\\n    }\\n  }, {\\n    key: 'setContent',\\n    value: function setContent(tip) {\\n      // we use append for html objects to maintain js events/components\\n      this.setElementContent(dom_select(popover_class_Selector.TITLE, tip), this.getTitle());\\n      this.setElementContent(dom_select(popover_class_Selector.CONTENT, tip), this.getContent());\\n\\n      removeClass(tip, popover_class_ClassName.FADE);\\n      removeClass(tip, popover_class_ClassName.SHOW);\\n    }\\n\\n    // This method may look identical to ToolTip version, but it uses a different RegEx defined above\\n\\n  }, {\\n    key: 'cleanTipClass',\\n    value: function cleanTipClass() {\\n      var tip = this.getTipElement();\\n      var tabClass = tip.className.match(popover_class_BSCLS_PREFIX_REGEX);\\n      if (tabClass !== null && tabClass.length > 0) {\\n        tabClass.forEach(function (cls) {\\n          removeClass(tip, cls);\\n        });\\n      }\\n    }\\n  }, {\\n    key: 'getTitle',\\n    value: function getTitle() {\\n      var title = this.$config.title || '';\\n      if (typeof title === 'function') {\\n        title = title(this.$element);\\n      }\\n      if ((typeof title === 'undefined' ? 'undefined' : popover_class_typeof(title)) === 'object' && title.nodeType && !title.innerHTML.trim()) {\\n        // We have a dom node, but without inner content, so just return an empty string\\n        title = '';\\n      }\\n      if (typeof title === 'string') {\\n        title = title.trim();\\n      }\\n      if (!title) {\\n        // Try and grab element's title attribute\\n        title = getAttr(this.$element, 'title') || getAttr(this.$element, 'data-original-title') || '';\\n        title = title.trim();\\n      }\\n      return title;\\n    }\\n\\n    // New methods\\n\\n  }, {\\n    key: 'getContent',\\n    value: function getContent() {\\n      var content = this.$config.content || '';\\n      if (typeof content === 'function') {\\n        content = content(this.$element);\\n      }\\n      if ((typeof content === 'undefined' ? 'undefined' : popover_class_typeof(content)) === 'object' && content.nodeType && !content.innerHTML.trim()) {\\n        // We have a dom node, but without inner content, so just return an empty string\\n        content = '';\\n      }\\n      if (typeof content === 'string') {\\n        content = content.trim();\\n      }\\n      return content;\\n    }\\n  }], [{\\n    key: 'Default',\\n\\n    // Getter overrides\\n\\n    get: function get() {\\n      return popover_class_Defaults;\\n    }\\n  }, {\\n    key: 'NAME',\\n    get: function get() {\\n      return popover_class_NAME;\\n    }\\n  }]);\\n\\n  return PopOver;\\n}(tooltip_class);\\n\\n/* harmony default export */ var popover_class = (popover_class_PopOver);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/utils/ssr.js\\n// Polyfills for SSR\\n\\nvar isSSR = typeof window === 'undefined';\\n\\nvar HTMLElement = isSSR ? Object : window.HTMLElement;\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/mixins/toolpop.js\\nvar toolpop_typeof = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\n/*\\n * Tooltip/Popover component mixin\\n * Common props\\n */\\n\\n\\n\\n\\n\\n\\nvar PLACEMENTS = {\\n  top: 'top',\\n  topleft: 'topleft',\\n  topright: 'topright',\\n  right: 'right',\\n  righttop: 'righttop',\\n  rightbottom: 'rightbottom',\\n  bottom: 'bottom',\\n  bottomleft: 'bottomleft',\\n  bottomright: 'bottomright',\\n  left: 'left',\\n  lefttop: 'lefttop',\\n  leftbottom: 'leftbottom',\\n  auto: 'auto'\\n};\\n\\nvar toolpop_OBSERVER_CONFIG = {\\n  subtree: true,\\n  childList: true,\\n  characterData: true,\\n  attributes: true,\\n  attributeFilter: ['class', 'style']\\n};\\n\\n/* harmony default export */ var toolpop = ({\\n  props: {\\n    target: {\\n      // String ID of element, or element/component reference\\n      type: [String, Object, HTMLElement, Function]\\n    },\\n    delay: {\\n      type: [Number, Object, String],\\n      default: 0\\n    },\\n    offset: {\\n      type: [Number, String],\\n      default: 0\\n    },\\n    noFade: {\\n      type: Boolean,\\n      default: false\\n    },\\n    container: {\\n      // String ID of container, if null body is used (default)\\n      type: String,\\n      default: null\\n    },\\n    boundary: {\\n      // String: scrollParent, window, or viewport\\n      // Element: element reference\\n      type: [String, Object],\\n      default: 'scrollParent'\\n    },\\n    show: {\\n      type: Boolean,\\n      default: false\\n    },\\n    disabled: {\\n      type: Boolean,\\n      default: false\\n    }\\n  },\\n  watch: {\\n    show: function show(_show, old) {\\n      if (_show === old) {\\n        return;\\n      }\\n      _show ? this.onOpen() : this.onClose();\\n    },\\n    disabled: function disabled(_disabled, old) {\\n      if (_disabled === old) {\\n        return;\\n      }\\n      _disabled ? this.onDisable() : this.onEnable();\\n    }\\n  },\\n  created: function created() {\\n    // Create non-reactive property\\n    this._toolpop = null;\\n    this._obs_title = null;\\n    this._obs_content = null;\\n  },\\n  mounted: function mounted() {\\n    var _this = this;\\n\\n    // We do this in a next tick to ensure DOM has rendered first\\n    this.$nextTick(function () {\\n      // Instantiate ToolTip/PopOver on target\\n      // The createToolpop method must exist in main component\\n      if (_this.createToolpop()) {\\n        if (_this.disabled) {\\n          // Initially disabled\\n          _this.onDisable();\\n        }\\n        // Listen to open signals from others\\n        _this.$on('open', _this.onOpen);\\n        // Listen to close signals from others\\n        _this.$on('close', _this.onClose);\\n        // Listen to disable signals from others\\n        _this.$on('disable', _this.onDisable);\\n        // Listen to disable signals from others\\n        _this.$on('enable', _this.onEnable);\\n        // Observe content Child changes so we can notify popper of possible size change\\n        _this.setObservers(true);\\n        // Set intially open state\\n        if (_this.show) {\\n          _this.onOpen();\\n        }\\n      }\\n    });\\n  },\\n  updated: function updated() {\\n    // If content/props changes, etc\\n    if (this._toolpop) {\\n      this._toolpop.updateConfig(this.getConfig());\\n    }\\n  },\\n\\n  /* istanbul ignore next: not easy to test */\\n  activated: function activated() {\\n    // Called when component is inside a <keep-alive> and component brought offline\\n    this.setObservers(true);\\n  },\\n\\n  /* istanbul ignore next: not easy to test */\\n  deactivated: function deactivated() {\\n    // Called when component is inside a <keep-alive> and component taken offline\\n    if (this._toolpop) {\\n      this.setObservers(false);\\n      this._toolpop.hide();\\n    }\\n  },\\n\\n  /* istanbul ignore next: not easy to test */\\n  beforeDestroy: function beforeDestroy() {\\n    // Shutdown our local event listeners\\n    this.$off('open', this.onOpen);\\n    this.$off('close', this.onClose);\\n    this.$off('disable', this.onDisable);\\n    this.$off('enable', this.onEnable);\\n    this.setObservers(false);\\n    // bring our content back if needed\\n    this.bringItBack();\\n    if (this._toolpop) {\\n      this._toolpop.destroy();\\n      this._toolpop = null;\\n    }\\n  },\\n\\n  computed: {\\n    baseConfig: function baseConfig() {\\n      var cont = this.container;\\n      var delay = toolpop_typeof(this.delay) === 'object' ? this.delay : parseInt(this.delay, 10) || 0;\\n      return {\\n        // Title prop\\n        title: (this.title || '').trim() || '',\\n        // Contnt prop (if popover)\\n        content: (this.content || '').trim() || '',\\n        // Tooltip/Popover placement\\n        placement: PLACEMENTS[this.placement] || 'auto',\\n        // Container curently needs to be an ID with '#' prepended, if null then body is used\\n        container: cont ? /^#/.test(cont) ? cont : '#' + cont : false,\\n        // boundariesElement passed to popper\\n        boundary: this.boundary,\\n        // Show/Hide delay\\n        delay: delay || 0,\\n        // Offset can be css distance. if no units, pixels are assumed\\n        offset: this.offset || 0,\\n        // Disable fade Animation?\\n        animation: !this.noFade,\\n        // Open/Close Trigger(s)\\n        trigger: isArray(this.triggers) ? this.triggers.join(' ') : this.triggers,\\n        // Callbacks so we can trigger events on component\\n        callbacks: {\\n          show: this.onShow,\\n          shown: this.onShown,\\n          hide: this.onHide,\\n          hidden: this.onHidden,\\n          enabled: this.onEnabled,\\n          disabled: this.onDisabled\\n        }\\n      };\\n    }\\n  },\\n  methods: {\\n    getConfig: function getConfig() {\\n      var cfg = object_assign({}, this.baseConfig);\\n      if (this.$refs.title && this.$refs.title.innerHTML.trim()) {\\n        // If slot has content, it overrides 'title' prop\\n        // We use the DOM node as content to allow components!\\n        cfg.title = this.$refs.title;\\n        cfg.html = true;\\n      }\\n      if (this.$refs.content && this.$refs.content.innerHTML.trim()) {\\n        // If slot has content, it overrides 'content' prop\\n        // We use the DOM node as content to allow components!\\n        cfg.content = this.$refs.content;\\n        cfg.html = true;\\n      }\\n      return cfg;\\n    },\\n    onOpen: function onOpen() {\\n      if (this._toolpop) {\\n        this._toolpop.show();\\n      }\\n    },\\n    onClose: function onClose(callback) {\\n      if (this._toolpop) {\\n        this._toolpop.hide(callback);\\n      } else if (typeof callback === 'function') {\\n        callback();\\n      }\\n    },\\n    onDisable: function onDisable() {\\n      if (this._toolpop) {\\n        this._toolpop.disable();\\n      }\\n    },\\n    onEnable: function onEnable() {\\n      if (this._toolpop) {\\n        this._toolpop.enable();\\n      }\\n    },\\n    updatePosition: function updatePosition() {\\n      if (this._toolpop) {\\n        // Instruct popper to reposition popover if necessary\\n        this._toolpop.update();\\n      }\\n    },\\n    getTarget: function getTarget() {\\n      var target = this.target;\\n      if (typeof target === 'function') {\\n        target = target();\\n      }\\n      if (typeof target === 'string') {\\n        // Assume ID of element\\n        return getById(target);\\n      } else if ((typeof target === 'undefined' ? 'undefined' : toolpop_typeof(target)) === 'object' && isElement(target.$el)) {\\n        // Component reference\\n        return target.$el;\\n      } else if ((typeof target === 'undefined' ? 'undefined' : toolpop_typeof(target)) === 'object' && isElement(target)) {\\n        // Element reference\\n        return target;\\n      }\\n      return null;\\n    },\\n    onShow: function onShow(evt) {\\n      this.$emit('show', evt);\\n    },\\n    onShown: function onShown(evt) {\\n      this.setObservers(true);\\n      this.$emit('update:show', true);\\n      this.$emit('shown', evt);\\n    },\\n    onHide: function onHide(evt) {\\n      this.$emit('hide', evt);\\n    },\\n    onHidden: function onHidden(evt) {\\n      this.setObservers(false);\\n      // bring our content back if needed to keep Vue happy\\n      // Tooltip class will move it back to tip when shown again\\n      this.bringItBack();\\n      this.$emit('update:show', false);\\n      this.$emit('hidden', evt);\\n    },\\n    onEnabled: function onEnabled(evt) {\\n      if (!evt || evt.type !== 'enabled') {\\n        // Prevent possible endless loop if user mistakienly fires enabled instead of enable\\n        return;\\n      }\\n      this.$emit('update:disabled', false);\\n      this.$emit('disabled');\\n    },\\n    onDisabled: function onDisabled(evt) {\\n      if (!evt || evt.type !== 'disabled') {\\n        // Prevent possible endless loop if user mistakienly fires disabled instead of disable\\n        return;\\n      }\\n      this.$emit('update:disabled', true);\\n      this.$emit('enabled');\\n    },\\n    bringItBack: function bringItBack() {\\n      // bring our content back if needed to keep Vue happy\\n      if (this.$el && this.$refs.title) {\\n        this.$el.appendChild(this.$refs.title);\\n      }\\n      if (this.$el && this.$refs.content) {\\n        this.$el.appendChild(this.$refs.content);\\n      }\\n    },\\n\\n    /* istanbul ignore next: not easy to test */\\n    setObservers: function setObservers(on) {\\n      if (on) {\\n        if (this.$refs.title) {\\n          this._obs_title = observeDOM(this.$refs.title, this.updatePosition.bind(this), toolpop_OBSERVER_CONFIG);\\n        }\\n        if (this.$refs.content) {\\n          this._obs_content = observeDOM(this.$refs.content, this.updatePosition.bind(this), toolpop_OBSERVER_CONFIG);\\n        }\\n      } else {\\n        if (this._obs_title) {\\n          this._obs_title.disconnect();\\n          this._obs_title = null;\\n        }\\n        if (this._obs_content) {\\n          this._obs_content.disconnect();\\n          this._obs_content = null;\\n        }\\n      }\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/popover/popover.js\\n\\n\\n\\n\\n/* harmony default export */ var popover = ({\\n  mixins: [toolpop],\\n  render: function render(h) {\\n    return h('div', {\\n      class: ['d-none'],\\n      style: { display: 'none' },\\n      attrs: { 'aria-hidden': true }\\n    }, [h('div', { ref: 'title' }, this.$slots.title), h('div', { ref: 'content' }, this.$slots.default)]);\\n  },\\n  data: function data() {\\n    return {};\\n  },\\n\\n  props: {\\n    title: {\\n      type: String,\\n      default: ''\\n    },\\n    content: {\\n      type: String,\\n      default: ''\\n    },\\n    triggers: {\\n      type: [String, Array],\\n      default: 'click'\\n    },\\n    placement: {\\n      type: String,\\n      default: 'right'\\n    }\\n  },\\n  methods: {\\n    createToolpop: function createToolpop() {\\n      // getTarget is in toolpop mixin\\n      var target = this.getTarget();\\n      if (target) {\\n        this._toolpop = new popover_class(target, this.getConfig(), this.$root);\\n      } else {\\n        this._toolpop = null;\\n        utils_warn(\\\"b-popover: 'target' element not found!\\\");\\n      }\\n      return this._toolpop;\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/popover/index.js\\n\\n\\n\\nvar popover_components = {\\n  bPopover: popover\\n};\\n\\nvar popover_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, popover_components);\\n  }\\n};\\n\\nvueUse(popover_VuePlugin);\\n\\n/* harmony default export */ var components_popover = (popover_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/progress/progress-bar.js\\n/* harmony default export */ var progress_bar = ({\\n  render: function render(h) {\\n    var childNodes = h(false);\\n    if (this.$slots.default) {\\n      childNodes = this.$slots.default;\\n    } else if (this.label) {\\n      childNodes = h('span', { domProps: { innerHTML: this.label } });\\n    } else if (this.computedShowProgress) {\\n      childNodes = this.progress.toFixed(this.computedPrecision);\\n    } else if (this.computedShowValue) {\\n      childNodes = this.value.toFixed(this.computedPrecision);\\n    }\\n    return h('div', {\\n      class: this.progressBarClasses,\\n      style: this.progressBarStyles,\\n      attrs: {\\n        role: 'progressbar',\\n        'aria-valuemin': '0',\\n        'aria-valuemax': this.computedMax.toString(),\\n        'aria-valuenow': this.value.toFixed(this.computedPrecision)\\n      }\\n    }, [childNodes]);\\n  },\\n\\n  computed: {\\n    progressBarClasses: function progressBarClasses() {\\n      return ['progress-bar', this.computedVariant ? 'bg-' + this.computedVariant : '', this.computedStriped || this.computedAnimated ? 'progress-bar-striped' : '', this.computedAnimated ? 'progress-bar-animated' : ''];\\n    },\\n    progressBarStyles: function progressBarStyles() {\\n      return {\\n        width: 100 * (this.value / this.computedMax) + '%'\\n      };\\n    },\\n    progress: function progress() {\\n      var p = Math.pow(10, this.computedPrecision);\\n      return Math.round(100 * p * this.value / this.computedMax) / p;\\n    },\\n    computedMax: function computedMax() {\\n      // Prefer our max over parent setting\\n      return typeof this.max === 'number' ? this.max : this.$parent.max || 100;\\n    },\\n    computedVariant: function computedVariant() {\\n      // Prefer our variant over parent setting\\n      return this.variant || this.$parent.variant;\\n    },\\n    computedPrecision: function computedPrecision() {\\n      // Prefer our precision over parent setting\\n      return typeof this.precision === 'number' ? this.precision : this.$parent.precision || 0;\\n    },\\n    computedStriped: function computedStriped() {\\n      // Prefer our striped over parent setting\\n      return typeof this.striped === 'boolean' ? this.striped : this.$parent.striped || false;\\n    },\\n    computedAnimated: function computedAnimated() {\\n      // Prefer our animated over parent setting\\n      return typeof this.animated === 'boolean' ? this.animated : this.$parent.animated || false;\\n    },\\n    computedShowProgress: function computedShowProgress() {\\n      // Prefer our showProgress over parent setting\\n      return typeof this.showProgress === 'boolean' ? this.showProgress : this.$parent.showProgress || false;\\n    },\\n    computedShowValue: function computedShowValue() {\\n      // Prefer our showValue over parent setting\\n      return typeof this.showValue === 'boolean' ? this.showValue : this.$parent.showValue || false;\\n    }\\n  },\\n  props: {\\n    value: {\\n      type: Number,\\n      default: 0\\n    },\\n    label: {\\n      type: String,\\n      default: null\\n    },\\n    // $parent prop values take precedence over the following props\\n    // Which is why they are defaulted to null\\n    max: {\\n      type: Number,\\n      default: null\\n    },\\n    precision: {\\n      type: Number,\\n      default: null\\n    },\\n    variant: {\\n      type: String,\\n      default: null\\n    },\\n    striped: {\\n      type: Boolean,\\n      default: null\\n    },\\n    animated: {\\n      type: Boolean,\\n      default: null\\n    },\\n    showProgress: {\\n      type: Boolean,\\n      default: null\\n    },\\n    showValue: {\\n      type: Boolean,\\n      default: null\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/progress/progress.js\\n\\n\\n/* harmony default export */ var progress = ({\\n  components: { bProgressBar: progress_bar },\\n  render: function render(h) {\\n    var childNodes = this.$slots.default;\\n    if (!childNodes) {\\n      childNodes = h('b-progress-bar', {\\n        props: {\\n          value: this.value,\\n          max: this.max,\\n          precision: this.precision,\\n          variant: this.variant,\\n          animated: this.animated,\\n          striped: this.striped,\\n          showProgress: this.showProgress,\\n          showValue: this.showValue\\n        }\\n      });\\n    }\\n    return h('div', { class: ['progress'], style: this.progressHeight }, [childNodes]);\\n  },\\n\\n  props: {\\n    // These props can be inherited via the child b-progress-bar(s)\\n    variant: {\\n      type: String,\\n      default: null\\n    },\\n    striped: {\\n      type: Boolean,\\n      default: false\\n    },\\n    animated: {\\n      type: Boolean,\\n      default: false\\n    },\\n    height: {\\n      type: String,\\n      default: null\\n    },\\n    precision: {\\n      type: Number,\\n      default: 0\\n    },\\n    showProgress: {\\n      type: Boolean,\\n      default: false\\n    },\\n    showValue: {\\n      type: Boolean,\\n      default: false\\n    },\\n    max: {\\n      type: Number,\\n      default: 100\\n    },\\n    // This prop is not inherited by child b-progress-bar(s)\\n    value: {\\n      type: Number,\\n      default: 0\\n    }\\n  },\\n  computed: {\\n    progressHeight: function progressHeight() {\\n      return { height: this.height || null };\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/progress/index.js\\n\\n\\n\\n\\nvar progress_components = {\\n  bProgress: progress,\\n  bProgressBar: progress_bar\\n};\\n\\nvar progress_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, progress_components);\\n  }\\n};\\n\\nvueUse(progress_VuePlugin);\\n\\n/* harmony default export */ var components_progress = (progress_VuePlugin);\\n// EXTERNAL MODULE: ./node_modules/lodash.startcase/index.js\\nvar lodash_startcase = __webpack_require__(15);\\nvar lodash_startcase_default = /*#__PURE__*/__webpack_require__.n(lodash_startcase);\\n\\n// EXTERNAL MODULE: ./node_modules/lodash.get/index.js\\nvar lodash_get = __webpack_require__(4);\\nvar lodash_get_default = /*#__PURE__*/__webpack_require__.n(lodash_get);\\n\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/utils/stable-sort.js\\n/*\\n * Consitant and stable sort function across JavsaScript platforms\\n *\\n * Inconsistant sorts can cause SSR problems between client and server\\n * such as in <b-table> if sortBy is applied to the data on server side render.\\n * Chrome and V8 native sorts are inconsistant/unstable\\n *\\n * This function uses native sort with fallback to index compare when the a and b\\n * compare returns 0\\n *\\n * Algorithm bsaed on:\\n * https://stackoverflow.com/questions/1427608/fast-stable-sorting-algorithm-implementation-in-javascript/45422645#45422645\\n *\\n * @param {array} array to sort\\n * @param {function} sortcompare function\\n * @return {array}\\n */\\n\\nfunction stableSort(array, compareFn) {\\n  // Using `.bind(compareFn)` on the wrapped anonymous function improves\\n  // performance by avoiding the function call setup. We don't use an arrow\\n  // function here as it binds `this` to the `stableSort` context rather than\\n  // the `compareFn` context, which wouldn't give us the performance increase.\\n  return array.map(function (a, index) {\\n    return [index, a];\\n  }).sort(function (a, b) {\\n    return this(a[1], b[1]) || a[0] - b[0];\\n  }.bind(compareFn)).map(function (e) {\\n    return e[1];\\n  });\\n}\\n// EXTERNAL MODULE: ./node_modules/bootstrap-vue/es/components/table/table.css\\nvar table_table = __webpack_require__(22);\\n\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/table/table.js\\nvar table_typeof = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// Import styles\\n\\n\\nfunction table_toString(v) {\\n  if (!v) {\\n    return '';\\n  }\\n  if (v instanceof Object) {\\n    return keys(v).map(function (k) {\\n      return table_toString(v[k]);\\n    }).join(' ');\\n  }\\n  return String(v);\\n}\\n\\nfunction recToString(obj) {\\n  if (!(obj instanceof Object)) {\\n    return '';\\n  }\\n  return table_toString(keys(obj).reduce(function (o, k) {\\n    // Ignore fields that start with _\\n    if (!/^_/.test(k)) {\\n      o[k] = obj[k];\\n    }\\n    return o;\\n  }, {}));\\n}\\n\\nfunction defaultSortCompare(a, b, sortBy) {\\n  if (typeof a[sortBy] === 'number' && typeof b[sortBy] === 'number') {\\n    return a[sortBy] < b[sortBy] && -1 || a[sortBy] > b[sortBy] && 1 || 0;\\n  }\\n  return table_toString(a[sortBy]).localeCompare(table_toString(b[sortBy]), undefined, {\\n    numeric: true\\n  });\\n}\\n\\nfunction processField(key, value) {\\n  var field = null;\\n  if (typeof value === 'string') {\\n    // Label shortcut\\n    field = { key: key, label: value };\\n  } else if (typeof value === 'function') {\\n    // Formatter shortcut\\n    field = { key: key, formatter: value };\\n  } else if ((typeof value === 'undefined' ? 'undefined' : table_typeof(value)) === 'object') {\\n    field = object_assign({}, value);\\n    field.key = field.key || key;\\n  } else if (value !== false) {\\n    // Fallback to just key\\n    field = { key: key };\\n  }\\n  return field;\\n}\\n\\n/* harmony default export */ var components_table_table = ({\\n  mixins: [mixins_id, listen_on_root],\\n  render: function render(h) {\\n    var _this = this;\\n\\n    var $slots = this.$slots;\\n    var $scoped = this.$scopedSlots;\\n    var fields = this.computedFields;\\n    var items = this.computedItems;\\n\\n    // Build the caption\\n    var caption = h(false);\\n    if (this.caption || $slots['table-caption']) {\\n      var data = { style: this.captionStyles };\\n      if (!$slots['table-caption']) {\\n        data.domProps = { innerHTML: this.caption };\\n      }\\n      caption = h('caption', data, $slots['table-caption']);\\n    }\\n\\n    // Build the colgroup\\n    var colgroup = $slots['table-colgroup'] ? h('colgroup', {}, $slots['table-colgroup']) : h(false);\\n\\n    // factory function for thead and tfoot cells (th's)\\n    var makeHeadCells = function makeHeadCells() {\\n      var isFoot = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\\n\\n      return fields.map(function (field, colIndex) {\\n        var data = {\\n          key: field.key,\\n          class: _this.fieldClasses(field),\\n          style: field.thStyle || {},\\n          attrs: {\\n            tabindex: field.sortable ? '0' : null,\\n            abbr: field.headerAbbr || null,\\n            title: field.headerTitle || null,\\n            'aria-colindex': String(colIndex + 1),\\n            'aria-label': field.sortable ? _this.localSortDesc && _this.localSortBy === field.key ? _this.labelSortAsc : _this.labelSortDesc : null,\\n            'aria-sort': field.sortable && _this.localSortBy === field.key ? _this.localSortDesc ? 'descending' : 'ascending' : null\\n          },\\n          on: {\\n            click: function click(evt) {\\n              evt.stopPropagation();\\n              evt.preventDefault();\\n              _this.headClicked(evt, field);\\n            },\\n            keydown: function keydown(evt) {\\n              var keyCode = evt.keyCode;\\n              if (keyCode === key_codes.ENTER || keyCode === key_codes.SPACE) {\\n                evt.stopPropagation();\\n                evt.preventDefault();\\n                _this.headClicked(evt, field);\\n              }\\n            }\\n          }\\n        };\\n        var slot = isFoot && $scoped['FOOT_' + field.key] ? $scoped['FOOT_' + field.key] : $scoped['HEAD_' + field.key];\\n        if (slot) {\\n          slot = [slot({ label: field.label, column: field.key, field: field })];\\n        } else {\\n          data.domProps = { innerHTML: field.label };\\n        }\\n        return h('th', data, slot);\\n      });\\n    };\\n\\n    // Build the thead\\n    var thead = h(false);\\n    if (this.isStacked !== true) {\\n      // If in always stacked mode (this.isStacked === true), then we don't bother rendering the thead\\n      thead = h('thead', { class: this.headClasses }, [h('tr', { class: this.theadTrClass }, makeHeadCells(false))]);\\n    }\\n\\n    // Build the tfoot\\n    var tfoot = h(false);\\n    if (this.footClone && this.isStacked !== true) {\\n      // If in always stacked mode (this.isStacked === true), then we don't bother rendering the tfoot\\n      tfoot = h('tfoot', { class: this.footClasses }, [h('tr', { class: this.tfootTrClass }, makeHeadCells(true))]);\\n    }\\n\\n    // Prepare the tbody rows\\n    var rows = [];\\n\\n    // Add static Top Row slot (hidden in visibly stacked mode as we can't control the data-label)\\n    // If in always stacked mode, we don't bother rendering the row\\n    if ($scoped['top-row'] && this.isStacked !== true) {\\n      rows.push(h('tr', { key: 'top-row', class: ['b-table-top-row', this.tbodyTrClass] }, [$scoped['top-row']({ columns: fields.length, fields: fields })]));\\n    } else {\\n      rows.push(h(false));\\n    }\\n\\n    // Add the item data rows\\n    items.forEach(function (item, rowIndex) {\\n      var detailsSlot = $scoped['row-details'];\\n      var rowShowDetails = Boolean(item._showDetails && detailsSlot);\\n      var detailsId = rowShowDetails ? _this.safeId('_details_' + rowIndex + '_') : null;\\n      var toggleDetailsFn = function toggleDetailsFn() {\\n        if (detailsSlot) {\\n          _this.$set(item, '_showDetails', !item._showDetails);\\n        }\\n      };\\n      // For each item data field in row\\n      var tds = fields.map(function (field, colIndex) {\\n        var data = {\\n          key: 'row-' + rowIndex + '-cell-' + colIndex,\\n          class: _this.tdClasses(field, item),\\n          attrs: _this.tdAttrs(field, item, colIndex),\\n          domProps: {}\\n        };\\n        var childNodes = void 0;\\n        if ($scoped[field.key]) {\\n          childNodes = [$scoped[field.key]({\\n            item: item,\\n            index: rowIndex,\\n            field: field,\\n            unformatted: lodash_get_default()(item, field.key),\\n            value: _this.getFormattedValue(item, field),\\n            toggleDetails: toggleDetailsFn,\\n            detailsShowing: Boolean(item._showDetails)\\n          })];\\n          if (_this.isStacked) {\\n            // We wrap in a DIV to ensure rendered as a single cell when visually stacked!\\n            childNodes = [h('div', {}, [childNodes])];\\n          }\\n        } else {\\n          var formatted = _this.getFormattedValue(item, field);\\n          if (_this.isStacked) {\\n            // We innerHTML a DIV to ensure rendered as a single cell when visually stacked!\\n            childNodes = [h('div', formatted)];\\n          } else {\\n            // Non stacked\\n            childNodes = formatted;\\n          }\\n        }\\n        // Render either a td or th cell\\n        return h(field.isRowHeader ? 'th' : 'td', data, childNodes);\\n      });\\n      // Calculate the row number in the dataset (indexed from 1)\\n      var ariaRowIndex = null;\\n      if (_this.currentPage && _this.perPage && _this.perPage > 0) {\\n        ariaRowIndex = (_this.currentPage - 1) * _this.perPage + rowIndex + 1;\\n      }\\n      // Assemble and add the row\\n      rows.push(h('tr', {\\n        key: 'row-' + rowIndex,\\n        class: [_this.rowClasses(item), { 'b-table-has-details': rowShowDetails }],\\n        attrs: {\\n          'aria-describedby': detailsId,\\n          'aria-rowindex': ariaRowIndex,\\n          role: _this.isStacked ? 'row' : null\\n        },\\n        on: {\\n          click: function click(evt) {\\n            _this.rowClicked(evt, item, rowIndex);\\n          },\\n          dblclick: function dblclick(evt) {\\n            _this.rowDblClicked(evt, item, rowIndex);\\n          },\\n          mouseenter: function mouseenter(evt) {\\n            _this.rowHovered(evt, item, rowIndex);\\n          }\\n        }\\n      }, tds));\\n      // Row Details slot\\n      if (rowShowDetails) {\\n        var tdAttrs = { colspan: String(fields.length) };\\n        var trAttrs = { id: detailsId };\\n        if (_this.isStacked) {\\n          tdAttrs['role'] = 'cell';\\n          trAttrs['role'] = 'row';\\n        }\\n        var details = h('td', { attrs: tdAttrs }, [detailsSlot({\\n          item: item,\\n          index: rowIndex,\\n          fields: fields,\\n          toggleDetails: toggleDetailsFn\\n        })]);\\n        rows.push(h('tr', {\\n          key: 'details-' + rowIndex,\\n          class: ['b-table-details', _this.tbodyTrClass],\\n          attrs: trAttrs\\n        }, [details]));\\n      } else if (detailsSlot) {\\n        // Only add the placeholder if a the table has a row-details slot defined (but not shown)\\n        rows.push(h(false));\\n      }\\n    });\\n\\n    // Empty Items / Empty Filtered Row slot\\n    if (this.showEmpty && (!items || items.length === 0)) {\\n      var empty = this.filter ? $slots['emptyfiltered'] : $slots['empty'];\\n      if (!empty) {\\n        empty = h('div', {\\n          class: ['text-center', 'my-2'],\\n          domProps: { innerHTML: this.filter ? this.emptyFilteredText : this.emptyText }\\n        });\\n      }\\n      empty = h('td', {\\n        attrs: {\\n          colspan: String(fields.length),\\n          role: this.isStacked ? 'cell' : null\\n        }\\n      }, [h('div', { attrs: { role: 'alert', 'aria-live': 'polite' } }, [empty])]);\\n      rows.push(h('tr', {\\n        key: 'empty-row',\\n        class: ['b-table-empty-row', this.tbodyTrClass],\\n        attrs: this.isStacked ? { role: 'row' } : {}\\n      }, [empty]));\\n    } else {\\n      rows.push(h(false));\\n    }\\n\\n    // Static bottom row slot (hidden in visibly stacked mode as we can't control the data-label)\\n    // If in always stacked mode, we don't bother rendering the row\\n    if ($scoped['bottom-row'] && this.isStacked !== true) {\\n      rows.push(h('tr', { key: 'bottom-row', class: ['b-table-bottom-row', this.tbodyTrClass] }, [$scoped['bottom-row']({ columns: fields.length, fields: fields })]));\\n    } else {\\n      rows.push(h(false));\\n    }\\n\\n    // Assemble the rows into the tbody\\n    var tbody = h('tbody', { class: this.bodyClasses, attrs: this.isStacked ? { role: 'rowgroup' } : {} }, rows);\\n\\n    // Assemble table\\n    var table = h('table', {\\n      class: this.tableClasses,\\n      attrs: {\\n        id: this.safeId(),\\n        role: this.isStacked ? 'table' : null,\\n        'aria-busy': this.computedBusy ? 'true' : 'false',\\n        'aria-colcount': String(fields.length),\\n        'aria-rowcount': this.$attrs['aria-rowcount'] || this.items.length > this.perPage ? this.items.length : null\\n      }\\n    }, [caption, colgroup, thead, tfoot, tbody]);\\n\\n    // Add responsive wrapper if needed and return table\\n    return this.isResponsive ? h('div', { class: this.responsiveClass }, [table]) : table;\\n  },\\n  data: function data() {\\n    return {\\n      localSortBy: this.sortBy || '',\\n      localSortDesc: this.sortDesc || false,\\n      localItems: [],\\n      // Note: filteredItems only used to determine if # of items changed\\n      filteredItems: [],\\n      localBusy: false\\n    };\\n  },\\n\\n  props: {\\n    items: {\\n      type: [Array, Function],\\n      default: function _default() {\\n        return [];\\n      }\\n    },\\n    fields: {\\n      type: [Object, Array],\\n      default: null\\n    },\\n    sortBy: {\\n      type: String,\\n      default: null\\n    },\\n    sortDesc: {\\n      type: Boolean,\\n      default: false\\n    },\\n    sortDirection: {\\n      type: String,\\n      default: 'asc',\\n      validator: function validator(direction) {\\n        return arrayIncludes(['asc', 'desc', 'last'], direction);\\n      }\\n    },\\n    caption: {\\n      type: String,\\n      default: null\\n    },\\n    captionTop: {\\n      type: Boolean,\\n      default: false\\n    },\\n    striped: {\\n      type: Boolean,\\n      default: false\\n    },\\n    bordered: {\\n      type: Boolean,\\n      default: false\\n    },\\n    outlined: {\\n      type: Boolean,\\n      default: false\\n    },\\n    dark: {\\n      type: Boolean,\\n      default: function _default() {\\n        if (this && typeof this.inverse === 'boolean') {\\n          // Deprecate inverse\\n          utils_warn(\\\"b-table: prop 'inverse' has been deprecated. Use 'dark' instead\\\");\\n          return this.dark;\\n        }\\n        return false;\\n      }\\n    },\\n    inverse: {\\n      // Deprecated in v1.0.0 in favor of `dark`\\n      type: Boolean,\\n      default: null\\n    },\\n    hover: {\\n      type: Boolean,\\n      default: false\\n    },\\n    small: {\\n      type: Boolean,\\n      default: false\\n    },\\n    fixed: {\\n      type: Boolean,\\n      default: false\\n    },\\n    footClone: {\\n      type: Boolean,\\n      default: false\\n    },\\n    responsive: {\\n      type: [Boolean, String],\\n      default: false\\n    },\\n    stacked: {\\n      type: [Boolean, String],\\n      default: false\\n    },\\n    headVariant: {\\n      type: String,\\n      default: ''\\n    },\\n    footVariant: {\\n      type: String,\\n      default: ''\\n    },\\n    theadClass: {\\n      type: [String, Array],\\n      default: null\\n    },\\n    theadTrClass: {\\n      type: [String, Array],\\n      default: null\\n    },\\n    tbodyClass: {\\n      type: [String, Array],\\n      default: null\\n    },\\n    tbodyTrClass: {\\n      type: [String, Array],\\n      default: null\\n    },\\n    tfootClass: {\\n      type: [String, Array],\\n      default: null\\n    },\\n    tfootTrClass: {\\n      type: [String, Array],\\n      default: null\\n    },\\n    perPage: {\\n      type: Number,\\n      default: 0\\n    },\\n    currentPage: {\\n      type: Number,\\n      default: 1\\n    },\\n    filter: {\\n      type: [String, RegExp, Function],\\n      default: null\\n    },\\n    sortCompare: {\\n      type: Function,\\n      default: null\\n    },\\n    noLocalSorting: {\\n      type: Boolean,\\n      default: false\\n    },\\n    noProviderPaging: {\\n      type: Boolean,\\n      default: false\\n    },\\n    noProviderSorting: {\\n      type: Boolean,\\n      default: false\\n    },\\n    noProviderFiltering: {\\n      type: Boolean,\\n      default: false\\n    },\\n    noSortReset: {\\n      type: Boolean,\\n      default: false\\n    },\\n    busy: {\\n      type: Boolean,\\n      default: false\\n    },\\n    value: {\\n      type: Array,\\n      default: function _default() {\\n        return [];\\n      }\\n    },\\n    labelSortAsc: {\\n      type: String,\\n      default: 'Click to sort Ascending'\\n    },\\n    labelSortDesc: {\\n      type: String,\\n      default: 'Click to sort Descending'\\n    },\\n    showEmpty: {\\n      type: Boolean,\\n      default: false\\n    },\\n    emptyText: {\\n      type: String,\\n      default: 'There are no records to show'\\n    },\\n    emptyFilteredText: {\\n      type: String,\\n      default: 'There are no records matching your request'\\n    },\\n    apiUrl: {\\n      // Passthrough prop. Passed to the context object. Not used by b-table directly\\n      type: String,\\n      default: ''\\n    }\\n  },\\n  watch: {\\n    items: function items(newVal, oldVal) {\\n      if (oldVal !== newVal) {\\n        this._providerUpdate();\\n      }\\n    },\\n    context: function context(newVal, oldVal) {\\n      if (!loose_equal(newVal, oldVal)) {\\n        this.$emit('context-changed', newVal);\\n      }\\n    },\\n    filteredItems: function filteredItems(newVal, oldVal) {\\n      if (this.localFiltering && newVal.length !== oldVal.length) {\\n        // Emit a filtered notification event, as number of filtered items has changed\\n        this.$emit('filtered', newVal);\\n      }\\n    },\\n    sortDesc: function sortDesc(newVal, oldVal) {\\n      if (newVal === this.localSortDesc) {\\n        return;\\n      }\\n      this.localSortDesc = newVal || false;\\n    },\\n    localSortDesc: function localSortDesc(newVal, oldVal) {\\n      // Emit update to sort-desc.sync\\n      if (newVal !== oldVal) {\\n        this.$emit('update:sortDesc', newVal);\\n        if (!this.noProviderSorting) {\\n          this._providerUpdate();\\n        }\\n      }\\n    },\\n    sortBy: function sortBy(newVal, oldVal) {\\n      if (newVal === this.localSortBy) {\\n        return;\\n      }\\n      this.localSortBy = newVal || null;\\n    },\\n    localSortBy: function localSortBy(newVal, oldVal) {\\n      if (newVal !== oldVal) {\\n        this.$emit('update:sortBy', newVal);\\n        if (!this.noProviderSorting) {\\n          this._providerUpdate();\\n        }\\n      }\\n    },\\n    perPage: function perPage(newVal, oldVal) {\\n      if (oldVal !== newVal && !this.noProviderPaging) {\\n        this._providerUpdate();\\n      }\\n    },\\n    currentPage: function currentPage(newVal, oldVal) {\\n      if (oldVal !== newVal && !this.noProviderPaging) {\\n        this._providerUpdate();\\n      }\\n    },\\n    filter: function filter(newVal, oldVal) {\\n      if (oldVal !== newVal && !this.noProviderFiltering) {\\n        this._providerUpdate();\\n      }\\n    },\\n    localBusy: function localBusy(newVal, oldVal) {\\n      if (newVal !== oldVal) {\\n        this.$emit('update:busy', newVal);\\n      }\\n    }\\n  },\\n  mounted: function mounted() {\\n    var _this2 = this;\\n\\n    this.localSortBy = this.sortBy;\\n    this.localSortDesc = this.sortDesc;\\n    if (this.hasProvider) {\\n      this._providerUpdate();\\n    }\\n    this.listenOnRoot('bv::refresh::table', function (id) {\\n      if (id === _this2.id || id === _this2) {\\n        _this2._providerUpdate();\\n      }\\n    });\\n  },\\n\\n  computed: {\\n    isStacked: function isStacked() {\\n      return this.stacked === '' ? true : this.stacked;\\n    },\\n    isResponsive: function isResponsive() {\\n      var responsive = this.responsive === '' ? true : this.responsive;\\n      return this.isStacked ? false : responsive;\\n    },\\n    responsiveClass: function responsiveClass() {\\n      return this.isResponsive === true ? 'table-responsive' : this.isResponsive ? 'table-responsive-' + this.responsive : '';\\n    },\\n    tableClasses: function tableClasses() {\\n      return ['table', 'b-table', this.striped ? 'table-striped' : '', this.hover ? 'table-hover' : '', this.dark ? 'table-dark' : '', this.bordered ? 'table-bordered' : '', this.small ? 'table-sm' : '', this.outlined ? 'border' : '', this.fixed ? 'b-table-fixed' : '', this.isStacked === true ? 'b-table-stacked' : this.isStacked ? 'b-table-stacked-' + this.stacked : ''];\\n    },\\n    headClasses: function headClasses() {\\n      return [this.headVariant ? 'thead-' + this.headVariant : '', this.theadClass];\\n    },\\n    bodyClasses: function bodyClasses() {\\n      return [this.tbodyClass];\\n    },\\n    footClasses: function footClasses() {\\n      var variant = this.footVariant || this.headVariant || null;\\n      return [variant ? 'thead-' + variant : '', this.tfootClass];\\n    },\\n    captionStyles: function captionStyles() {\\n      // Move caption to top\\n      return this.captionTop ? { captionSide: 'top' } : {};\\n    },\\n    hasProvider: function hasProvider() {\\n      return this.items instanceof Function;\\n    },\\n    localFiltering: function localFiltering() {\\n      return this.hasProvider ? this.noProviderFiltering : true;\\n    },\\n    localSorting: function localSorting() {\\n      return this.hasProvider ? this.noProviderSorting : !this.noLocalSorting;\\n    },\\n    localPaging: function localPaging() {\\n      return this.hasProvider ? this.noProviderPaging : true;\\n    },\\n    context: function context() {\\n      return {\\n        perPage: this.perPage,\\n        currentPage: this.currentPage,\\n        filter: this.filter,\\n        sortBy: this.localSortBy,\\n        sortDesc: this.localSortDesc,\\n        apiUrl: this.apiUrl\\n      };\\n    },\\n    computedFields: function computedFields() {\\n      var _this3 = this;\\n\\n      // We normalize fields into an array of objects\\n      // [ { key:..., label:..., ...}, {...}, ..., {..}]\\n      var fields = [];\\n      if (isArray(this.fields)) {\\n        // Normalize array Form\\n        this.fields.filter(function (f) {\\n          return f;\\n        }).forEach(function (f) {\\n          if (typeof f === 'string') {\\n            fields.push({ key: f, label: lodash_startcase_default()(f) });\\n          } else if ((typeof f === 'undefined' ? 'undefined' : table_typeof(f)) === 'object' && f.key && typeof f.key === 'string') {\\n            // Full object definition. We use assign so that we don't mutate the original\\n            fields.push(object_assign({}, f));\\n          } else if ((typeof f === 'undefined' ? 'undefined' : table_typeof(f)) === 'object' && keys(f).length === 1) {\\n            // Shortcut object (i.e. { 'foo_bar': 'This is Foo Bar' }\\n            var key = keys(f)[0];\\n            var field = processField(key, f[key]);\\n            if (field) {\\n              fields.push(field);\\n            }\\n          }\\n        });\\n      } else if (this.fields && table_typeof(this.fields) === 'object' && keys(this.fields).length > 0) {\\n        // Normalize object Form\\n        keys(this.fields).forEach(function (key) {\\n          var field = processField(key, _this3.fields[key]);\\n          if (field) {\\n            fields.push(field);\\n          }\\n        });\\n      }\\n      // If no field provided, take a sample from first record (if exits)\\n      if (fields.length === 0 && this.computedItems.length > 0) {\\n        var sample = this.computedItems[0];\\n        var ignoredKeys = ['_rowVariant', '_cellVariants', '_showDetails'];\\n        keys(sample).forEach(function (k) {\\n          if (!ignoredKeys.includes(k)) {\\n            fields.push({ key: k, label: lodash_startcase_default()(k) });\\n          }\\n        });\\n      }\\n      // Ensure we have a unique array of fields and that they have String labels\\n      var memo = {};\\n      return fields.filter(function (f) {\\n        if (!memo[f.key]) {\\n          memo[f.key] = true;\\n          f.label = typeof f.label === 'string' ? f.label : lodash_startcase_default()(f.key);\\n          return true;\\n        }\\n        return false;\\n      });\\n    },\\n    computedItems: function computedItems() {\\n      // Grab some props/data to ensure reactivity\\n      var perPage = this.perPage;\\n      var currentPage = this.currentPage;\\n      var filter = this.filter;\\n      var sortBy = this.localSortBy;\\n      var sortDesc = this.localSortDesc;\\n      var sortCompare = this.sortCompare;\\n      var localFiltering = this.localFiltering;\\n      var localSorting = this.localSorting;\\n      var localPaging = this.localPaging;\\n      var items = this.hasProvider ? this.localItems : this.items;\\n      if (!items) {\\n        this.$nextTick(this._providerUpdate);\\n        return [];\\n      }\\n      // Array copy for sorting, filtering, etc.\\n      items = items.slice();\\n      // Apply local filter\\n      if (filter && localFiltering) {\\n        if (filter instanceof Function) {\\n          items = items.filter(filter);\\n        } else {\\n          var regex = void 0;\\n          if (filter instanceof RegExp) {\\n            regex = filter;\\n          } else {\\n            regex = new RegExp('.*' + filter + '.*', 'ig');\\n          }\\n          items = items.filter(function (item) {\\n            var test = regex.test(recToString(item));\\n            regex.lastIndex = 0;\\n            return test;\\n          });\\n        }\\n      }\\n      if (localFiltering) {\\n        // Make a local copy of filtered items to trigger filtered event\\n        this.filteredItems = items.slice();\\n      }\\n      // Apply local Sort\\n      if (sortBy && localSorting) {\\n        items = stableSort(items, function (a, b) {\\n          var ret = null;\\n          if (typeof sortCompare === 'function') {\\n            // Call user provided sortCompare routine\\n            ret = sortCompare(a, b, sortBy);\\n          }\\n          if (ret === null || ret === undefined) {\\n            // Fallback to defaultSortCompare if sortCompare not defined or returns null\\n            ret = defaultSortCompare(a, b, sortBy);\\n          }\\n          // Handle sorting direction\\n          return (ret || 0) * (sortDesc ? -1 : 1);\\n        });\\n      }\\n      // Apply local pagination\\n      if (Boolean(perPage) && localPaging) {\\n        // Grab the current page of data (which may be past filtered items)\\n        items = items.slice((currentPage - 1) * perPage, currentPage * perPage);\\n      }\\n      // Update the value model with the filtered/sorted/paginated data set\\n      this.$emit('input', items);\\n      return items;\\n    },\\n    computedBusy: function computedBusy() {\\n      return this.busy || this.localBusy;\\n    }\\n  },\\n  methods: {\\n    keys: keys,\\n    fieldClasses: function fieldClasses(field) {\\n      return [field.sortable ? 'sorting' : '', field.sortable && this.localSortBy === field.key ? 'sorting_' + (this.localSortDesc ? 'desc' : 'asc') : '', field.variant ? 'table-' + field.variant : '', field.class ? field.class : '', field.thClass ? field.thClass : ''];\\n    },\\n    tdClasses: function tdClasses(field, item) {\\n      var cellVariant = '';\\n      if (item._cellVariants && item._cellVariants[field.key]) {\\n        cellVariant = (this.dark ? 'bg' : 'table') + '-' + item._cellVariants[field.key];\\n      }\\n      return [field.variant && !cellVariant ? (this.dark ? 'bg' : 'table') + '-' + field.variant : '', cellVariant, field.class ? field.class : '', this.getTdValues(item, field.key, field.tdClass, '')];\\n    },\\n    tdAttrs: function tdAttrs(field, item, colIndex) {\\n      var attrs = {};\\n      attrs['aria-colindex'] = String(colIndex + 1);\\n      if (this.isStacked) {\\n        // Generate the \\\"header cell\\\" label content in stacked mode\\n        attrs['data-label'] = field.label;\\n        if (field.isRowHeader) {\\n          attrs['role'] = 'rowheader';\\n        } else {\\n          attrs['role'] = 'cell';\\n        }\\n      }\\n      return object_assign({}, attrs, this.getTdValues(item, field.key, field.tdAttr, {}));\\n    },\\n    rowClasses: function rowClasses(item) {\\n      return [item._rowVariant ? (this.dark ? 'bg' : 'table') + '-' + item._rowVariant : '', this.tbodyTrClass];\\n    },\\n    rowClicked: function rowClicked(e, item, index) {\\n      if (this.stopIfBusy(e)) {\\n        // If table is busy (via provider) then don't propagate\\n        return;\\n      }\\n      this.$emit('row-clicked', item, index, e);\\n    },\\n    rowDblClicked: function rowDblClicked(e, item, index) {\\n      if (this.stopIfBusy(e)) {\\n        // If table is busy (via provider) then don't propagate\\n        return;\\n      }\\n      this.$emit('row-dblclicked', item, index, e);\\n    },\\n    rowHovered: function rowHovered(e, item, index) {\\n      if (this.stopIfBusy(e)) {\\n        // If table is busy (via provider) then don't propagate\\n        return;\\n      }\\n      this.$emit('row-hovered', item, index, e);\\n    },\\n    headClicked: function headClicked(e, field) {\\n      var _this4 = this;\\n\\n      if (this.stopIfBusy(e)) {\\n        // If table is busy (via provider) then don't propagate\\n        return;\\n      }\\n      var sortChanged = false;\\n      var toggleLocalSortDesc = function toggleLocalSortDesc() {\\n        var sortDirection = field.sortDirection || _this4.sortDirection;\\n        if (sortDirection === 'asc') {\\n          _this4.localSortDesc = false;\\n        } else if (sortDirection === 'desc') {\\n          _this4.localSortDesc = true;\\n        }\\n      };\\n      if (field.sortable) {\\n        if (field.key === this.localSortBy) {\\n          // Change sorting direction on current column\\n          this.localSortDesc = !this.localSortDesc;\\n        } else {\\n          // Start sorting this column ascending\\n          this.localSortBy = field.key;\\n          toggleLocalSortDesc();\\n        }\\n        sortChanged = true;\\n      } else if (this.localSortBy && !this.noSortReset) {\\n        this.localSortBy = null;\\n        toggleLocalSortDesc();\\n        sortChanged = true;\\n      }\\n      this.$emit('head-clicked', field.key, field, e);\\n      if (sortChanged) {\\n        // Sorting parameters changed\\n        this.$emit('sort-changed', this.context);\\n      }\\n    },\\n    stopIfBusy: function stopIfBusy(evt) {\\n      if (this.computedBusy) {\\n        // If table is busy (via provider) then don't propagate\\n        evt.preventDefault();\\n        evt.stopPropagation();\\n        return true;\\n      }\\n      return false;\\n    },\\n    refresh: function refresh() {\\n      // Expose refresh method\\n      if (this.hasProvider) {\\n        this._providerUpdate();\\n      }\\n    },\\n    _providerSetLocal: function _providerSetLocal(items) {\\n      this.localItems = items && items.length > 0 ? items.slice() : [];\\n      this.localBusy = false;\\n      this.$emit('refreshed');\\n      // Deprecated root emit\\n      this.emitOnRoot('table::refreshed', this.id);\\n      // New root emit\\n      if (this.id) {\\n        this.emitOnRoot('bv::table::refreshed', this.id);\\n      }\\n    },\\n    _providerUpdate: function _providerUpdate() {\\n      var _this5 = this;\\n\\n      // Refresh the provider items\\n      if (this.computedBusy || !this.hasProvider) {\\n        // Don't refresh remote data if we are 'busy' or if no provider\\n        return;\\n      }\\n      // Set internal busy state\\n      this.localBusy = true;\\n      // Call provider function with context and optional callback\\n      var data = this.items(this.context, this._providerSetLocal);\\n      if (data && data.then && typeof data.then === 'function') {\\n        // Provider returned Promise\\n        data.then(function (items) {\\n          _this5._providerSetLocal(items);\\n        });\\n      } else {\\n        // Provider returned Array data\\n        this._providerSetLocal(data);\\n      }\\n    },\\n    getTdValues: function getTdValues(item, key, tdValue, defValue) {\\n      var parent = this.$parent;\\n      if (tdValue) {\\n        if (typeof tdValue === 'function') {\\n          var value = lodash_get_default()(item, key);\\n          return tdValue(value, key, item);\\n        } else if (typeof tdValue === 'string' && typeof parent[tdValue] === 'function') {\\n          var _value = lodash_get_default()(item, key);\\n          return parent[tdValue](_value, key, item);\\n        }\\n        return tdValue;\\n      }\\n      return defValue;\\n    },\\n    getFormattedValue: function getFormattedValue(item, field) {\\n      var key = field.key;\\n      var formatter = field.formatter;\\n      var parent = this.$parent;\\n      var value = lodash_get_default()(item, key);\\n      if (formatter) {\\n        if (typeof formatter === 'function') {\\n          value = formatter(value, key, item);\\n        } else if (typeof formatter === 'string' && typeof parent[formatter] === 'function') {\\n          value = parent[formatter](value, key, item);\\n        }\\n      }\\n      return value;\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/table/index.js\\n\\n\\n\\nvar table_components = {\\n  bTable: components_table_table\\n};\\n\\nvar table_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, table_components);\\n  }\\n};\\n\\nvueUse(table_VuePlugin);\\n\\n/* harmony default export */ var components_table = (table_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/tabs/tabs.js\\nfunction tabs_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\n\\n\\n\\n// Helper component\\nvar bTabButtonHelper = {\\n  name: 'bTabButtonHelper',\\n  props: {\\n    content: { type: [String, Array], default: '' },\\n    href: { type: String, default: '#' },\\n    posInSet: { type: Number, default: null },\\n    setSize: { type: Number, default: null },\\n    controls: { type: String, default: null },\\n    id: { type: String, default: null },\\n    active: { type: Boolean, default: false },\\n    disabled: { type: Boolean, default: false },\\n    linkClass: { default: null },\\n    itemClass: { default: null },\\n    noKeyNav: { type: Boolean, default: false }\\n  },\\n  render: function render(h) {\\n    var link = h('a', {\\n      class: ['nav-link', { active: this.active, disabled: this.disabled }, this.linkClass],\\n      attrs: {\\n        role: 'tab',\\n        tabindex: this.noKeyNav ? null : '-1',\\n        href: this.href,\\n        id: this.id,\\n        disabled: this.disabled,\\n        'aria-selected': this.active ? 'true' : 'false',\\n        'aria-setsize': this.setSize,\\n        'aria-posinset': this.posInSet,\\n        'aria-controls': this.controls\\n      },\\n      on: {\\n        click: this.handleClick,\\n        keydown: this.handleClick\\n      }\\n    }, this.content);\\n    return h('li', { class: ['nav-item', this.itemClass], attrs: { role: 'presentation' } }, [link]);\\n  },\\n\\n  methods: {\\n    handleClick: function handleClick(evt) {\\n      function stop() {\\n        evt.preventDefault();\\n        evt.stopPropagation();\\n      }\\n      if (evt.type !== 'click' && this.noKeyNav) {\\n        return;\\n      }\\n      if (this.disabled) {\\n        stop();\\n        return;\\n      }\\n      if (evt.type === 'click' || evt.keyCode === key_codes.ENTER || evt.keyCode === key_codes.SPACE) {\\n        stop();\\n        this.$emit('click', evt);\\n      }\\n    }\\n  }\\n};\\n\\n/* harmony default export */ var tabs = ({\\n  mixins: [mixins_id],\\n  render: function render(h) {\\n    var _this = this,\\n        _ref;\\n\\n    var tabs = this.tabs;\\n    // Navigation 'buttons'\\n    var buttons = tabs.map(function (tab, index) {\\n      return h(bTabButtonHelper, {\\n        key: index,\\n        props: {\\n          content: tab.$slots.title || tab.title,\\n          href: tab.href,\\n          id: tab.controlledBy || _this.safeId('_BV_tab_' + (index + 1) + '_'),\\n          active: tab.localActive,\\n          disabled: tab.disabled,\\n          setSize: tabs.length,\\n          posInSet: index + 1,\\n          controls: _this.safeId('_BV_tab_container_'),\\n          linkClass: tab.titleLinkClass,\\n          itemClass: tab.titleItemClass,\\n          noKeyNav: _this.noKeyNav\\n        },\\n        on: {\\n          click: function click(evt) {\\n            _this.setTab(index);\\n          }\\n        }\\n      });\\n    });\\n\\n    // Nav 'button' wrapper\\n    var navs = h('ul', {\\n      class: ['nav', (_ref = {}, tabs_defineProperty(_ref, 'nav-' + this.navStyle, !this.noNavStyle), tabs_defineProperty(_ref, 'card-header-' + this.navStyle, this.card && !this.vertical), tabs_defineProperty(_ref, 'card-header', this.card && this.vertical), tabs_defineProperty(_ref, 'h-100', this.card && this.vertical), tabs_defineProperty(_ref, 'flex-column', this.vertical), tabs_defineProperty(_ref, 'border-bottom-0', this.vertical), tabs_defineProperty(_ref, 'rounded-0', this.vertical), tabs_defineProperty(_ref, 'small', this.small), _ref), this.navClass],\\n      attrs: {\\n        role: 'tablist',\\n        tabindex: this.noKeyNav ? null : '0',\\n        id: this.safeId('_BV_tab_controls_')\\n      },\\n      on: { keydown: this.onKeynav }\\n    }, [buttons, this.$slots.tabs]);\\n    navs = h('div', {\\n      class: [{\\n        'card-header': this.card && !this.vertical && !(this.end || this.bottom),\\n        'card-footer': this.card && !this.vertical && (this.end || this.bottom),\\n        'col-auto': this.vertical\\n      }, this.navWrapperClass]\\n    }, [navs]);\\n\\n    var empty = void 0;\\n    if (tabs && tabs.length) {\\n      empty = h(false);\\n    } else {\\n      empty = h('div', { class: ['tab-pane', 'active', { 'card-body': this.card }] }, this.$slots.empty);\\n    }\\n\\n    // Main content section\\n    var content = h('div', {\\n      ref: 'tabsContainer',\\n      class: ['tab-content', { col: this.vertical }, this.contentClass],\\n      attrs: { id: this.safeId('_BV_tab_container_') }\\n    }, [this.$slots.default, empty]);\\n\\n    // Render final output\\n    return h(this.tag, {\\n      class: ['tabs', { row: this.vertical, 'no-gutters': this.vertical && this.card }],\\n      attrs: { id: this.safeId() }\\n    }, [this.end || this.bottom ? content : h(false), [navs], this.end || this.bottom ? h(false) : content]);\\n  },\\n  data: function data() {\\n    return {\\n      currentTab: this.value,\\n      tabs: []\\n    };\\n  },\\n\\n  props: {\\n    tag: {\\n      type: String,\\n      default: 'div'\\n    },\\n    card: {\\n      type: Boolean,\\n      default: false\\n    },\\n    small: {\\n      type: Boolean,\\n      default: false\\n    },\\n    value: {\\n      type: Number,\\n      default: null\\n    },\\n    pills: {\\n      type: Boolean,\\n      default: false\\n    },\\n    vertical: {\\n      type: Boolean,\\n      default: false\\n    },\\n    bottom: {\\n      type: Boolean,\\n      default: false\\n    },\\n    end: {\\n      // Synonym for 'bottom'\\n      type: Boolean,\\n      default: false\\n    },\\n    noFade: {\\n      type: Boolean,\\n      default: false\\n    },\\n    noNavStyle: {\\n      type: Boolean,\\n      default: false\\n    },\\n    noKeyNav: {\\n      type: Boolean,\\n      default: false\\n    },\\n    lazy: {\\n      // This prop is sniffed by the tab child\\n      type: Boolean,\\n      default: false\\n    },\\n    contentClass: {\\n      type: [String, Array, Object],\\n      default: null\\n    },\\n    navClass: {\\n      type: [String, Array, Object],\\n      default: null\\n    },\\n    navWrapperClass: {\\n      type: [String, Array, Object],\\n      default: null\\n    }\\n  },\\n  watch: {\\n    currentTab: function currentTab(val, old) {\\n      if (val === old) {\\n        return;\\n      }\\n      this.$root.$emit('changed::tab', this, val, this.tabs[val]);\\n      this.$emit('input', val);\\n      this.tabs[val].$emit('click');\\n    },\\n    value: function value(val, old) {\\n      if (val === old) {\\n        return;\\n      }\\n      if (typeof old !== 'number') {\\n        old = 0;\\n      }\\n      // Moving left or right?\\n      var direction = val < old ? -1 : 1;\\n      this.setTab(val, false, direction);\\n    }\\n  },\\n  computed: {\\n    fade: function fade() {\\n      // This computed prop is sniffed by the tab child\\n      return !this.noFade;\\n    },\\n    navStyle: function navStyle() {\\n      return this.pills ? 'pills' : 'tabs';\\n    }\\n  },\\n  methods: {\\n    /**\\n     * Util: Return the sign of a number (as -1, 0, or 1)\\n     */\\n    sign: function sign(x) {\\n      return x === 0 ? 0 : x > 0 ? 1 : -1;\\n    },\\n\\n    /*\\n         * handle keyboard navigation\\n         */\\n    onKeynav: function onKeynav(evt) {\\n      if (this.noKeyNav) {\\n        return;\\n      }\\n      var key = evt.keyCode;\\n      var shift = evt.shiftKey;\\n      function stop() {\\n        evt.preventDefault();\\n        evt.stopPropagation();\\n      }\\n      if (key === key_codes.UP || key === key_codes.LEFT) {\\n        stop();\\n        if (shift) {\\n          this.setTab(0, false, 1);\\n        } else {\\n          this.previousTab();\\n        }\\n      } else if (key === key_codes.DOWN || key === key_codes.RIGHT) {\\n        stop();\\n        if (shift) {\\n          this.setTab(this.tabs.length - 1, false, -1);\\n        } else {\\n          this.nextTab();\\n        }\\n      }\\n    },\\n\\n    /**\\n     * Move to next tab\\n     */\\n    nextTab: function nextTab() {\\n      this.setTab(this.currentTab + 1, false, 1);\\n    },\\n\\n    /**\\n     * Move to previous tab\\n     */\\n    previousTab: function previousTab() {\\n      this.setTab(this.currentTab - 1, false, -1);\\n    },\\n\\n    /**\\n     * Set active tab on the tabs collection and the child 'tab' component\\n     * Index is the tab we want to activate. Direction is the direction we are moving\\n     * so if the tab we requested is disabled, we can skip over it.\\n     * Force is used by updateTabs to ensure we have cleared any previous active tabs.\\n     */\\n    setTab: function setTab(index, force, direction) {\\n      var _this2 = this;\\n\\n      direction = this.sign(direction || 0);\\n      index = index || 0;\\n      // Prevent setting same tab and infinite loops!\\n      if (!force && index === this.currentTab) {\\n        return;\\n      }\\n      var tab = this.tabs[index];\\n      // Don't go beyond indexes!\\n      if (!tab) {\\n        // Reset the v-model to the current Tab\\n        this.$emit('input', this.currentTab);\\n        return;\\n      }\\n      // Ignore or Skip disabled\\n      if (tab.disabled) {\\n        if (direction) {\\n          // Skip to next non disabled tab in specified direction (recursive)\\n          this.setTab(index + direction, force, direction);\\n        }\\n        return;\\n      }\\n      // Activate requested current tab, and deactivte any old tabs\\n      this.tabs.forEach(function (t) {\\n        if (t === tab) {\\n          // Set new tab as active\\n          _this2.$set(t, 'localActive', true);\\n        } else {\\n          // Ensure non current tabs are not active\\n          _this2.$set(t, 'localActive', false);\\n        }\\n      });\\n      // Update currentTab\\n      this.currentTab = index;\\n    },\\n\\n    /**\\n     * Dynamically update tabs list\\n     */\\n    updateTabs: function updateTabs() {\\n      // Probe tabs\\n      this.tabs = this.$children.filter(function (child) {\\n        return child._isTab;\\n      });\\n      // Set initial active tab\\n      var tabIndex = null;\\n      // Find *last* active non-dsabled tab in current tabs\\n      // We trust tab state over currentTab\\n      this.tabs.forEach(function (tab, index) {\\n        if (tab.localActive && !tab.disabled) {\\n          tabIndex = index;\\n        }\\n      });\\n      // Else try setting to currentTab\\n      if (tabIndex === null) {\\n        if (this.currentTab >= this.tabs.length) {\\n          // Handle last tab being removed\\n          this.setTab(this.tabs.length - 1, true, -1);\\n          return;\\n        } else if (this.tabs[this.currentTab] && !this.tabs[this.currentTab].disabled) {\\n          tabIndex = this.currentTab;\\n        }\\n      }\\n      // Else find *first* non-disabled tab in current tabs\\n      if (tabIndex === null) {\\n        this.tabs.forEach(function (tab, index) {\\n          if (!tab.disabled && tabIndex === null) {\\n            tabIndex = index;\\n          }\\n        });\\n      }\\n      this.setTab(tabIndex || 0, true, 0);\\n    }\\n  },\\n  mounted: function mounted() {\\n    this.updateTabs();\\n    // Observe Child changes so we can notify tabs change\\n    observeDOM(this.$refs.tabsContainer, this.updateTabs.bind(this), {\\n      subtree: false\\n    });\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/tabs/tab.js\\n\\n\\n/* harmony default export */ var tab = ({\\n  mixins: [mixins_id],\\n  render: function render(h) {\\n    var content = h(false);\\n    if (this.localActive || !this.computedLazy) {\\n      content = h(this.tag, {\\n        ref: 'panel',\\n        class: this.tabClasses,\\n        directives: [{ name: 'show', value: this.localActive }],\\n        attrs: {\\n          role: 'tabpanel',\\n          id: this.safeId(),\\n          'aria-hidden': this.localActive ? 'false' : 'true',\\n          'aria-expanded': this.localActive ? 'true' : 'false',\\n          'aria-lablelledby': this.controlledBy || null\\n        }\\n      }, [this.$slots.default]);\\n    }\\n    return h('transition', {\\n      props: { mode: 'out-in' },\\n      on: {\\n        beforeEnter: this.beforeEnter,\\n        beforeLeave: this.beforeLeave\\n      }\\n    }, [content]);\\n  },\\n\\n  methods: {\\n    beforeEnter: function beforeEnter() {\\n      var _this = this;\\n\\n      // change opacity 1 frame after display\\n      // otherwise css transition won't happen\\n      window.requestAnimationFrame(function () {\\n        _this.show = true;\\n      });\\n    },\\n    beforeLeave: function beforeLeave() {\\n      this.show = false;\\n    }\\n  },\\n  data: function data() {\\n    return {\\n      localActive: this.active && !this.disabled,\\n      show: false\\n    };\\n  },\\n  mounted: function mounted() {\\n    this.show = this.localActive;\\n  },\\n\\n  computed: {\\n    tabClasses: function tabClasses() {\\n      return ['tab-pane', this.$parent && this.$parent.card && !this.noBody ? 'card-body' : '', this.show ? 'show' : '', this.computedFade ? 'fade' : '', this.disabled ? 'disabled' : '', this.localActive ? 'active' : ''];\\n    },\\n    controlledBy: function controlledBy() {\\n      return this.buttonId || this.safeId('__BV_tab_button__');\\n    },\\n    computedFade: function computedFade() {\\n      return this.$parent.fade;\\n    },\\n    computedLazy: function computedLazy() {\\n      return this.$parent.lazy;\\n    },\\n    _isTab: function _isTab() {\\n      // For parent sniffing of child\\n      return true;\\n    }\\n  },\\n  props: {\\n    active: {\\n      type: Boolean,\\n      default: false\\n    },\\n    tag: {\\n      type: String,\\n      default: 'div'\\n    },\\n    buttonId: {\\n      type: String,\\n      default: ''\\n    },\\n    title: {\\n      type: String,\\n      default: ''\\n    },\\n    titleItemClass: {\\n      // Sniffed by tabs.vue and added to nav 'li.nav-item'\\n      type: [String, Array, Object],\\n      default: null\\n    },\\n    titleLinkClass: {\\n      // Sniffed by tabs.vue and added to nav 'a.nav-link'\\n      type: [String, Array, Object],\\n      default: null\\n    },\\n    headHtml: {\\n      // Is this actually ever used?\\n      type: String,\\n      default: null\\n    },\\n    disabled: {\\n      type: Boolean,\\n      default: false\\n    },\\n    noBody: {\\n      type: Boolean,\\n      default: false\\n    },\\n    href: {\\n      type: String,\\n      default: '#'\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/tabs/index.js\\n\\n\\n\\n\\nvar tabs_components = {\\n  bTabs: tabs,\\n  bTab: tab\\n};\\n\\nvar tabs_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, tabs_components);\\n  }\\n};\\n\\nvueUse(tabs_VuePlugin);\\n\\n/* harmony default export */ var components_tabs = (tabs_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/tooltip/tooltip.js\\n\\n\\n\\n\\n/* harmony default export */ var tooltip = ({\\n  mixins: [toolpop],\\n  render: function render(h) {\\n    return h('div', { class: ['d-none'], style: { display: 'none' }, attrs: { 'aria-hidden': true } }, [h('div', { ref: 'title' }, this.$slots.default)]);\\n  },\\n  data: function data() {\\n    return {};\\n  },\\n\\n  props: {\\n    title: {\\n      type: String,\\n      default: ''\\n    },\\n    triggers: {\\n      type: [String, Array],\\n      default: 'hover focus'\\n    },\\n    placement: {\\n      type: String,\\n      default: 'top'\\n    }\\n  },\\n  methods: {\\n    createToolpop: function createToolpop() {\\n      // getTarget is in toolpop mixin\\n      var target = this.getTarget();\\n      if (target) {\\n        this._toolpop = new tooltip_class(target, this.getConfig(), this.$root);\\n      } else {\\n        this._toolpop = null;\\n        utils_warn(\\\"b-tooltip: 'target' element not found!\\\");\\n      }\\n      return this._toolpop;\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/tooltip/index.js\\n\\n\\n\\nvar tooltip_components = {\\n  bTooltip: tooltip\\n};\\n\\nvar tooltip_VuePlugin = {\\n  install: function install(Vue) {\\n    registerComponents(Vue, tooltip_components);\\n  }\\n};\\n\\nvueUse(tooltip_VuePlugin);\\n\\n/* harmony default export */ var components_tooltip = (tooltip_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/components/index.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/directives/scrollspy/scrollspy.class.js\\nvar scrollspy_class_createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction scrollspy_class_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n/*\\n * ScrollSpy class definition\\n */\\n\\n\\n\\n\\n\\n\\n/*\\n * Constants / Defaults\\n */\\n\\nvar scrollspy_class_NAME = 'v-b-scrollspy';\\nvar ACTIVATE_EVENT = 'bv::scrollspy::activate';\\n\\nvar Default = {\\n  element: 'body',\\n  offset: 10,\\n  method: 'auto',\\n  throttle: 75\\n};\\n\\nvar DefaultType = {\\n  element: '(string|element|component)',\\n  offset: 'number',\\n  method: 'string',\\n  throttle: 'number'\\n};\\n\\nvar scrollspy_class_ClassName = {\\n  DROPDOWN_ITEM: 'dropdown-item',\\n  ACTIVE: 'active'\\n};\\n\\nvar scrollspy_class_Selector = {\\n  ACTIVE: '.active',\\n  NAV_LIST_GROUP: '.nav, .list-group',\\n  NAV_LINKS: '.nav-link',\\n  NAV_ITEMS: '.nav-item',\\n  LIST_ITEMS: '.list-group-item',\\n  DROPDOWN: '.dropdown, .dropup',\\n  DROPDOWN_ITEMS: '.dropdown-item',\\n  DROPDOWN_TOGGLE: '.dropdown-toggle'\\n};\\n\\nvar OffsetMethod = {\\n  OFFSET: 'offset',\\n  POSITION: 'position'\\n\\n  // HREFs must start with # but can be === '#', or start with '#/' or '#!' (which can be router links)\\n};var HREF_REGEX = /^#[^/!]+/;\\n\\n// Transition Events\\nvar scrollspy_class_TransitionEndEvents = ['webkitTransitionEnd', 'transitionend', 'otransitionend', 'oTransitionEnd'];\\n\\n/*\\n * Utility Methods\\n */\\n\\n// Better var type detection\\n/* istanbul ignore next: not easy to test */\\nfunction toType(obj) {\\n  return {}.toString.call(obj).match(/\\\\s([a-zA-Z]+)/)[1].toLowerCase();\\n}\\n\\n// Check config properties for expected types\\n/* istanbul ignore next: not easy to test */\\nfunction typeCheckConfig(componentName, config, configTypes) {\\n  for (var property in configTypes) {\\n    if (Object.prototype.hasOwnProperty.call(configTypes, property)) {\\n      var expectedTypes = configTypes[property];\\n      var value = config[property];\\n      var valueType = value && isElement(value) ? 'element' : toType(value);\\n      // handle Vue instances\\n      valueType = value && value._isVue ? 'component' : valueType;\\n\\n      if (!new RegExp(expectedTypes).test(valueType)) {\\n        utils_warn(componentName + ': Option \\\"' + property + '\\\" provided type \\\"' + valueType + '\\\", but expected type \\\"' + expectedTypes + '\\\"');\\n      }\\n    }\\n  }\\n}\\n\\n/*\\n * ------------------------------------------------------------------------\\n * Class Definition\\n * ------------------------------------------------------------------------\\n */\\n\\n/* istanbul ignore next: not easy to test */\\n\\nvar scrollspy_class_ScrollSpy = function () {\\n  function ScrollSpy(element, config, $root) {\\n    scrollspy_class_classCallCheck(this, ScrollSpy);\\n\\n    // The element we activate links in\\n    this.$el = element;\\n    this.$scroller = null;\\n    this.$selector = [scrollspy_class_Selector.NAV_LINKS, scrollspy_class_Selector.LIST_ITEMS, scrollspy_class_Selector.DROPDOWN_ITEMS].join(',');\\n    this.$offsets = [];\\n    this.$targets = [];\\n    this.$activeTarget = null;\\n    this.$scrollHeight = 0;\\n    this.$resizeTimeout = null;\\n    this.$obs_scroller = null;\\n    this.$obs_targets = null;\\n    this.$root = $root || null;\\n    this.$config = null;\\n\\n    this.updateConfig(config);\\n  }\\n\\n  scrollspy_class_createClass(ScrollSpy, [{\\n    key: 'updateConfig',\\n    value: function updateConfig(config, $root) {\\n      if (this.$scroller) {\\n        // Just in case out scroll element has changed\\n        this.unlisten();\\n        this.$scroller = null;\\n      }\\n      var cfg = object_assign({}, this.constructor.Default, config);\\n      if ($root) {\\n        this.$root = $root;\\n      }\\n      typeCheckConfig(this.constructor.Name, cfg, this.constructor.DefaultType);\\n      this.$config = cfg;\\n\\n      if (this.$root) {\\n        var self = this;\\n        this.$root.$nextTick(function () {\\n          self.listen();\\n        });\\n      } else {\\n        this.listen();\\n      }\\n    }\\n  }, {\\n    key: 'dispose',\\n    value: function dispose() {\\n      this.unlisten();\\n      clearTimeout(this.$resizeTimeout);\\n      this.$resizeTimeout = null;\\n      this.$el = null;\\n      this.$config = null;\\n      this.$scroller = null;\\n      this.$selector = null;\\n      this.$offsets = null;\\n      this.$targets = null;\\n      this.$activeTarget = null;\\n      this.$scrollHeight = null;\\n    }\\n  }, {\\n    key: 'listen',\\n    value: function listen() {\\n      var _this = this;\\n\\n      var scroller = this.getScroller();\\n      if (scroller && scroller.tagName !== 'BODY') {\\n        eventOn(scroller, 'scroll', this);\\n      }\\n      eventOn(window, 'scroll', this);\\n      eventOn(window, 'resize', this);\\n      eventOn(window, 'orientationchange', this);\\n      scrollspy_class_TransitionEndEvents.forEach(function (evtName) {\\n        eventOn(window, evtName, _this);\\n      });\\n      this.setObservers(true);\\n      // Scedule a refresh\\n      this.handleEvent('refresh');\\n    }\\n  }, {\\n    key: 'unlisten',\\n    value: function unlisten() {\\n      var _this2 = this;\\n\\n      var scroller = this.getScroller();\\n      this.setObservers(false);\\n      if (scroller && scroller.tagName !== 'BODY') {\\n        eventOff(scroller, 'scroll', this);\\n      }\\n      eventOff(window, 'scroll', this);\\n      eventOff(window, 'resize', this);\\n      eventOff(window, 'orientationchange', this);\\n      scrollspy_class_TransitionEndEvents.forEach(function (evtName) {\\n        eventOff(window, evtName, _this2);\\n      });\\n    }\\n  }, {\\n    key: 'setObservers',\\n    value: function setObservers(on) {\\n      var _this3 = this;\\n\\n      // We observe both the scroller for content changes, and the target links\\n      if (this.$obs_scroller) {\\n        this.$obs_scroller.disconnect();\\n        this.$obs_scroller = null;\\n      }\\n      if (this.$obs_targets) {\\n        this.$obs_targets.disconnect();\\n        this.$obs_targets = null;\\n      }\\n      if (on) {\\n        this.$obs_targets = observeDOM(this.$el, function () {\\n          _this3.handleEvent('mutation');\\n        }, {\\n          subtree: true,\\n          childList: true,\\n          attributes: true,\\n          attributeFilter: ['href']\\n        });\\n        this.$obs_scroller = observeDOM(this.getScroller(), function () {\\n          _this3.handleEvent('mutation');\\n        }, {\\n          subtree: true,\\n          childList: true,\\n          characterData: true,\\n          attributes: true,\\n          attributeFilter: ['id', 'style', 'class']\\n        });\\n      }\\n    }\\n\\n    // general event handler\\n\\n  }, {\\n    key: 'handleEvent',\\n    value: function handleEvent(evt) {\\n      var type = typeof evt === 'string' ? evt : evt.type;\\n\\n      var self = this;\\n      function resizeThrottle() {\\n        if (!self.$resizeTimeout) {\\n          self.$resizeTimeout = setTimeout(function () {\\n            self.refresh();\\n            self.process();\\n            self.$resizeTimeout = null;\\n          }, self.$config.throttle);\\n        }\\n      }\\n\\n      if (type === 'scroll') {\\n        if (!this.$obs_scroller) {\\n          // Just in case we are added to the DOM before the scroll target is\\n          // We re-instantiate our listeners, just in case\\n          this.listen();\\n        }\\n        this.process();\\n      } else if (/(resize|orientationchange|mutation|refresh)/.test(type)) {\\n        // Postpone these events by throttle time\\n        resizeThrottle();\\n      }\\n    }\\n\\n    // Refresh the list of target links on the element we are applied to\\n\\n  }, {\\n    key: 'refresh',\\n    value: function refresh() {\\n      var _this4 = this;\\n\\n      var scroller = this.getScroller();\\n      if (!scroller) {\\n        return;\\n      }\\n      var autoMethod = scroller !== scroller.window ? OffsetMethod.POSITION : OffsetMethod.OFFSET;\\n      var method = this.$config.method === 'auto' ? autoMethod : this.$config.method;\\n      var methodFn = method === OffsetMethod.POSITION ? position : dom_offset;\\n      var offsetBase = method === OffsetMethod.POSITION ? this.getScrollTop() : 0;\\n\\n      this.$offsets = [];\\n      this.$targets = [];\\n\\n      this.$scrollHeight = this.getScrollHeight();\\n\\n      // Find all the unique link href's\\n      dom_selectAll(this.$selector, this.$el).map(function (link) {\\n        return getAttr(link, 'href');\\n      }).filter(function (href) {\\n        return HREF_REGEX.test(href || '');\\n      }).map(function (href) {\\n        var el = dom_select(href, scroller);\\n        if (isVisible(el)) {\\n          return {\\n            offset: parseInt(methodFn(el).top, 10) + offsetBase,\\n            target: href\\n          };\\n        }\\n        return null;\\n      }).filter(function (item) {\\n        return item;\\n      }).sort(function (a, b) {\\n        return a.offset - b.offset;\\n      }).reduce(function (memo, item) {\\n        // record only unique targets/offfsets\\n        if (!memo[item.target]) {\\n          _this4.$offsets.push(item.offset);\\n          _this4.$targets.push(item.target);\\n          memo[item.target] = true;\\n        }\\n        return memo;\\n      }, {});\\n\\n      return this;\\n    }\\n\\n    // Handle activating/clearing\\n\\n  }, {\\n    key: 'process',\\n    value: function process() {\\n      var scrollTop = this.getScrollTop() + this.$config.offset;\\n      var scrollHeight = this.getScrollHeight();\\n      var maxScroll = this.$config.offset + scrollHeight - this.getOffsetHeight();\\n\\n      if (this.$scrollHeight !== scrollHeight) {\\n        this.refresh();\\n      }\\n\\n      if (scrollTop >= maxScroll) {\\n        var target = this.$targets[this.$targets.length - 1];\\n        if (this.$activeTarget !== target) {\\n          this.activate(target);\\n        }\\n        return;\\n      }\\n\\n      if (this.$activeTarget && scrollTop < this.$offsets[0] && this.$offsets[0] > 0) {\\n        this.$activeTarget = null;\\n        this.clear();\\n        return;\\n      }\\n\\n      for (var i = this.$offsets.length; i--;) {\\n        var isActiveTarget = this.$activeTarget !== this.$targets[i] && scrollTop >= this.$offsets[i] && (typeof this.$offsets[i + 1] === 'undefined' || scrollTop < this.$offsets[i + 1]);\\n\\n        if (isActiveTarget) {\\n          this.activate(this.$targets[i]);\\n        }\\n      }\\n    }\\n  }, {\\n    key: 'getScroller',\\n    value: function getScroller() {\\n      if (this.$scroller) {\\n        return this.$scroller;\\n      }\\n      var scroller = this.$config.element;\\n      if (!scroller) {\\n        return null;\\n      } else if (isElement(scroller.$el)) {\\n        scroller = scroller.$el;\\n      } else if (typeof scroller === 'string') {\\n        scroller = dom_select(scroller);\\n      }\\n      if (!scroller) {\\n        return null;\\n      }\\n      this.$scroller = scroller.tagName === 'BODY' ? window : scroller;\\n      return this.$scroller;\\n    }\\n  }, {\\n    key: 'getScrollTop',\\n    value: function getScrollTop() {\\n      var scroller = this.getScroller();\\n      return scroller === window ? scroller.pageYOffset : scroller.scrollTop;\\n    }\\n  }, {\\n    key: 'getScrollHeight',\\n    value: function getScrollHeight() {\\n      return this.getScroller().scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\\n    }\\n  }, {\\n    key: 'getOffsetHeight',\\n    value: function getOffsetHeight() {\\n      var scroller = this.getScroller();\\n      return scroller === window ? window.innerHeight : getBCR(scroller).height;\\n    }\\n  }, {\\n    key: 'activate',\\n    value: function activate(target) {\\n      var _this5 = this;\\n\\n      this.$activeTarget = target;\\n      this.clear();\\n\\n      // Grab the list of target links (<a href=\\\"{$target}\\\">)\\n      var links = dom_selectAll(this.$selector.split(',').map(function (selector) {\\n        return selector + '[href=\\\"' + target + '\\\"]';\\n      }).join(','), this.$el);\\n\\n      links.forEach(function (link) {\\n        if (hasClass(link, scrollspy_class_ClassName.DROPDOWN_ITEM)) {\\n          // This is a dropdown item, so find the .dropdown-toggle and set it's state\\n          var dropdown = closest(scrollspy_class_Selector.DROPDOWN, link);\\n          if (dropdown) {\\n            _this5.setActiveState(dom_select(scrollspy_class_Selector.DROPDOWN_TOGGLE, dropdown), true);\\n          }\\n          // Also set this link's state\\n          _this5.setActiveState(link, true);\\n        } else {\\n          // Set triggered link as active\\n          _this5.setActiveState(link, true);\\n          if (matches(link.parentElement, scrollspy_class_Selector.NAV_ITEMS)) {\\n            // Handle nav-link inside nav-item, and set nav-item active\\n            _this5.setActiveState(link.parentElement, true);\\n          }\\n          // Set triggered links parents as active\\n          // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor\\n          var el = link;\\n          while (el) {\\n            el = closest(scrollspy_class_Selector.NAV_LIST_GROUP, el);\\n            var sibling = el ? el.previousElementSibling : null;\\n            if (matches(sibling, scrollspy_class_Selector.NAV_LINKS + ', ' + scrollspy_class_Selector.LIST_ITEMS)) {\\n              _this5.setActiveState(sibling, true);\\n            }\\n            // Handle special case where nav-link is inside a nav-item\\n            if (matches(sibling, scrollspy_class_Selector.NAV_ITEMS)) {\\n              _this5.setActiveState(dom_select(scrollspy_class_Selector.NAV_LINKS, sibling), true);\\n              // Add active state to nav-item as well\\n              _this5.setActiveState(sibling, true);\\n            }\\n          }\\n        }\\n      });\\n\\n      // Signal event to via $root, passing ID of activaed target and reference to array of links\\n      if (links && links.length > 0 && this.$root) {\\n        this.$root.$emit(ACTIVATE_EVENT, target, links);\\n      }\\n    }\\n  }, {\\n    key: 'clear',\\n    value: function clear() {\\n      var _this6 = this;\\n\\n      dom_selectAll(this.$selector + ', ' + scrollspy_class_Selector.NAV_ITEMS, this.$el).filter(function (el) {\\n        return hasClass(el, scrollspy_class_ClassName.ACTIVE);\\n      }).forEach(function (el) {\\n        return _this6.setActiveState(el, false);\\n      });\\n    }\\n  }, {\\n    key: 'setActiveState',\\n    value: function setActiveState(el, active) {\\n      if (!el) {\\n        return;\\n      }\\n      if (active) {\\n        addClass(el, scrollspy_class_ClassName.ACTIVE);\\n      } else {\\n        removeClass(el, scrollspy_class_ClassName.ACTIVE);\\n      }\\n    }\\n  }], [{\\n    key: 'Name',\\n    get: function get() {\\n      return scrollspy_class_NAME;\\n    }\\n  }, {\\n    key: 'Default',\\n    get: function get() {\\n      return Default;\\n    }\\n  }, {\\n    key: 'DefaultType',\\n    get: function get() {\\n      return DefaultType;\\n    }\\n  }]);\\n\\n  return ScrollSpy;\\n}();\\n\\n/* harmony default export */ var scrollspy_class = (scrollspy_class_ScrollSpy);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/directives/scrollspy/scrollspy.js\\nvar scrollspy_typeof = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\n/*\\n * ScrollSpy directive v-b-scrollspy\\n */\\n\\n\\n\\n\\nvar scrollspy_inBrowser = typeof window !== 'undefined';\\nvar isServer = !scrollspy_inBrowser;\\n\\n// Key we use to store our Instance\\nvar BVSS = '__BV_ScrollSpy__';\\n\\n// Generate config from bindings\\n/* istanbul ignore next: not easy to test */\\nfunction makeConfig(binding) {\\n  var config = {};\\n\\n  // If Argument, assume element ID\\n  if (binding.arg) {\\n    // Element ID specified as arg. We must pre-pend #\\n    config.element = '#' + binding.arg;\\n  }\\n\\n  // Process modifiers\\n  keys(binding.modifiers).forEach(function (mod) {\\n    if (/^\\\\d+$/.test(mod)) {\\n      // Offest value\\n      config.offset = parseInt(mod, 10);\\n    } else if (/^(auto|position|offset)$/.test(mod)) {\\n      // Offset method\\n      config.method = mod;\\n    }\\n  });\\n\\n  // Process value\\n  if (typeof binding.value === 'string') {\\n    // Value is a CSS ID or selector\\n    config.element = binding.value;\\n  } else if (typeof binding.value === 'number') {\\n    // Value is offset\\n    config.offset = Math.round(binding.value);\\n  } else if (scrollspy_typeof(binding.value) === 'object') {\\n    // Value is config object\\n    // Filter the object based on our supported config options\\n    keys(binding.value).filter(function (k) {\\n      return Boolean(scrollspy_class.DefaultType[k]);\\n    }).forEach(function (k) {\\n      config[k] = binding.value[k];\\n    });\\n  }\\n\\n  return config;\\n}\\n\\n/* istanbul ignore next: not easy to test */\\nfunction addBVSS(el, binding, vnode) {\\n  if (isServer) {\\n    return;\\n  }\\n  var cfg = makeConfig(binding);\\n  if (!el[BVSS]) {\\n    el[BVSS] = new scrollspy_class(el, cfg, vnode.context.$root);\\n  } else {\\n    el[BVSS].updateConfig(cfg, vnode.context.$root);\\n  }\\n  return el[BVSS];\\n}\\n\\n/* istanbul ignore next: not easy to test */\\nfunction removeBVSS(el) {\\n  if (el[BVSS]) {\\n    el[BVSS].dispose();\\n    el[BVSS] = null;\\n  }\\n}\\n\\n/*\\n * Export our directive\\n */\\n\\n/* istanbul ignore next: not easy to test */\\n/* harmony default export */ var scrollspy = ({\\n  bind: function bind(el, binding, vnode) {\\n    addBVSS(el, binding, vnode);\\n  },\\n  inserted: function inserted(el, binding, vnode) {\\n    addBVSS(el, binding, vnode);\\n  },\\n  update: function update(el, binding, vnode) {\\n    addBVSS(el, binding, vnode);\\n  },\\n  componentUpdated: function componentUpdated(el, binding, vnode) {\\n    addBVSS(el, binding, vnode);\\n  },\\n  unbind: function unbind(el) {\\n    if (isServer) {\\n      return;\\n    }\\n    // Remove scroll event listener on scrollElId\\n    removeBVSS(el);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/directives/scrollspy/index.js\\n\\n\\n\\nvar scrollspy_directives = {\\n  bScrollspy: scrollspy\\n};\\n\\nvar scrollspy_VuePlugin = {\\n  install: function install(Vue) {\\n    registerDirectives(Vue, scrollspy_directives);\\n  }\\n};\\n\\nvueUse(scrollspy_VuePlugin);\\n\\n/* harmony default export */ var directives_scrollspy = (scrollspy_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/directives/tooltip/tooltip.js\\nvar tooltip_typeof = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\n\\n\\n\\n\\n\\nvar tooltip_inBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';\\n\\n// Key which we use to store tooltip object on element\\nvar BVTT = '__BV_ToolTip__';\\n\\n// Valid event triggers\\nvar validTriggers = {\\n  'focus': true,\\n  'hover': true,\\n  'click': true,\\n  'blur': true\\n\\n  // Build a ToolTip config based on bindings (if any)\\n  // Arguments and modifiers take precedence over passed value config object\\n  /* istanbul ignore next: not easy to test */\\n};function parseBindings(bindings) {\\n  // We start out with a blank config\\n  var config = {};\\n\\n  // Process bindings.value\\n  if (typeof bindings.value === 'string') {\\n    // Value is tooltip content (html optionally supported)\\n    config.title = bindings.value;\\n  } else if (typeof bindings.value === 'function') {\\n    // Title generator function\\n    config.title = bindings.value;\\n  } else if (tooltip_typeof(bindings.value) === 'object') {\\n    // Value is config object, so merge\\n    config = object_assign(bindings.value);\\n  }\\n\\n  // If Argument, assume element ID of container element\\n  if (bindings.arg) {\\n    // Element ID specified as arg. We must prepend '#' to become a CSS selector\\n    config.container = '#' + bindings.arg;\\n  }\\n\\n  // Process modifiers\\n  keys(bindings.modifiers).forEach(function (mod) {\\n    if (/^html$/.test(mod)) {\\n      // Title allows HTML\\n      config.html = true;\\n    } else if (/^nofade$/.test(mod)) {\\n      // no animation\\n      config.animation = false;\\n    } else if (/^(auto|top(left|right)?|bottom(left|right)?|left(top|bottom)?|right(top|bottom)?)$/.test(mod)) {\\n      // placement of tooltip\\n      config.placement = mod;\\n    } else if (/^(window|viewport)$/.test(mod)) {\\n      // bounday of tooltip\\n      config.boundary = mod;\\n    } else if (/^d\\\\d+$/.test(mod)) {\\n      // delay value\\n      var delay = parseInt(mod.slice(1), 10) || 0;\\n      if (delay) {\\n        config.delay = delay;\\n      }\\n    } else if (/^o-?\\\\d+$/.test(mod)) {\\n      // offset value. Negative allowed\\n      var offset = parseInt(mod.slice(1), 10) || 0;\\n      if (offset) {\\n        config.offset = offset;\\n      }\\n    }\\n  });\\n\\n  // Special handling of event trigger modifiers Trigger is a space separated list\\n  var selectedTriggers = {};\\n\\n  // parse current config object trigger\\n  var triggers = typeof config.trigger === 'string' ? config.trigger.trim().split(/\\\\s+/) : [];\\n  triggers.forEach(function (trigger) {\\n    if (validTriggers[trigger]) {\\n      selectedTriggers[trigger] = true;\\n    }\\n  });\\n\\n  // Parse Modifiers for triggers\\n  keys(validTriggers).forEach(function (trigger) {\\n    if (bindings.modifiers[trigger]) {\\n      selectedTriggers[trigger] = true;\\n    }\\n  });\\n\\n  // Sanitize triggers\\n  config.trigger = keys(selectedTriggers).join(' ');\\n  if (config.trigger === 'blur') {\\n    // Blur by itself is useless, so convert it to 'focus'\\n    config.trigger = 'focus';\\n  }\\n  if (!config.trigger) {\\n    // remove trigger config\\n    delete config.trigger;\\n  }\\n\\n  return config;\\n}\\n\\n//\\n// Add or Update tooltip on our element\\n//\\n/* istanbul ignore next: not easy to test */\\nfunction applyBVTT(el, bindings, vnode) {\\n  if (!tooltip_inBrowser) {\\n    return;\\n  }\\n  if (!popper[\\\"a\\\" /* default */]) {\\n    // Popper is required for tooltips to work\\n    utils_warn('v-b-tooltip: Popper.js is required for tooltips to work');\\n    return;\\n  }\\n  if (el[BVTT]) {\\n    el[BVTT].updateConfig(parseBindings(bindings));\\n  } else {\\n    el[BVTT] = new tooltip_class(el, parseBindings(bindings), vnode.context.$root);\\n  }\\n}\\n\\n//\\n// Remove tooltip on our element\\n//\\n/* istanbul ignore next: not easy to test */\\nfunction removeBVTT(el) {\\n  if (!tooltip_inBrowser) {\\n    return;\\n  }\\n  if (el[BVTT]) {\\n    el[BVTT].destroy();\\n    el[BVTT] = null;\\n    delete el[BVTT];\\n  }\\n}\\n\\n/*\\n * Export our directive\\n */\\n/* istanbul ignore next: not easy to test */\\n/* harmony default export */ var tooltip_tooltip = ({\\n  bind: function bind(el, bindings, vnode) {\\n    applyBVTT(el, bindings, vnode);\\n  },\\n  inserted: function inserted(el, bindings, vnode) {\\n    applyBVTT(el, bindings, vnode);\\n  },\\n  update: function update(el, bindings, vnode) {\\n    if (bindings.value !== bindings.oldValue) {\\n      applyBVTT(el, bindings, vnode);\\n    }\\n  },\\n  componentUpdated: function componentUpdated(el, bindings, vnode) {\\n    if (bindings.value !== bindings.oldValue) {\\n      applyBVTT(el, bindings, vnode);\\n    }\\n  },\\n  unbind: function unbind(el) {\\n    removeBVTT(el);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/directives/tooltip/index.js\\n\\n\\n\\nvar tooltip_directives = {\\n  bTooltip: tooltip_tooltip\\n};\\n\\nvar directives_tooltip_VuePlugin = {\\n  install: function install(Vue) {\\n    registerDirectives(Vue, tooltip_directives);\\n  }\\n};\\n\\nvueUse(directives_tooltip_VuePlugin);\\n\\n/* harmony default export */ var directives_tooltip = (directives_tooltip_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/directives/popover/popover.js\\nvar popover_typeof = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\n\\n\\n\\n\\n\\nvar popover_inBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';\\n\\n// Key which we use to store tooltip object on element\\nvar BVPO = '__BV_PopOver__';\\n\\n// Valid event triggers\\nvar popover_validTriggers = {\\n  'focus': true,\\n  'hover': true,\\n  'click': true,\\n  'blur': true\\n\\n  // Build a PopOver config based on bindings (if any)\\n  // Arguments and modifiers take precedence over pased value config object\\n  /* istanbul ignore next: not easy to test */\\n};function popover_parseBindings(bindings) {\\n  // We start out with a blank config\\n  var config = {};\\n\\n  // Process bindings.value\\n  if (typeof bindings.value === 'string') {\\n    // Value is popover content (html optionally supported)\\n    config.content = bindings.value;\\n  } else if (typeof bindings.value === 'function') {\\n    // Content generator function\\n    config.content = bindings.value;\\n  } else if (popover_typeof(bindings.value) === 'object') {\\n    // Value is config object, so merge\\n    config = object_assign(bindings.value);\\n  }\\n\\n  // If Argument, assume element ID of container element\\n  if (bindings.arg) {\\n    // Element ID specified as arg. We must prepend '#' to become a CSS selector\\n    config.container = '#' + bindings.arg;\\n  }\\n\\n  // Process modifiers\\n  keys(bindings.modifiers).forEach(function (mod) {\\n    if (/^html$/.test(mod)) {\\n      // Title allows HTML\\n      config.html = true;\\n    } else if (/^nofade$/.test(mod)) {\\n      // no animation\\n      config.animation = false;\\n    } else if (/^(auto|top(left|right)?|bottom(left|right)?|left(top|bottom)?|right(top|bottom)?)$/.test(mod)) {\\n      // placement of popover\\n      config.placement = mod;\\n    } else if (/^(window|viewport)$/.test(mod)) {\\n      // bounday of popover\\n      config.boundary = mod;\\n    } else if (/^d\\\\d+$/.test(mod)) {\\n      // delay value\\n      var delay = parseInt(mod.slice(1), 10) || 0;\\n      if (delay) {\\n        config.delay = delay;\\n      }\\n    } else if (/^o-?\\\\d+$/.test(mod)) {\\n      // offset value (negative allowed)\\n      var offset = parseInt(mod.slice(1), 10) || 0;\\n      if (offset) {\\n        config.offset = offset;\\n      }\\n    }\\n  });\\n\\n  // Special handling of event trigger modifiers Trigger is a space separated list\\n  var selectedTriggers = {};\\n\\n  // parse current config object trigger\\n  var triggers = typeof config.trigger === 'string' ? config.trigger.trim().split(/\\\\s+/) : [];\\n  triggers.forEach(function (trigger) {\\n    if (popover_validTriggers[trigger]) {\\n      selectedTriggers[trigger] = true;\\n    }\\n  });\\n\\n  // Parse Modifiers for triggers\\n  keys(popover_validTriggers).forEach(function (trigger) {\\n    if (bindings.modifiers[trigger]) {\\n      selectedTriggers[trigger] = true;\\n    }\\n  });\\n\\n  // Sanitize triggers\\n  config.trigger = keys(selectedTriggers).join(' ');\\n  if (config.trigger === 'blur') {\\n    // Blur by itself is useless, so convert it to focus\\n    config.trigger = 'focus';\\n  }\\n  if (!config.trigger) {\\n    // remove trigger config\\n    delete config.trigger;\\n  }\\n\\n  return config;\\n}\\n\\n//\\n// Add or Update popover on our element\\n//\\n/* istanbul ignore next: not easy to test */\\nfunction applyBVPO(el, bindings, vnode) {\\n  if (!popover_inBrowser) {\\n    return;\\n  }\\n  if (!popper[\\\"a\\\" /* default */]) {\\n    // Popper is required for tooltips to work\\n    utils_warn('v-b-popover: Popper.js is required for popovers to work');\\n    return;\\n  }\\n  if (el[BVPO]) {\\n    el[BVPO].updateConfig(popover_parseBindings(bindings));\\n  } else {\\n    el[BVPO] = new popover_class(el, popover_parseBindings(bindings), vnode.context.$root);\\n  }\\n};\\n\\n//\\n// Remove popover on our element\\n//\\n/* istanbul ignore next */\\nfunction removeBVPO(el) {\\n  if (!popover_inBrowser) {\\n    return;\\n  }\\n  if (el[BVPO]) {\\n    el[BVPO].destroy();\\n    el[BVPO] = null;\\n    delete el[BVPO];\\n  }\\n}\\n\\n/*\\n * Export our directive\\n */\\n/* istanbul ignore next: not easy to test */\\n/* harmony default export */ var popover_popover = ({\\n  bind: function bind(el, bindings, vnode) {\\n    applyBVPO(el, bindings, vnode);\\n  },\\n  inserted: function inserted(el, bindings, vnode) {\\n    applyBVPO(el, bindings, vnode);\\n  },\\n  update: function update(el, bindings, vnode) {\\n    if (bindings.value !== bindings.oldValue) {\\n      applyBVPO(el, bindings, vnode);\\n    }\\n  },\\n  componentUpdated: function componentUpdated(el, bindings, vnode) {\\n    if (bindings.value !== bindings.oldValue) {\\n      applyBVPO(el, bindings, vnode);\\n    }\\n  },\\n  unbind: function unbind(el) {\\n    removeBVPO(el);\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/directives/popover/index.js\\n\\n\\n\\nvar popover_directives = {\\n  bPopover: popover_popover\\n};\\n\\nvar directives_popover_VuePlugin = {\\n  install: function install(Vue) {\\n    registerDirectives(Vue, popover_directives);\\n  }\\n};\\n\\nvueUse(directives_popover_VuePlugin);\\n\\n/* harmony default export */ var directives_popover = (directives_popover_VuePlugin);\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/directives/index.js\\n\\n\\n\\n\\n\\n\\n\\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/es/index.js\\n\\n\\n\\n\\nvar es_VuePlugin = {\\n  install: function install(Vue) {\\n    if (Vue._bootstrap_vue_installed) {\\n      return;\\n    }\\n\\n    Vue._bootstrap_vue_installed = true;\\n\\n    // Register component plugins\\n    for (var plugin in components_namespaceObject) {\\n      Vue.use(components_namespaceObject[plugin]);\\n    }\\n\\n    // Register directive plugins\\n    for (var _plugin in directives_namespaceObject) {\\n      Vue.use(directives_namespaceObject[_plugin]);\\n    }\\n  }\\n};\\n\\nvueUse(es_VuePlugin);\\n\\n/* harmony default export */ var es = (es_VuePlugin);\\n// EXTERNAL MODULE: ./node_modules/bootstrap/dist/css/bootstrap.css\\nvar bootstrap = __webpack_require__(21);\\n\\n// EXTERNAL MODULE: ./node_modules/bootstrap-vue/dist/bootstrap-vue.css\\nvar bootstrap_vue = __webpack_require__(20);\\n\\n// CONCATENATED MODULE: ./src/main.js\\n\\n\\n\\n\\n\\n\\nvue_esm[\\\"default\\\"].use(es);\\n\\nnew vue_esm[\\\"default\\\"]({\\n  el: '#app',\\n  render: function render(h) {\\n    return h(src_App);\\n  }\\n});\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///19\\n\")}});","extractedComments":[]}